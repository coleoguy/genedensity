# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
# combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
combined.model <- unique(combined.model[, 1:19])
}
i
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
combined.model <- bind_rows(prev.model, model)
View(prev.model)
View(model)
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
i <- 1
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
a <- unique(combined.model[, 1:19])
a <- which(unique(combined.model[, 1:19]))
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
i <- 2
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
a <- unique(combined.model[, 1:19])
View(combined.model)
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
a <- combined.model[apply(combined.model[, 2:16], 1, function(x) all(is.na(x)))]
View(a)
a <- combined.model[apply(combined.model[, 2:16], 1, function(x) all(is.na(x)))]
length(a)
presence_absence <- !is.na(combined.model[, 1:19])
View(presence_absence)
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
presence_absence <- !is.na(combined.model[, 1:19])
combined.model <- combined.model[!duplicated(presence_absence), ]
View(combined.model)
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
presence_absence <- !is.na(combined.model[, 1:19])
combined.model <- combined.model[duplicated(presence_absence), ]
View(combined.model)
# Convert columns 1:19 to presence/absence (1 for presence, 0 for absence)
presence_absence <- !is.na(combined.model[, 1:19])
# Find duplicated rows based on presence/absence state
duplicated_rows <- combined.model[duplicated(presence_absence) | duplicated(presence_absence, fromLast = TRUE), ]
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
presence_absence <- !is.na(combined.model[, 1:19])
combined.model <- combined.model[duplicated(presence_absence), ]
View(presence_absence)
presence_absence <- !is.na(combined.model[, 1:19])
nrow(presence_absence)
ncol(presense_absence)
presence_absence <- !is.na(combined.model[, 1:19])
nrow(presence_absence)
ncol(presence_absence)
nrow(combined.model)
ncol(combined.model)
# Identify parameter columns (1-19)
param_cols <- 1:19
# Create a presence/absence matrix (TRUE/FALSE) for parameters
presence_matrix <- !is.na(combined.model[, param_cols])
# Generate unique identifiers for each pattern
combined.model$group_id <- apply(
presence_matrix,
1,
function(row) paste0(as.integer(row), collapse = "")
)
# Split into groups of duplicate models
grouped_models <- split(combined.model, combined.model$group_id)
View(grouped_models)
View(grouped_models)
21865-6249
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
# Convert columns 1:19 to binary presence/absence (1 for presence, 0 for absence)
presence_absence <- !is.na(combined.model[, 1:19])
# Create a unique identifier for each presence/absence pattern
presence_absence_id <- apply(presence_absence, 1, function(x) paste(x, collapse = "_"))
# Add the presence/absence pattern ID as a new column to the dataframe
combined.model$presence_absence_id <- presence_absence_id
# Group by the presence/absence pattern and filter to keep all rows with the same pattern
models_by_pattern <- lapply(unique(presence_absence_id), function(pattern) {
subset(combined.model, presence_absence_id == pattern)
})
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
# Convert columns 1:19 to binary presence/absence (1 for presence, 0 for absence)
presence_absence <- !is.na(combined.model[, 1:19])
# Create a unique identifier for each presence/absence pattern
presence_absence_id <- apply(presence_absence, 1, function(x) paste(x, collapse = "_"))
# Add the presence/absence pattern ID as a new column to the dataframe
combined.model$presence_absence_id <- presence_absence_id
# Group by the presence/absence pattern and filter to keep all rows with the same pattern
models_by_pattern <- lapply(unique(presence_absence_id), function(pattern) {
subset(combined.model, presence_absence_id == pattern)
})
View(models_by_pattern)
models_combined <- bind_rows(models_by_pattern)
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
# Convert columns 1:19 to binary presence/absence (TRUE for presence, FALSE for absence)
presence_absence <- !is.na(combined.model[, 1:19])
# Create a unique identifier for each presence/absence pattern (as a string)
presence_absence_id <- apply(presence_absence, 1, function(x) paste(x, collapse = "_"))
# Count how many times each pattern appears
pattern_counts <- table(presence_absence_id)
# Get only the presence/absence patterns that appear more than once
duplicate_patterns <- names(pattern_counts[pattern_counts > 1])
# Subset the original dataframe to include only rows with duplicate patterns
duplicated_models <- combined.model[presence_absence_id %in% duplicate_patterns, ]
View(duplicated_models)
# View the result (all models with duplicate parameter inclusion patterns)
cat("Number of models with duplicate patterns:", nrow(duplicated_models), "\n")
head(duplicated_models)
View(duplicated_models)
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
# Convert columns 1:19 to binary presence/absence (TRUE for presence, FALSE for absence)
presence_absence <- !is.na(combined.model[, 1:19])
# Create a unique identifier for each presence/absence pattern (as a string)
presence_absence_id <- apply(presence_absence, 1, function(x) paste(x, collapse = "_"))
# Count how many times each pattern appears
pattern_counts <- table(presence_absence_id)
# Get only the presence/absence patterns that appear more than once
duplicate_patterns <- names(pattern_counts[pattern_counts > 1])
# Subset the original dataframe to include only rows with duplicate patterns
duplicated_models <- combined.model[presence_absence_id %in% duplicate_patterns, ]
# Sort by the presence/absence pattern to group models with the same inclusion pattern together
duplicated_models <- duplicated_models[order(presence_absence_id), ]
View(duplicated_models)
