adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
int
imp
hist(models$AICc)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.pgls.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
hist(models$AICc)
hist(models$AICc)
hist(models$AICc)
hist(models$AICc)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[-1]
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
View(int)
View(avg)
View(models)
View(models)
plot(models$lambda.p)
plot(models$lambda.p)
View(models)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
sw(models[1:length(which(cumsum(models$weight) <= 0.95))])
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[-1]
sw(models[1:length(which(cumsum(models$weight) <= 0.95))])
View(models)
models[1:length(which(cumsum(models$weight) <= 0.95))]$weight
sum(models[1:length(which(cumsum(models$weight) <= 0.95))]$weight)
library(MuMIn)
library(viridis)
all <- readRDS("../results/all.rds")
mam <- readRDS("../results/mammalia.rds")
fish <- readRDS("../results/actinopterygii.rds")
rep <- readRDS("../results/sauria.rds")
rep <- rep[-1]
rep <- rbind(rep, rep[1,])
rep <- rep[-1,]
i <- "mam"
View(all)
library(MuMIn)
library(viridis)
all <- readRDS("../results/all.pgls.rds")
mam <- readRDS("../results/mammalia.pgls.rds")
fish <- readRDS("../results/actinopterygii.pgls.rds")
rep <- readRDS("../results/sauria.pgls.rds")
rep <- rep[-1]
rep <- rbind(rep, rep[1,])
rep <- rep[-1,]
combined.df <- data.frame()
for (i in c("all", "mam", "fish", "rep")) {
assign(i, model.avg(get(i))) # average
imp <- sort(sw(get(i)), decreasing = TRUE) # get importance
ci <- confint(get(i)) # get ci
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
if (is.null(combined.df)) {
df <- combined.df
} else {
combined.df <- rbind(combined.df, df)
}
}
View(all)
View(ci)
library(MuMIn)
library(viridis)
all <- readRDS("../results/all.rds")
mam <- readRDS("../results/mammalia.rds")
fish <- readRDS("../results/actinopterygii.rds")
rep <- readRDS("../results/sauria.rds")
rep <- rep[-1]
rep <- rbind(rep, rep[1,])
rep <- rep[-1,]
all <- all[cumsum(all$weight) <= 0.95, ]
mam <- mam[cumsum(mam$weight) <= 0.95, ]
fish <- fish[cumsum(fish$weight) <= 0.95, ]
rep <- rep[cumsum(rep$weight) <= 0.95, ]
View(all)
fish[fish$shapirowilk.p <= 0.05, ] |> nrow()
all[all$shapirowilk.p <= 0.05, ] |> nrow()
mam[mam$shapirowilk.p <= 0.05, ] |> nrow()
rep[rep$shapirowilk.p <= 0.05, ] |> nrow()
all[all$shapirowilk.p <= 0.05, ] |> nrow()
all[all$lambda.p <= 0.05, ] |> nrow()
mam[mam$lambda.p <= 0.05, ] |> nrow()
fish[fish$lambda.p <= 0.05, ] |> nrow()
rep[rep$lambda.p <= 0.05, ] |> nrow()
View(rep)
284/904
View(mam)
View(all)
View(rep)
# filter data
library(data.table)
library(beeswarm)
library(viridis)
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0.8, ]
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat <- na.omit(dat[, c("species", "clade", "rsq", "asmblysize.Mb")])
names(dat)[names(dat) == "asmblysize.Mb"] <- "asmblysize.bp"
dat$asmblysize.bp <- dat$asmblysize.bp * 1000000
files <- list.files("../results/divsums")
masked.sp <- gsub("_", " ", gsub(".divsum$", "", files))
int <- intersect(masked.sp, dat$species)
dat <- dat[dat$species %in% int, ]
dat <- dat[dat$species %in% c("Bos taurus", "Peromyscus maniculatus bairdii"), ]
# repeat landscape
cols <- c("#e31a1c", "#fb9a99", "#33a02c", "#b2df8a", "#1f78b4", "#a6cee3")
# par(mar = c(3, 4, 1, 7)+0.1)
# par(mfrow = c(1, 2))
i <- dat$species[1]
if (i == dat$species[1]) {
par(mar = c(5.1, 4.1, 4.1, 0.8))
} else {
par(mar = c(5.1, 0.7, 4.1, 4.2))
}
species <- i
divsum <- readLines(paste0("../results/divsums/", gsub(" ", "_", i), ".divsum"))
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
classes <- c("LINE", "SINE", "LTR", "DNA", "Div", "Unknown")
for (j in classes) {
pat <- paste0("^", j, "(\\.|$)")
headers <- grep(pat, names(divsum), value = TRUE)
sub <- divsum[, headers]
sums <- rowSums(as.matrix(sub)) / dat[dat$species == i, ]$asmblysize.bp * 100
divsum <- divsum[, !names(divsum) %in% headers]
assign(j, sums)
}
Others <- rowSums(as.matrix(divsum)) / dat[dat$species == i, ]$asmblysize.bp * 100
# divsum <- data.frame(LINE, SINE, LTR, DNA, Others, Unknown)
divsum <- data.frame(LINE)
divsum <- t(as.matrix(divsum))
divsum <- divsum[, 1:51]
# divsum <- divsum[nrow(divsum):1, ]
barplot(divsum,
# col = cols,
col = "#a6cee3",
space = 0,
border = NA,
xlab = NA,
ylab = NA,
#yaxt = "n",
ylim = c(0, 1.1*max(divsum)))
#axis(2, at = round(c(0, max(divsum)), 2))
axis(1)
par(mfrow = c(1, 1))
par(mar = c(5.1, 4.1, 4.1, 2.1))
# filter data
library(data.table)
library(beeswarm)
library(viridis)
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0.8, ]
dat <- dat[!duplicated(dat$species), ]
View(dat)
# r2 beeswarm
library(beeswarm)
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0.8, ]
dat <- dat[!duplicated(dat$species), ]
dat <- dat[dat$clade %in% c("Mammalia", "Sauria", "Actinopterygii"), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$clade <- factor(dat$clade, levels = c("Mammalia", "Actinopterygii", "Sauria"))
map <- c("Mammalia" = "#d95f02", "Actinopterygii" = "#7570b3", "Sauria" = "#1b9e77")
cols <- map[dat$clade]
nmam <- nrow(dat[dat$clade == "Mammalia", ])
nfish <- nrow(dat[dat$clade == "Actinopterygii", ])
nrep <- nrow(dat[dat$clade == "Sauria", ])
beeswarm(rsq ~ clade,
xlab = NA,
ylab = "R-squared",
data = dat,
pwcol = cols,
pch = 16,
spacing = 1.65,
labels = NA)
text(1, 0.05, "Mammals", xpd = NA, adj = c(0.5, 0.5))
text(2, 0.05, "Ray-finned fish", xpd = NA, adj = c(0.5, 0.5))
text(3, 0.05, "Reptiles", xpd = NA, adj = c(0.5, 0.5))
text(1, -0.025, paste0("n=", nmam), xpd = NA, adj = c(0.5, 0.5))
text(2, -0.025, paste0("n=", nfish), xpd = NA, adj = c(0.5, 0.5))
text(3, -0.025, paste0("n=", nrep), xpd = NA, adj = c(0.5, 0.5))
# phylogenetic anova
library(phytools)
dat <- na.omit(dat[, c("species", "clade", "rsq")])
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(dat$species, tree$tip.label)
pruned.tree <- keep.tip(tree, int)
sig <- phylosig(pruned.tree,
setNames(dat$rsq, dat$species),
method = "lambda",
test = TRUE,
nsim = 10000)[[4]]
if (sig < 0.05) {
x <- setNames(dat$clade, dat$species)
y <- setNames(dat$rsq, dat$species)
phylANOVA(pruned.tree, x, y, nsim = 10000, posthoc = TRUE)
}
?phylANOVA
# r2 beeswarm
library(beeswarm)
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0.8, ]
dat <- dat[!duplicated(dat$species), ]
dat <- dat[dat$clade %in% c("Mammalia", "Sauria", "Actinopterygii"), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$clade <- factor(dat$clade, levels = c("Mammalia", "Actinopterygii", "Sauria"))
map <- c("Mammalia" = "#d95f02", "Actinopterygii" = "#7570b3", "Sauria" = "#1b9e77")
cols <- map[dat$clade]
nmam <- nrow(dat[dat$clade == "Mammalia", ])
nfish <- nrow(dat[dat$clade == "Actinopterygii", ])
nrep <- nrow(dat[dat$clade == "Sauria", ])
beeswarm(rsq ~ clade,
xlab = NA,
ylab = "R-squared",
data = dat,
pwcol = cols,
pch = 16,
spacing = 1.65,
labels = NA)
text(1, 0.05, "Mammals", xpd = NA, adj = c(0.5, 0.5))
text(2, 0.05, "Ray-finned fish", xpd = NA, adj = c(0.5, 0.5))
text(3, 0.05, "Reptiles", xpd = NA, adj = c(0.5, 0.5))
text(1, -0.025, paste0("n=", nmam), xpd = NA, adj = c(0.5, 0.5))
text(2, -0.025, paste0("n=", nfish), xpd = NA, adj = c(0.5, 0.5))
text(3, -0.025, paste0("n=", nrep), xpd = NA, adj = c(0.5, 0.5))
# phylogenetic anova
library(phytools)
# r2 beeswarm
library(beeswarm)
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0.8, ]
dat <- dat[!duplicated(dat$species), ]
dat <- dat[dat$clade %in% c("Mammalia", "Sauria", "Actinopterygii"), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
# r2 beeswarm
library(beeswarm)
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0.8, ]
dat <- dat[!duplicated(dat$species), ]
View(dat)
# largest repeats in each clade
library(data.table)
library(beeswarm)
library(viridis)
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0.8, ]
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
View(dat)
library(MuMIn)
library(viridis)
all <- readRDS("../results/all.rds")
mam <- readRDS("../results/mammalia.rds")
fish <- readRDS("../results/actinopterygii.rds")
rep <- readRDS("../results/sauria.rds")
all <- all[order(all$AICc), ]
mam <- mam[order(mam$AICc), ]
fish <- fish[order(fish$AICc), ]
rep <- rep[order(rep$AICc), ]
# remove seemingly overparametrized model and recalculate AICc
rep <- rep[-1]
rep <- rbind(rep, rep[1,])
rep <- rep[-1,]
all <- all[cumsum(all$weight) <= 0.95, ]
mam <- mam[cumsum(mam$weight) <= 0.95, ]
fish <- fish[cumsum(fish$weight) <= 0.95, ]
rep <- rep[cumsum(rep$weight) <= 0.95, ]
combined.df <- data.frame()
for (i in c("all", "mam", "fish", "rep")) {
assign(i, model.avg(get(i))) # average
imp <- sort(sw(get(i)), decreasing = TRUE) # get importance
ci <- confint(get(i)) # get ci
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
if (is.null(combined.df)) {
df <- combined.df
} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance >= 0.5, ]
# x positions
x <- c()
for (i in 1:length(combined.df$clade)) {
if (is.null(x)) {
x <- c(1)
} else {
x <- c(x, ifelse(combined.df$clade[i] == prev, tail(x, 1) + 0.55, tail(x, 1) + 1))
}
prev <- combined.df$clade[i]
}
imp <- combined.df$importance
# color mapping
res <- 10000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in combined.df$model) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
int.range <- range(as.matrix(combined.df[c("lower", "upper")]))
plot(y = combined.df$estimate, x = x, type = "n", ylim = 1.05 * int.range,
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(min(x)-0.25, max(x)+0.25)) # plot
abline(h = 0, lty = 1, col = "black") # line at y = 0
for (l in -100:100) {
abline(h = l, lty = 2, col = "grey") # line at y = 0
}
segments(x, combined.df$lower, x, combined.df$upper, lwd = 2) # confidence bars
segments(x-0.1, combined.df$upper, x+0.1, combined.df$upper, lwd = 2)
segments(x-0.1, combined.df$lower, x+0.1, combined.df$lower, lwd = 2)
points(x, combined.df$estimate, pch = 16, cex = 1.5, col = cols) # colored points
axis(2) # y axis
axis(2, at = seq(-10, 10, by = 0.5), labels = FALSE, tcl = -0.2)
axis(2, at = seq(-10, 10, by = 1), labels = FALSE, tcl = -0.5)
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged models",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
rep <- readRDS("../results/sauria.rds")
# remove seemingly overparametrized model and recalculate AICc
rep <- rep[-1, ]
rep <- rbind(rep, rep[1,])
rep <- rep[-1, ]
rep <- readRDS("../results/sauria.rds")
# remove seemingly overparametrized model and recalculate AICc
rep <- rep[-1]
rep <- rbind(rep, rep[1,])
rep <- rep[-1, ]
rep <- readRDS("../results/sauria.rds")
# remove seemingly overparametrized model and recalculate AICc
rep <- rep[-1, ]
View(rep)
rep <- rbind(rep, rep[1,])
rep <- rep[-1, ]
View(rep)
plot(rep$AICc)
rep <- readRDS("../results/sauria.rds")
View(rep)
plot(rep$AICc)
plot(rep$weight)
all <- readRDS("../results/all.rds")
plot(all$AICc)
rep <- readRDS("../results/sauria.rds")
library(MuMIn)
library(viridis)
all <- readRDS("../results/all.rds")
mam <- readRDS("../results/mammalia.rds")
fish <- readRDS("../results/actinopterygii.rds")
rep <- readRDS("../results/sauria.rds")
plot(all$AICc)
plot(fish$AICc)
plot(rep$AICc)
View(rep)
rep <- rep[order(rep$AICc), ]
# remove seemingly overparametrized model and recalculate AICc
rep <- rep[-1, ]
rep <- rbind(rep, rep[1,])
rep <- rep[-1, ]
View(rep)
plot(rep$AICc)
all <- all[cumsum(all$weight) <= 0.95, ]
mam <- mam[cumsum(mam$weight) <= 0.95, ]
fish <- fish[cumsum(fish$weight) <= 0.95, ]
rep <- rep[cumsum(rep$weight) <= 0.95, ]
plot(rep$AICc)
library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# vector for attribute(model)$terms
terms <- cols[1:19]
attributes(terms)$interceptLabel <- "(Intercept)"
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
for(col in miss) df[[col]] <- NA
return(df[, cols, drop = FALSE])
}
combined.models <- NULL
combined.coefTables <- list()
for(i in 1:896){
if (!file.exists(paste0("../results/sauria.models/Sauria.", i, ".rds"))) {
next
}
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types and $names
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
# add missing columns and sort by the order of cols;
cur.models <- fix_columns(as.data.frame(cur.models), cols)
# assign unique indices to each model
cur.models$rn <- paste(i, rownames(cur.models), sep = ".")
# save attributes(cur.models)$coefTables and assign unique indices to each
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = ".")
# combine current and previous models
if (is.null(combined.models)) {
combined.models <- cur.models
} else {
combined.models <- rbind(combined.models, cur.models)
}
#combine current and previous attribute(cur.models)$coefTables
combined.coefTables <- c(combined.coefTables, cur.coefTables)
}
# reassign rownames
rownames(combined.models) <- combined.models$rn
combined.models$rn <- NULL
# remove duplicate models based on parameter inclusion
# to accomodate rounding errors, actual values are not matched
# models with the same parameter inclusion patterns have the same parameter estimates
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
final.model <- combined.models[!duplicated(pattern), ]
final.coefTables <- combined.coefTables[!duplicated(pattern)]
# reassign rownames
rownames(final.model) <- as.character(seq_len(nrow(final.model)))
names(final.coefTables) <- as.character(seq_len(nrow(final.model)))
# set other attributes
attributes(final.model)$model.calls <- NULL
attributes(final.model)$coefTables <- final.coefTables
attributes(final.model)$column.types <- ctypes
attributes(final.model)$names <- cols
attributes(final.model)$class <- c("model.selection", "data.frame")
attributes(final.model)$terms <- terms
# reorder, recalculate weights, and save
final.model <- final.model[order(final.model$AICc), ]
rep <- rbind(rep, rep[1,])
final.model <- rbind(final.model, final.model[1,])
final.model <- final.model[-1, ]
View(final.model)
saveRDS(final.model, "../results/sauria.09.rds")
