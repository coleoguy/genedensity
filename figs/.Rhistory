attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
# Convert columns 1:19 to binary presence/absence (TRUE for presence, FALSE for absence)
presence_absence <- !is.na(combined.model[, 1:19])
# Create a unique identifier for each presence/absence pattern (as a string)
presence_absence_id <- apply(presence_absence, 1, function(x) paste(x, collapse = "_"))
# Count how many times each pattern appears
pattern_counts <- table(presence_absence_id)
# Get only the presence/absence patterns that appear more than once
duplicate_patterns <- names(pattern_counts[pattern_counts > 1])
# Subset the original dataframe to include only rows with duplicate patterns
duplicated_models <- combined.model[presence_absence_id %in% duplicate_patterns, ]
View(duplicated_models)
# View the result (all models with duplicate parameter inclusion patterns)
cat("Number of models with duplicate patterns:", nrow(duplicated_models), "\n")
head(duplicated_models)
View(duplicated_models)
library(MuMIn)
library(dplyr)
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight"
)
levels <- c(rep("terms", 19), rep("extra", 2), "df", "loglik", "ic", "delta", "weight")
all.levels <- c("terms", "varying", "extra", "df", "loglik", "ic", "delta", "weight")
for (i in c(1:27)) {
if (i != 1) {
prev.model <- combined.model
}
model <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds")) # load model
attr <- attributes(model) # get attributes
# fix attributes(model)$column.types
column.types <- factor(levels, levels = all.levels)
names(column.types) <- cols
attr$column.types <- column.types
# fix attributes(model)$names
attr$names <- cols
# add NA columns
model <- as.data.frame(model)
missing <- setdiff(cols, colnames(model))
for (col in missing) {
model[[col]] <- NA
}
model <- model[, cols]
attributes(model) <- attr # reapply attributes
if (i != 1) {
combined.model <- bind_rows(prev.model, model)
} else {
combined.model <- model
}
combined.model <- combined.model[!duplicated(combined.model[, 1:19]), ]
}
# Convert columns 1:19 to binary presence/absence (TRUE for presence, FALSE for absence)
presence_absence <- !is.na(combined.model[, 1:19])
# Create a unique identifier for each presence/absence pattern (as a string)
presence_absence_id <- apply(presence_absence, 1, function(x) paste(x, collapse = "_"))
# Count how many times each pattern appears
pattern_counts <- table(presence_absence_id)
# Get only the presence/absence patterns that appear more than once
duplicate_patterns <- names(pattern_counts[pattern_counts > 1])
# Subset the original dataframe to include only rows with duplicate patterns
duplicated_models <- combined.model[presence_absence_id %in% duplicate_patterns, ]
# Sort by the presence/absence pattern to group models with the same inclusion pattern together
duplicated_models <- duplicated_models[order(presence_absence_id), ]
View(duplicated_models)
library(MuMIn)
library(viridis)
models <- readRDS("../results/Mammalia.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
View(models)
length(models$lambda.p => 0.05)
length(models$lambda.p >= 0.05)
models$lambda.p >= 0.05
length(which(models$lambda.p >= 0.05))
library(MuMIn)
library(viridis)
models <- readRDS("../results/Mammalia.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
imp <- sort(sw(models), decreasing = T) # importance
terms <- names(imp) # terms
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- as.data.frame(confint(avg, full = FALSE)) [terms, ] # confidence intervals
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in terms) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of mammals",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
length(which(models$lambda.p >= 0.05))
View(models)
length(which(models$lambda.p >= 0.07))
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
imp <- sort(sw(models), decreasing = T) # importance
terms <- names(imp) # terms
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- as.data.frame(confint(avg, full = FALSE)) [terms, ] # confidence intervals
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in terms) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of mammals",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
library(MuMIn)
library(viridis)
models <- readRDS("../results/mammalia.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
length(which(models$lambda.p >= 0.05))
length(which(models$shapirowilk.p >= 0.05))
View(models)
library(MuMIn)
library(viridis)
models <- readRDS("../results/actinopterygii.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
length(which(models$lambda.p >= 0.05))
View(models)
library(MuMIn)
library(viridis)
models <- readRDS("../results/actinopterygii.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
imp <- sort(sw(models), decreasing = T) # importance
terms <- names(imp) # terms
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- as.data.frame(confint(avg, full = FALSE)) [terms, ] # confidence intervals
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in terms) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of ray-finned fish",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
View(int)
View(models)
length(which(models$lambda.p >= 0.05))
library(MuMIn)
library(viridis)
models <- readRDS("../results/all.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
imp <- sort(sw(models), decreasing = T) # importance
terms <- names(imp) # terms
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- as.data.frame(confint(avg, full = FALSE)) [terms, ] # confidence intervals
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in terms) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of all species",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
View(models)
length(which(models$lambda.p >= 0.05))
View(models)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
View(models)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[-1]
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
imp <- sort(sw(models), decreasing = T) # importance
terms <- names(imp) # terms
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- as.data.frame(confint(avg, full = FALSE)) [terms, ] # confidence intervals
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in terms) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of reptiles",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
length(which(models$lambda.p >= 0.05))
imp
int
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[-1]
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
imp <- sort(sw(models), decreasing = T) # importance
terms <- names(imp) # terms
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- as.data.frame(confint(avg, full = FALSE))[terms, ] # confidence intervals
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in terms) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of reptiles",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
int
imp
hist(models$AICc)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.pgls.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
hist(models$AICc)
hist(models$AICc)
hist(models$AICc)
hist(models$AICc)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[-1]
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
View(int)
View(avg)
View(models)
View(models)
plot(models$lambda.p)
plot(models$lambda.p)
View(models)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
sw(models[1:length(which(cumsum(models$weight) <= 0.95))])
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[-1]
sw(models[1:length(which(cumsum(models$weight) <= 0.95))])
View(models)
models[1:length(which(cumsum(models$weight) <= 0.95))]$weight
sum(models[1:length(which(cumsum(models$weight) <= 0.95))]$weight)
