a <- readRDS("../results/dna.line.sauria.models.rds")
l <- a
a <- a[1:length(which(cumsum(a$weight) <= 0.95))]
l <- l[1:length(which(cumsum(l$weight) <= 0.95))]
dat <- rbind(dat, dat[1,])
l <- rbind(l, l[1,])
l <- l[-1,]
l == a
all(l == a)
all.equal(l, a)
View(a)
View(l)
a <- readRDS("../results/dna.line.sauria.models.rds")
b <- readRDS("../results/dna.ltr.sauria.models.rds")
c <- readRDS("../results/dna.sine.sauria.models.rds")
d <- readRDS("../results/line.ltr.sauria.models.rds")
e <- readRDS("../results/line.sine.sauria.models.rds")
f <- readRDS("../results/ltr.sine.sauria.models.rds")
a <- a[1:length(which(cumsum(a$weight) <= 0.95))]
b <- b[1:length(which(cumsum(b$weight) <= 0.95))]
c <- c[1:length(which(cumsum(c$weight) <= 0.95))]
d <- d[1:length(which(cumsum(d$weight) <= 0.95))]
e <- e[1:length(which(cumsum(e$weight) <= 0.95))]
f <- f[1:length(which(cumsum(f$weight) <= 0.95))]
sw(a)
library(MuMIn)
se(a)
sw(a)
sw(a)
df <- data.frame(sw(a), sw(b))
View(df)
terms <- c("age.dna", "prop.dna", "age.dna:prop.dna",
"age.line", "prop.line", "age.line:prop.line",
"age.ltr", "prop.ltr", "age.ltr:prop.ltr",
"age.sine", "prop.sine", "age.sine:prop.sine",
"age.unknown", "prop.unknown", "age.unknown:prop.unknown",
"age.others", "prop.others", "age.others:prop.others"
)
as.vector(sw(a))
as.numeric(sw(a))
sw(a)
sw(a)[1]
sw(a)[1, ]
sw(a)[1:length(terms)]
df <- data.frame(sw(a)[1:length(terms)],
sw(b)[1:length(terms)],
sw(c)[1:length(terms)])
View(df)
df <- data.frame(
vec1 = sw(a)[terms],
vec2 = sw(b)[terms],
vec3 = sw(c)[terms]
)
View(df)
df <- data.frame(
dna.line = sw(a)[terms],
dna.ltr = sw(b)[terms],
dna.sine = sw(c)[terms],
line.ltr = sw(d)[terms],
line.sine = sw(e)[terms],
ltr.sine = sw(f)[terms],
)
a <- readRDS("../results/dna.line.sauria.models.rds")
b <- readRDS("../results/dna.ltr.sauria.models.rds")
c <- readRDS("../results/dna.sine.sauria.models.rds")
d <- readRDS("../results/line.ltr.sauria.models.rds")
e <- readRDS("../results/line.sine.sauria.models.rds")
f <- readRDS("../results/ltr.sine.sauria.models.rds")
a <- a[1:length(which(cumsum(a$weight) <= 0.95))]
b <- b[1:length(which(cumsum(b$weight) <= 0.95))]
c <- c[1:length(which(cumsum(c$weight) <= 0.95))]
d <- d[1:length(which(cumsum(d$weight) <= 0.95))]
e <- e[1:length(which(cumsum(e$weight) <= 0.95))]
f <- f[1:length(which(cumsum(f$weight) <= 0.95))]
df <- data.frame(
dna.line = sw(a)[terms],
dna.ltr = sw(b)[terms],
dna.sine = sw(c)[terms],
line.ltr = sw(d)[terms],
line.sine = sw(e)[terms],
ltr.sine = sw(f)[terms],
)
df <- data.frame(
dna.line = sw(a)[terms],
dna.ltr = sw(b)[terms],
dna.sine = sw(c)[terms],
line.ltr = sw(d)[terms],
line.sine = sw(e)[terms],
ltr.sine = sw(f)[terms]
)
View(df)
row.names(df) <- terms
View(df)
library(MuMIn)
a <- readRDS("../results/dna.line.sauria.models.rds")
b <- readRDS("../results/dna.ltr.sauria.models.rds")
c <- readRDS("../results/dna.sine.sauria.models.rds")
d <- readRDS("../results/dna.unknown.sauria.models.rds")
e <- readRDS("../results/dna.others.sauria.models.rds")
f <- readRDS("../results/line.ltr.sauria.models.rds")
g <- readRDS("../results/line.sine.sauria.models.rds")
h <- readRDS("../results/line.unknown.sauria.models.rds")
i <- readRDS("../results/line.others.sauria.models.rds")
j <- readRDS("../results/ltr.sine.sauria.models.rds")
k <- readRDS("../results/ltr.unknown.sauria.models.rds")
l <- readRDS("../results/ltr.others.sauria.models.rds")
m <- readRDS("../results/sine.unknown.sauria.models.rds")
n <- readRDS("../results/sine.others.sauria.models.rds")
o <- readRDS("../results/unknown.others.sauria.models.rds")
a <- a[1:length(which(cumsum(a$weight) <= 0.95))]
b <- b[1:length(which(cumsum(b$weight) <= 0.95))]
c <- c[1:length(which(cumsum(c$weight) <= 0.95))]
d <- d[1:length(which(cumsum(d$weight) <= 0.95))]
e <- e[1:length(which(cumsum(e$weight) <= 0.95))]
f <- f[1:length(which(cumsum(f$weight) <= 0.95))]
g <- g[1:length(which(cumsum(g$weight) <= 0.95))]
h <- h[1:length(which(cumsum(h$weight) <= 0.95))]
i <- i[1:length(which(cumsum(i$weight) <= 0.95))]
j <- j[1:length(which(cumsum(j$weight) <= 0.95))]
k <- k[1:length(which(cumsum(k$weight) <= 0.95))]
l <- l[1:length(which(cumsum(l$weight) <= 0.95))]
m <- m[1:length(which(cumsum(m$weight) <= 0.95))]
n <- n[1:length(which(cumsum(n$weight) <= 0.95))]
o <- o[1:length(which(cumsum(o$weight) <= 0.95))]
df <- data.frame(
dna.line = sw(a)[terms],
dna.ltr = sw(b)[terms],
dna.sine = sw(c)[terms],
dna.unknown = sw(d)[terms],
dna.others = sw(e)[terms],
line.ltr = sw(f)[terms],
line.sine = sw(g)[terms],
line.unknown = sw(h)[terms],
line.others = sw(i)[terms],
ltr.sine = sw(j)[terms],
ltr.unknown = sw(k)[terms],
ltr.others = sw(l)[terms],
sine.unknown = sw(m)[terms],
sine.others = sw(n)[terms],
unknown.others = sw(o)[terms],
)
df <- data.frame(
dna.line = sw(a)[terms],
dna.ltr = sw(b)[terms],
dna.sine = sw(c)[terms],
dna.unknown = sw(d)[terms],
dna.others = sw(e)[terms],
line.ltr = sw(f)[terms],
line.sine = sw(g)[terms],
line.unknown = sw(h)[terms],
line.others = sw(i)[terms],
ltr.sine = sw(j)[terms],
ltr.unknown = sw(k)[terms],
ltr.others = sw(l)[terms],
sine.unknown = sw(m)[terms],
sine.others = sw(n)[terms],
unknown.others = sw(o)[terms]
)
terms <- c("age.dna", "prop.dna", "age.dna:prop.dna",
"age.line", "prop.line", "age.line:prop.line",
"age.ltr", "prop.ltr", "age.ltr:prop.ltr",
"age.sine", "prop.sine", "age.sine:prop.sine",
"age.unknown", "prop.unknown", "age.unknown:prop.unknown",
"age.others", "prop.others", "age.others:prop.others"
)
df <- data.frame(
dna.line = sw(a)[terms],
dna.ltr = sw(b)[terms],
dna.sine = sw(c)[terms],
dna.unknown = sw(d)[terms],
dna.others = sw(e)[terms],
line.ltr = sw(f)[terms],
line.sine = sw(g)[terms],
line.unknown = sw(h)[terms],
line.others = sw(i)[terms],
ltr.sine = sw(j)[terms],
ltr.unknown = sw(k)[terms],
ltr.others = sw(l)[terms],
sine.unknown = sw(m)[terms],
sine.others = sw(n)[terms],
unknown.others = sw(o)[terms]
)
row.names(df) <- terms
View(df)
i <- 1
mean(df[i], )
View(df)
df[1, ]
vec <- c(vec, mean(df[1, ]))
vec <- c()
for (i in 1:nrow(df)) {
vec <- c(vec, mean(df[1, ]))
}
vec <- c()
for (i in 1:nrow(df)) {
vec <- c(vec, mean(df[i, ]))
}
i
df[i, ]
mean( df[i, ])
mean(df[i, ], na.rm = TRUE)
?mean
df[i, ]
mean(df[i, ])
mean(df[i, ], na.rm = T)
na.omit(df[i, ])
na.omit(df[i, ])
df[i, ]
!is.na(f[i, ])
df[i, ][!is.na(df[i, ])]
vec <- c()
for (i in 1:nrow(df)) {
vec <- c(vec, mean(df[i, ][!is.na(df[i, ])]))
}
names(vec) <- terms
vec
sort(vec)
View(df)
library(MuMIn)
library(viridis)
models <- readRDS("../results/dna.unknown.Sauria.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
terms <- c("age.dna", "prop.dna",
"age.line", "prop.line", "age.line:prop.line",
"age.ltr", "prop.ltr", "age.ltr:prop.ltr",
"age.sine", "prop.sine", "age.sine:prop.sine",
"age.unknown", "prop.unknown",
"age.others", "prop.others", "age.others:prop.others"
)
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- confint(avg, full = FALSE)[terms, ] # confidence intervals
imp <- sw(models)[1:length(terms)] # importance
imp <- imp[match(terms, names(imp))] # reorder importance
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- magma(res) # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c("DNA age", "DNA proportion",
"LINE age", "LINE proportion", "LINE interaction",
"LTR age", "LTR proportion", "LTR interaction",
"SINE age", "SINE proportion", "SINE interaction",
"Unidtf age", "Unidtf proportion",
"Other age", "Other proportion", "Other interaction"
)
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of ray-finned fish",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
# title
mtext("Parameter estimates for averaged model of reptiles",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
# title
mtext("Parameter estimates for averaged model of reptiles",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.4)
par(mar = c(5, 4, 4, 2) + 0.1)
library(MuMIn)
library(viridis)
models <- readRDS("../results/dna.unknown.Sauria.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
terms <- c("age.dna", "prop.dna",
"age.line", "prop.line", "age.line:prop.line",
"age.ltr", "prop.ltr", "age.ltr:prop.ltr",
"age.sine", "prop.sine", "age.sine:prop.sine",
"age.unknown", "prop.unknown",
"age.others", "prop.others", "age.others:prop.others"
)
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- confint(avg, full = FALSE)[terms, ] # confidence intervals
imp <- sw(models)[1:length(terms)] # importance
imp <- imp[match(terms, names(imp))] # reorder importance
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- magma(res) # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c("DNA age", "DNA proportion",
"LINE age", "LINE proportion", "LINE interaction",
"LTR age", "LTR proportion", "LTR interaction",
"SINE age", "SINE proportion", "SINE interaction",
"Unidtf age", "Unidtf proportion",
"Other age", "Other proportion", "Other interaction"
)
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of reptiles",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.4)
par(mar = c(5, 4, 4, 2) + 0.1)
library(MuMIn)
library(viridis)
models <- readRDS("../results/dna.unknown.Sauria.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
terms <- c("age.dna", "prop.dna",
"age.line", "prop.line", "age.line:prop.line",
"age.ltr", "prop.ltr", "age.ltr:prop.ltr",
"age.sine", "prop.sine", "age.sine:prop.sine",
"age.unknown", "prop.unknown",
"age.others", "prop.others", "age.others:prop.others"
)
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- confint(avg, full = FALSE)[terms, ] # confidence intervals
imp <- sw(models)[1:length(terms)] # importance
imp <- imp[match(terms, names(imp))] # reorder importance
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- magma(res) # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c("DNA age", "DNA proportion",
"LINE age", "LINE proportion", "LINE interaction",
"LTR age", "LTR proportion", "LTR interaction",
"SINE age", "SINE proportion", "SINE interaction",
"Unidtf age", "Unidtf proportion",
"Other age", "Other proportion", "Other interaction"
)
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = c(-1, 1),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of reptiles",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.4)
par(mar = c(5, 4, 4, 2) + 0.1)
library(MuMIn)
library(viridis)
models <- readRDS("../results/dna.unknown.Sauria.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
terms <- c("age.dna", "prop.dna",
"age.line", "prop.line", "age.line:prop.line",
"age.ltr", "prop.ltr", "age.ltr:prop.ltr",
"age.sine", "prop.sine", "age.sine:prop.sine",
"age.unknown", "prop.unknown",
"age.others", "prop.others", "age.others:prop.others"
)
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- confint(avg, full = FALSE)[terms, ] # confidence intervals
imp <- sw(models)[1:length(terms)] # importance
imp <- imp[match(terms, names(imp))] # reorder importance
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- magma(res) # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c("DNA age", "DNA proportion",
"LINE age", "LINE proportion", "LINE interaction",
"LTR age", "LTR proportion", "LTR interaction",
"SINE age", "SINE proportion", "SINE interaction",
"Unidtf age", "Unidtf proportion",
"Other age", "Other proportion", "Other interaction"
)
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of reptiles",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.4)
par(mar = c(5, 4, 4, 2) + 0.1)
View(df)
library(MuMIn)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
lambda.p <- phylosig(pruned.tree, res, method = "lambda", test = TRUE, niter = 10)$P
return(lambda.p)
}
i <- "Sauria"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
help(dredge)
global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
dredge(pgls(reformulate(all.terms, response = "rsq"), data = cd), m.min = 16)
dredge(pgls(reformulate(all.terms, response = "rsq"), data = cd), m.max = 16)
all.terms
all.terms[1:3]
l <- dredge(pgls(reformulate(all.terms[1:4], response = "rsq"), data = cd), m.max = 16)
l <- dredge(pgls(reformulate(all.terms[1:4], response = "rsq"), data = cd), m.lim = c(1, 3))
View(l)
l <- dredge(pgls(reformulate(all.terms[1:4], response = "rsq"), data = cd), m.lim = c(1, 4))
l <- dredge(pgls(reformulate(all.terms, response = "rsq"), data = cd), m.lim = c(1, 4))
