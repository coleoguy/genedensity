num_effects <- length(attr(terms(fml_test), "term.labels"))
if (num_effects >= max_vars) next
if (!model.marginal(m)) next
fml <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
# fit <- try(pgls(fml, data = cd))
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
View(models)
nrow(dat)
View(dat)
library(MuMIn)
library(phytools)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Sauropsida"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
#n <- nrow(cd$data)
n <- nrow(dat)
max_vars <- 16
get_variables <- function(terms) {
# Remove backticks and spaces, split interaction terms, and collect unique base variables
clean_terms <- gsub("`", "", terms)
vars <- unique(unlist(strsplit(clean_terms, ":")))
return(vars)
}
model_list <- list()
model_index <- 1
for (k in 0:length(predictors)) {
if (k == 0) {
fml <- as.formula(paste(response, "~ 1"))
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
next
}
combos <- combn(predictors, k, simplify = FALSE)
for (m in combos) {
fml_test <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
num_effects <- length(attr(terms(fml_test), "term.labels"))
if (num_effects >= max_vars) next
if (!model.marginal(m)) next
fml <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
# fit <- try(pgls(fml, data = cd))
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
View(models)
nrow(dat)
library(MuMIn)
library(phytools)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Sauropsida"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
#n <- nrow(cd$data)
n <- nrow(dat)
max_vars <- 17
get_variables <- function(terms) {
# Remove backticks and spaces, split interaction terms, and collect unique base variables
clean_terms <- gsub("`", "", terms)
vars <- unique(unlist(strsplit(clean_terms, ":")))
return(vars)
}
model_list <- list()
model_index <- 1
for (k in 0:length(predictors)) {
if (k == 0) {
fml <- as.formula(paste(response, "~ 1"))
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
next
}
combos <- combn(predictors, k, simplify = FALSE)
for (m in combos) {
fml_test <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
num_effects <- length(attr(terms(fml_test), "term.labels"))
if (num_effects >= max_vars) next
if (!model.marginal(m)) next
fml <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
# fit <- try(pgls(fml, data = cd))
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
View(model_list)
View(models)
library(MuMIn)
library(phytools)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Sauropsida"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
#n <- nrow(cd$data)
n <- nrow(dat)
max_vars <- 18
get_variables <- function(terms) {
# Remove backticks and spaces, split interaction terms, and collect unique base variables
clean_terms <- gsub("`", "", terms)
vars <- unique(unlist(strsplit(clean_terms, ":")))
return(vars)
}
model_list <- list()
model_index <- 1
for (k in 0:length(predictors)) {
if (k == 0) {
fml <- as.formula(paste(response, "~ 1"))
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
next
}
combos <- combn(predictors, k, simplify = FALSE)
for (m in combos) {
fml_test <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
num_effects <- length(attr(terms(fml_test), "term.labels"))
if (num_effects >= max_vars) next
if (!model.marginal(m)) next
fml <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
# fit <- try(pgls(fml, data = cd))
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
View(model_list)
View(models)
all.terms
library(MuMIn)
library(phytools)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Sauropsida"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
#n <- nrow(cd$data)
n <- nrow(dat)
n
n-3
library(MuMIn)
library(phytools)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Sauropsida"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
#n <- nrow(cd$data)
n <- nrow(dat)
max_vars <- n-3 # leave 2 degrees of freedom
get_variables <- function(terms) {
# Remove backticks and spaces, split interaction terms, and collect unique base variables
clean_terms <- gsub("`", "", terms)
vars <- unique(unlist(strsplit(clean_terms, ":")))
return(vars)
}
model_list <- list()
model_index <- 1
for (k in 0:length(predictors)) {
if (k == 0) {
fml <- as.formula(paste(response, "~ 1"))
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
next
}
combos <- combn(predictors, k, simplify = FALSE)
for (m in combos) {
fml_test <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
num_effects <- length(attr(terms(fml_test), "term.labels"))
if (num_effects >= max_vars) next
if (!model.marginal(m)) next
fml <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
# fit <- try(pgls(fml, data = cd))
fit <- glm(fml, data = dat)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
new <- c()
for (n in 1:nrow(models)) {
l <- get.models(models, subset = n)[[1]]
new[n] <- lambda.test(l)
}
models$lambda.p <- new
View(models)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
i <- 4
clade <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2) # ensure degree of freedom is greater than zero
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
#################### FOR REPTILES ####################
if (clade == "Sauropsida") {                         #
loocv.mse(models, c(1:10))                         #
sample.mse(models, c(1:10))                        #
# top models do not fit well                       #
# we will remove these models:                     #
to.remove <- c(1:6)                                #
models <- model.rm(models, to.remove)              #
}                                                    #
######################################################
models <- models[cumsum(models$weight) <= 0.95, ]
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
i <- 4
clade <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2) # ensure degree of freedom is greater than zero
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
#################### FOR REPTILES ####################
if (clade == "Sauropsida") {                         #
loocv.mse(models, c(1:10))                         #
sample.mse(models, c(1:10))                        #
# top models do not fit well                       #
# we will remove these models:                     #
to.remove <- c(1:6)                                #
models <- model.rm(models, to.remove)              #
}                                                    #
######################################################
View(models)
View(models)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
# loop for each clade
i <- 2
clade <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2) # ensure degree of freedom is greater than zero
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
#################### FOR REPTILES ####################
if (clade == "Sauropsida") {                         #
loocv.mse(models, c(1:10))                         #
sample.mse(models, c(1:10))                        #
# top models do not fit well                       #
# we will remove these models:                     #
to.remove <- c(1:6)                                #
models <- model.rm(models, to.remove)              #
}                                                    #
######################################################
models <- models[cumsum(models$weight) <= 0.95, ]
