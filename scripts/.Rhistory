par(mar = c(5, 4, 4, 2) + 0.1)
library(viridis)
combined.df <- read.csv("../results/model-averaging.csv")
# y positions
y <- c()
line <- c()
for (i in 1:length(combined.df$clade)) {
if (is.null(y)) {
y <- c(1)
} else if (combined.df$clade[i] == prev) {
y <- c(y, tail(y, 1) + 1)
} else {
y <- c(y, tail(y, 1) + 2)
line <- c(line, tail(y, 1) - 1)
}
prev <- combined.df$clade[i]
}
y <- max(y)-y
imp <- combined.df$importance
# color mapping
res <- 10000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# y labels
labels <- c()
for (i in combined.df$model) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unknown"
}
if (grepl(":", i)) {
type <- "age x prop."
} else if (sub("\\..*", "", i) == "prop") {
type <- "proportion"
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(mar = c(7, 7, 4, 7) + 0.1)
# main plot
x.range <- range(as.matrix(combined.df[c("lower", "upper")])) + c(-0.5, 0.5)
plot(x = combined.df$estimate, y = y, type = "n", xlim = x.range,
xlab = "β coefficient", ylab = NA, axes = FALSE,
ylim = range(y) + c(-0.7, 0.7), useRaster = T, mgp = c(2.2, 0, 0)) # plot
abline(v = 0, lty = 1, col = "black") # line at y = 0
for (l in -100:4) {
abline(v = l, lty = 2, col = "grey") # line at y = 0
}
segments(combined.df$lower, y, combined.df$upper, y, lwd = 1.4) # confidence bars
segments(combined.df$upper, y-0.2, combined.df$upper, y+0.2, lwd = 1.4)
segments(combined.df$lower, y-0.2, combined.df$lower, y+0.2, lwd = 1.4)
points(combined.df$estimate, y, pch = 16, cex = 2, col = cols) # colored points
points(combined.df$estimate, y, pch = 16, cex = 0.324, col = "white") # center dots
axis(1, at = pretty(x.range), mgp = c(1, 0.8, 0)  ) # x axis
axis(1, at = seq(-10, 10, by = 0.5), labels = FALSE, tcl = -0.2)
axis(1, at = seq(-10, 10, by = 1), labels = FALSE, tcl = -0.5)
axis(2, at = y, labels = labels, las = 2, cex.axis = 0.9) # y axis
box()
# color bar
usr <- par("usr")
bar <- array(t(col2rgb(palette)/255), c(1, length(palette), 3))
fx1 <- 0.46; fx2 <- 0.86  # x
fy1 <- 0.14; fy2 <- 0.19 # y
xleft <- usr[1] + fx1 * diff(usr[1:2])
xright <- usr[1] + fx2 * diff(usr[1:2])
ybottom <- usr[3] + fy1 * diff(usr[3:4])
ytop <- usr[3] + fy2 * diff(usr[3:4])
rasterImage(array(t(col2rgb("white") / 255), dim = c(1, 1, 3)),
xleft - 0.4, ybottom - 1, xright + 0.4, ytop + 0.8, interpolate = FALSE)
rasterImage(bar, xleft, ybottom, xright, ytop, interpolate = FALSE)
axis(
side = 1,
at = seq(xleft, xright, length.out = 5),
labels = round(seq(min(imp), max(imp), length.out = 5), 2),
pos = ybottom - 0.01 * diff(usr[3:4]),
tck = -0.01,
cex.axis = 0.75,
mgp = c(1, 0.05, 0)
)
text(mean(c(xleft, xright)),
mean(c(ybottom, ytop)) + 0.65,
adj = c(0.5, 0.5), cex = 0.85,
labels = "Variable importance")
rect(xleft - 0.4, ybottom - 1, xright + 0.4, ytop + 0.8,
border = "black", lwd = 1)
# lines separating clades
for (j in line) {
j <- j - 1
rgb_vals <- col2rgb("white") / 255
bar <- array(t(rgb_vals), dim = c(1, 1, 3))
fx1 <- 0.02; fx2 <- 0.98  # x
xleft <- usr[1] + fx1 * diff(usr[1:2])
xright <- usr[1] + fx2 * diff(usr[1:2])
ybottom <- j - 0.13
ytop <- j + 0.13
rasterImage(bar, xleft, ybottom, xright, ytop, interpolate = FALSE)
segments(xleft, j, xright, j, lwd = 1.4, color = "")
}
# all species
par(xpd = TRUE)
text(4.8, 7.85,
adj = c(0, 0.5), cex = 0.9,
labels = "All species")
text(4.8, 7.15,
adj = c(0, 0.5), cex = 0.9,
labels = "(5064 models)")
# mammals
text(4.8, 5.35,
adj = c(0, 0.5), cex = 0.9,
labels = "Mammals")
text(4.8, 4.65,
adj = c(0, 0.5), cex = 0.9,
labels = "(1852)")
# fish
text(4.8, 3.35,
adj = c(0, 0.5), cex = 0.9,
labels = "Ray-finned")
text(4.8, 2.65,
adj = c(0, 0.5), cex = 0.9,
labels = "fish (1858)")
# reptiles
text(4.8, 0.85,
adj = c(0, 0.5), cex = 0.9,
labels = "Reptiles")
text(4.8, 0.15,
adj = c(0, 0.5), cex = 0.9,
labels = "(1045)")
par(xpd = FALSE)
par(mar = c(5, 4, 4, 2) + 0.1)
library(viridis)
combined.df <- read.csv("../results/model-averaging.csv")
# y positions
y <- c()
line <- c()
for (i in 1:length(combined.df$clade)) {
if (is.null(y)) {
y <- c(1)
} else if (combined.df$clade[i] == prev) {
y <- c(y, tail(y, 1) + 1)
} else {
y <- c(y, tail(y, 1) + 2)
line <- c(line, tail(y, 1) - 1)
}
prev <- combined.df$clade[i]
}
y <- max(y)-y
imp <- combined.df$importance
# color mapping
res <- 10000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# y labels
labels <- c()
for (i in combined.df$model) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unknown"
}
if (grepl(":", i)) {
type <- "age x prop."
} else if (sub("\\..*", "", i) == "prop") {
type <- "proportion"
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(mar = c(7, 7, 4, 7) + 0.1)
# main plot
x.range <- range(as.matrix(combined.df[c("lower", "upper")])) + c(-0.5, 0.5)
plot(x = combined.df$estimate, y = y, type = "n", xlim = x.range,
xlab = "β coefficient", ylab = NA, axes = FALSE,
ylim = range(y) + c(-0.7, 0.7), useRaster = T, mgp = c(2.2, 0, 0)) # plot
abline(v = 0, lty = 1, col = "black") # line at y = 0
for (l in -100:4) {
abline(v = l, lty = 2, col = "grey") # line at y = 0
}
segments(combined.df$lower, y, combined.df$upper, y, lwd = 1.4) # confidence bars
segments(combined.df$upper, y-0.2, combined.df$upper, y+0.2, lwd = 1.4)
segments(combined.df$lower, y-0.2, combined.df$lower, y+0.2, lwd = 1.4)
points(combined.df$estimate, y, pch = 16, cex = 2, col = cols) # colored points
points(combined.df$estimate, y, pch = 16, cex = 0.324, col = "white") # center dots
axis(1, at = pretty(x.range), mgp = c(1, 0.8, 0)  ) # x axis
axis(1, at = seq(-10, 10, by = 0.5), labels = FALSE, tcl = -0.2)
axis(1, at = seq(-10, 10, by = 1), labels = FALSE, tcl = -0.5)
axis(2, at = y, labels = labels, las = 2, cex.axis = 0.9) # y axis
box()
# color bar
usr <- par("usr")
bar <- array(t(col2rgb(palette)/255), c(1, length(palette), 3))
fx1 <- 0.46; fx2 <- 0.86  # x
fy1 <- 0.14; fy2 <- 0.19 # y
xleft <- usr[1] + fx1 * diff(usr[1:2])
xright <- usr[1] + fx2 * diff(usr[1:2])
ybottom <- usr[3] + fy1 * diff(usr[3:4])
ytop <- usr[3] + fy2 * diff(usr[3:4])
rasterImage(array(t(col2rgb("white") / 255), dim = c(1, 1, 3)),
xleft - 0.4, ybottom - 1, xright + 0.4, ytop + 0.8, interpolate = FALSE)
rasterImage(bar, xleft, ybottom, xright, ytop, interpolate = FALSE)
axis(
side = 1,
at = seq(xleft, xright, length.out = 5),
labels = round(seq(min(imp), max(imp), length.out = 5), 2),
pos = ybottom - 0.01 * diff(usr[3:4]),
tck = -0.01,
cex.axis = 0.75,
mgp = c(1, 0.05, 0)
)
text(mean(c(xleft, xright)),
mean(c(ybottom, ytop)) + 0.65,
adj = c(0.5, 0.5), cex = 0.85,
labels = "Variable importance")
rect(xleft - 0.4, ybottom - 1, xright + 0.4, ytop + 0.8,
border = "black", lwd = 1)
# lines separating clades
for (j in line) {
j <- j - 1
rgb_vals <- col2rgb("white") / 255
bar <- array(t(rgb_vals), dim = c(1, 1, 3))
fx1 <- 0.02; fx2 <- 0.98  # x
xleft <- usr[1] + fx1 * diff(usr[1:2])
xright <- usr[1] + fx2 * diff(usr[1:2])
ybottom <- j - 0.13
ytop <- j + 0.13
rasterImage(bar, xleft, ybottom, xright, ytop, interpolate = FALSE)
segments(xleft, j, xright, j, lwd = 1.4, color = "")
}
# all species
par(xpd = TRUE)
text(4.8, 7.85,
adj = c(0, 0.5), cex = 0.9,
labels = "All species")
text(4.8, 7.15,
adj = c(0, 0.5), cex = 0.9,
labels = "(5064 models)")
# mammals
text(4.8, 5.35,
adj = c(0, 0.5), cex = 0.9,
labels = "Mammals")
text(4.8, 4.65,
adj = c(0, 0.5), cex = 0.9,
labels = "(1852 models)")
# fish
text(4.8, 3.35,
adj = c(0, 0.5), cex = 0.9,
labels = "Ray-finned fish")
text(4.8, 2.65,
adj = c(0, 0.5), cex = 0.9,
labels = "(1858 models)")
# reptiles
text(4.8, 0.85,
adj = c(0, 0.5), cex = 0.9,
labels = "Reptiles")
text(4.8, 0.15,
adj = c(0, 0.5), cex = 0.9,
labels = "(1045 models)")
par(xpd = FALSE)
par(mar = c(5, 4, 4, 2) + 0.1)
cols
source("../scripts/functions.R")
verbose <- T
library(data.table)
source("../scripts/functions.R")
verbose <- T
chrom <- read.csv("../data/chrom-and-gsz.csv")
sp <- c("Ornithorhynchus_anatinus", "Theropithecus_gelada")
# Zhaobo Hu
# zhaobohu2002@gmail.com
# Description: reads files from a directory containing fasta and gtf/gff3 files
# of all species to be analyzed. The script will alphabetically sort all species
# in the directly and loop through each of them. Haploid chromosome numbers for
# each species are recored in gene_density/data/chromnums.csv. If chromosome
# number is recorded for a species, the script will read the fasta of the
# species and extract the assembly size as well as the contig sizes of the 2N
# longest contigs, where N is the haploid chromosome number. Next, gene counts
# for each of the 2N longest contigs are gathered from the gtf/gff3 file. Gene
# density for each contig is calculated by dividing the gene count of each
# contig by the size of each contig. The results for each species is saved in
# its separate csv file
# load library
library(data.table)
source("functions.R")
setwd("~/GitHub/genedensity/scripts")
# Zhaobo Hu
# zhaobohu2002@gmail.com
# Description: reads files from a directory containing fasta and gtf/gff3 files
# of all species to be analyzed. The script will alphabetically sort all species
# in the directly and loop through each of them. Haploid chromosome numbers for
# each species are recored in gene_density/data/chromnums.csv. If chromosome
# number is recorded for a species, the script will read the fasta of the
# species and extract the assembly size as well as the contig sizes of the 2N
# longest contigs, where N is the haploid chromosome number. Next, gene counts
# for each of the 2N longest contigs are gathered from the gtf/gff3 file. Gene
# density for each contig is calculated by dividing the gene count of each
# contig by the size of each contig. The results for each species is saved in
# its separate csv file
# load library
library(data.table)
source("functions.R")
# verbose
verbose <- T
# list genome files
genome.files <- list.files(paste0("../data/genomes"))
genome.files <- genome.files[genome.files != "readme.txt"]
# pull species names from list of genome files
all.species <- unique(gsub("\\..*$", "", genome.files))
max.contig <- 60
# make a results object
results <- as.data.frame(matrix(NA, 0, 3))
colnames(results) <- c("species","rsq","assem.sz")
# begin loop
c(1:length(all.species))
all.species
i <_ 1
i <- 1
print(paste("Working on", all.species[i]))
# assume first file is fasta
fasta.path <- paste0("../data/genomes/",all.species[i], ".fa")
# assume second file is gff3/gtf/gbff
annot.path <- paste0("../data/genomes/",all.species[i], ".gtf")
# read fasta
fasta.data <- dataFromFasta(fasta.path = fasta.path,
max.contig = max.contig,
verbose = TRUE)
fasta.data <- fasta.data[fasta.data$size.Mb >= 10, ]
# skip to next species if we have less than three retained contigs
if(nrow(fasta.data) < 3){
if (verbose == TRUE) {
print(noquote("   Aborted (less than 3 retained contigs)"))
}
next
}
# skip to next species if sum of captured size < 0.8 of assembly size
if(unique(sum(fasta.data$size) < 0.8 * fasta.data$asmblysize.Mb)) {
if (verbose == TRUE) {
print(noquote("   Aborted (low assembly contiguity)"))
}
next
}
# get names and sizes of retained contigs
name <- fasta.data$name
size.Mb <- fasta.data$size.Mb
asmblysize.Mb <- fasta.data$asmblysize.Mb[1]
rm(fasta.data)
gc()
# read gtf
genecount <- dataFromGtf(annot.path, name, verbose)
# skip to next species if gene count is unavailable for at least 3 contigs
if (sum(!is.na(genecount)) < 3) {
if (verbose == TRUE) {
print(noquote("   Aborted (insufficient contigs with data)"))
}
next
}
# assemble datatable
dat <- data.table(all.species[i],
size.Mb,
genecount)
dat <- na.omit(dat)
# calculate and add gene density
dat$genedens <- dat$genecount/dat$size.Mb
rsq <- summary(lm(dat$genecount~dat$size.Mb))$r.squared
j <- nrow(results) + 1
results[j, 1] <- all.species[i]
results[j, 2:3] <- c(rsq, round(asmblysize.Mb))
View(results)
View(dat)
plot(dat$genedens)
plot(dat$size.Mb, dat$genedens)
plot(dat$size.Mb, dat$genecount)
plot(dat$size.Mb, dat$genedens)
plot(dat$size.Mb, dat$genedens)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density")
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = -0.5)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = 90)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = 9)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = -0.1)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = -0.4)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = -0.5)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, axes = FALSE)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, axes = FALSE)
axis(1, at = pretty(dat$size.Mb))
axis(1, at = pretty(dat$size.Mb), mgp = c(1, 0.8, 0))
axis(1, at = pretty(dat$size.Mb), mgp = c(1, 0.8, 1))
axis(1, at = pretty(dat$size.Mb), mgp = c(0, 0.8, 0))
axis(1, at = pretty(dat$size.Mb), mgp = c(0, 0.8, 0))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, axes = FALSE)
axis(1, at = pretty(dat$size.Mb), mgp = c(0, 0.8, 0))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, axes = FALSE)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(15, 55))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(15, 53))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(15, 50))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(17, 50))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(17, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(16, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(16, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(15, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(13, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(17, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(19, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(18, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 210), ylim = c(18, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 208), ylim = c(18, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 205), ylim = c(18, 49))
plot(dat$size.Mb, dat$genecount, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 205), ylim = c(18, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 205), ylim = c(18, 49))
plot(dat$size.Mb, dat$genecount, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16
)
plot(dat$size.Mb, dat$genecount, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genecount, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genecount / 1000, xlab = "Contig size (Mb)", ylab = "Gene count (thousands)", pch = 16)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
library(pracma)
f <- function(x) exp(x)
numderiv(f, 0)
numderiv(f, 0)$df
numderiv(f, c(0:3))$df
numderiv(f, 1)$df
numderiv(f, 2)$df
numderiv(f, 3)$df
plot(dat$size.Mb, dat$genecount / 1000, xlab = "Contig size (Mb)", ylab = "Gene count (thousands)", pch = 16)
plot(dat$size.Mb, dat$genecount / 1000 / dat$size.Mb, xlab = "Contig size (Mb)", ylab = "Gene count (thousands)", pch = 16)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
# loop for each clade
for (i in c("All", "Mammalia", "Actinopterygii", "Sauropsida")) {
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
# for (j in variables) {
#   dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
# }
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
num <- ifelse(nrow(dat) > 21, 16, 15) # get rid of error in reptiles
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, num)
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
num <- nrow(models)
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] # match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
num,
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "num.models", "estimate", "importance", "lower", "upper")
if (nrow(combined.df) == 0) {
combined.df <- df
} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance > 0.5, ]
View(combined.df)
