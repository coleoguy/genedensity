for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeat.types <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeat.types, ":prop.", repeat.types)
all.terms <- c(
variables,
interactions
)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 2 degrees of freedom
max.vars
# fit models
model.list <- list()
model.idx <- 1
i <- 8
k <- 8
k == 0
combos <- combn(all.terms, k, simplify = FALSE)
combos
m <- 1000
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
fml
m <- combos[100]
fml
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
fml
predictor.num <- length(attr(terms(fml), "term.labels"))
predictor.num
fml
predictor.num <- length(attr(terms(fml), "term.labels"))
predictor.num
fml
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
fml
m
m[[1]]
m <- m[[1]]
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
fml
predictor.num <- length(attr(terms(fml), "term.labels"))
predictor.num
# Zhaobo Hu
# zhaobohu2002@gmail.com
# Finds significant models and predictors of R2 using IT-based model averaging.
# Safe to run on low observation count. Can choose between glm() and pgls() models
# and optionally generate a csv of all significant models
library(MuMIn)
library(phytools)
library(caper)
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
# loop for each clade
# Zhaobo Hu
# zhaobohu2002@gmail.com
# A permutation-based approach to assess model adequacy
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
main <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(main)[grep("^(prop|age)\\.", colnames(main))]
main <- na.omit(main[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
constant.cols <- c("species", "clade", "rsq")
h <- 1
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
block <- main[, perm.colname]
# block
block <- block[sample(nrow(block)), ]
main[, perm.colname] <- block
i <- 1
dat <- main
clade <- clades[i]
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeats <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeats, ":prop.", repeats)
all.terms <- c(
variables,
interactions
)
# n <- nrow(cd$data)
n <- nrow(dat)
rep(c("importance", "upper", "lower"), each = length(all.terms) / 3)
rep(c("importance", "upper", "lower"), each = length(all.terms))
rep(rep(c("importance", "upper", "lower"), each = length(all.terms) / 3), 4)
rep(c("importance", "upper", "lower"), each = length(all.terms))
rep(c("importance", "upper", "lower"), each = length(all.terms))
rep(rep(c("importance", "upper", "lower"), each = length(all.terms)), 4)
all.terms
# Zhaobo Hu
# zhaobohu2002@gmail.com
# Finds significant models and predictors of R2 using IT-based model averaging.
# Safe to run on low observation count. Can choose between glm() and pgls() models
# and optionally generate a csv of all significant models
library(MuMIn)
library(phytools)
library(caper)
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
# loop for each clade
i <- 1
# subset results
clade <- clades[i]
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeat.types <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeat.types, ":prop.", repeat.types)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 1 residual degree of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 0:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
i <- 2
# subset results
clade <- clades[i]
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeat.types <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeat.types, ":prop.", repeat.types)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 1 residual degree of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 0:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
i <- 3
# subset results
clade <- clades[i]
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeat.types <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeat.types, ":prop.", repeat.types)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 1 residual degree of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 0:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
i
i <- 4
# subset results
clade <- clades[i]
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeat.types <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeat.types, ":prop.", repeat.types)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 1 residual degree of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 0:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
i <- 3
# subset results
clade <- clades[i]
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeat.types <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeat.types, ":prop.", repeat.types)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 1 residual degree of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 0:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
# load library
library(data.table)
source("functions.R")
# verbose
verbose <- T
# list genome files
genome.files <- list.files(paste0("../data/genomes"))
genome.files <- genome.files[genome.files != "readme.txt"]
# pull species names from list of genome files
all.species <- unique(gsub("\\..*$", "", genome.files))
max.contig <- 60
# make a results object
results <- as.data.frame(matrix(NA, 0, 3))
colnames(results) <- c("species","rsq","assem.sz")
i <- 1
print(paste("Working on", all.species[i]))
# assume first file is fasta
fasta.path <- paste0("../data/genomes/",all.species[i], ".fa")
# assume second file is gff3/gtf/gbff
annot.path <- paste0("../data/genomes/",all.species[i], ".gtf")
# read fasta
fasta.data <- dataFromFasta(fasta.path = fasta.path,
max.contig = max.contig,
verbose = TRUE)
fasta.data <- fasta.data[fasta.data$size.Mb >= 10, ]
# skip to next species if we have less than three retained contigs
if(nrow(fasta.data) < 3){
if (verbose == TRUE) {
print(noquote("   Aborted (less than 3 retained contigs)"))
}
next
}
# skip to next species if sum of captured size < 0.8 of assembly size
if(unique(sum(fasta.data$size) < 0.8 * fasta.data$asmblysize.Mb)) {
if (verbose == TRUE) {
print(noquote("   Aborted (low assembly contiguity)"))
}
next
}
# get names and sizes of retained contigs
name <- fasta.data$name
size.Mb <- fasta.data$size.Mb
asmblysize.Mb <- fasta.data$asmblysize.Mb[1]
View(fasta.data)
# read gtf
genecount <- dataFromGtf(annot.path, name, verbose)
# skip to next species if gene count is unavailable for at least 3 contigs
if (sum(!is.na(genecount)) < 3) {
if (verbose == TRUE) {
print(noquote("   Aborted (insufficient contigs with data)"))
}
next
}
# assemble datatable
dat <- data.table(all.species[i],
size.Mb,
genecount)
dat <- na.omit(dat)
View(fasta.data)
View(dat)
# calculate and add gene density
dat$genedens <- dat$genecount/dat$size.Mb
View(dat)
View(fasta.data)
View(dataFromGtf)
annot.path
# read gtf
gtf <- read.table(annot.path, header = FALSE, sep = "\t")
# filter for genes only
gtf <- gtf[which(gtf[, 3] == "gene"), ]
# get the number of genes in each contig
genecount <- sapply(
name, function(name) table(gtf[[1]])[name])
name
View(dat)
size.Mb
# get names and sizes of retained contigs
name <- fasta.data$name
fasta.data$name
size.Mb
View(fasta.data)
View(dat)
name
View(fasta.data)
# get names and sizes of retained contigs
name <- fasta.data$name
size.Mb <- fasta.data$size.Mb
asmblysize.Mb <- fasta.data$asmblysize.Mb[1]
gc()
# read gtf
genecount <- dataFromGtf(annot.path, name, verbose)
# skip to next species if gene count is unavailable for at least 3 contigs
if (sum(!is.na(genecount)) < 3) {
if (verbose == TRUE) {
print(noquote("   Aborted (insufficient contigs with data)"))
}
next
}
# assemble datatable
dat <- data.table(all.species[i],
size.Mb,
genecount)
genecount
View(dat)
View(fasta.data)
# calculate and add gene density
dat$genedens <- dat$genecount/dat$size.Mb
name
size.Mb
genecount/size.Mb
dat$genecount/dat$size.Mb
60.51082 / 17.48797
