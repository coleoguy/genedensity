interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2) # ensure degree of freedom is greater than zero
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
#################### FOR REPTILES ####################
if (clade == "Sauropsida") {                         #
loocv.mse(models, c(1:10))                         #
sample.mse(models, c(1:10))                        #
# top models do not fit well                       #
# we will remove these models:                     #
to.remove <- c(1:6)                                #
models <- model.rm(models, to.remove)              #
}                                                    #
######################################################
models <- models[cumsum(models$weight) <= 0.95, ]
num <- nrow(models)
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] # match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(clade,
names(imp),
num,
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "num.models", "estimate", "importance", "lower", "upper")
if (nrow(combined.df) == 0) {
combined.df <- df
} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance > 0.5, ]
write.csv(combined.df, "../results/model-averaging.csv", row.names = F)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
# loop for each clade
i <- 3
clade <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2) # ensure degree of freedom is greater than zero
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
loocv.mse(models, c(1:10))                         #
sample.mse(models, c(1:10))                        #
setwd("~/GitHub/genedensity/scripts")
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
main <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(main)[grep("^(prop|age)\\.", colnames(main))]
main <- na.omit(main[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
constant.cols <- c("species", "clade", "rsq")
for (h in 1:150) { # for each run
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
block <- main[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
main[, perm.colname] <- block
for (i in 1:4) { # for each clade
dat <- main
clade <- clades[i]
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2) # ensure degree of freedom is greater than zero
)
models <- models[order(models$AICc), ]
#################### FOR REPTILES ####################
if (clade == "Sauropsida") {                         #
loocv.mse(models, c(1:10))                         #
sample.mse(models, c(1:10))                        #
# top models do not fit well                       #
# we will remove these models:                     #
to.remove <- c(1:6)                                #
models <- model.rm(models, to.remove)              #
}                                                    #
######################################################
models <- models[cumsum(models$weight) <= 0.95, ]
# get CIs and int in a vector
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0("run", h)]] <- run.results
# write.csv(df, "../results/permute.csv", row.names = F)
gc()
}
write.csv(df, "../results/permute5.csv", row.names = F)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
main <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(main)[grep("^(prop|age)\\.", colnames(main))]
main <- na.omit(main[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
constant.cols <- c("species", "clade", "rsq")
for (h in 1:150) { # for each run
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
block <- main[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
main[, perm.colname] <- block
for (i in 1:4) { # for each clade
dat <- main
clade <- clades[i]
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2) # ensure degree of freedom is greater than zero
)
models <- models[order(models$AICc), ]
#################### FOR REPTILES ####################
if (clade == "Sauropsida") {                         #
loocv.mse(models, c(1:10))                         #
sample.mse(models, c(1:10))                        #
# top models do not fit well                       #
# we will remove these models:                     #
to.remove <- c(1:6)                                #
models <- model.rm(models, to.remove)              #
}                                                    #
######################################################
models <- models[cumsum(models$weight) <= 0.95, ]
# get CIs and int in a vector
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0("run", h)]] <- run.results
# write.csv(df, "../results/permute.csv", row.names = F)
gc()
}
write.csv(df, "../results/permute15.csv", row.names = F)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
main <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(main)[grep("^(prop|age)\\.", colnames(main))]
main <- na.omit(main[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
constant.cols <- c("species", "clade", "rsq")
for (h in 1:1000) { # for each run
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
block <- main[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
main[, perm.colname] <- block
for (i in 1:4) { # for each clade
dat <- main
clade <- clades[i]
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2) # ensure degree of freedom is greater than zero
)
models <- models[order(models$AICc), ]
#################### FOR REPTILES ####################
if (clade == "Sauropsida") {                         #
loocv.mse(models, c(1:10))                         #
sample.mse(models, c(1:10))                        #
# top models do not fit well                       #
# we will remove these models:                     #
to.remove <- c(1:6)                                #
models <- model.rm(models, to.remove)              #
}                                                    #
######################################################
models <- models[cumsum(models$weight) <= 0.95, ]
# get CIs and int in a vector
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0("run", h)]] <- run.results
# write.csv(df, "../results/permute.csv", row.names = F)
gc()
}
write.csv(df, "../results/permute112.csv", row.names = F)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
main <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(main)[grep("^(prop|age)\\.", colnames(main))]
main <- na.omit(main[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
constant.cols <- c("species", "clade", "rsq")
h <- 1
print(h)
run.results <- c()
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
perm.colname
block <- main[, perm.colname]
block
View(main)
perm.colname
main[perm.colname]
l <- main[perm.colname]
View(l)
block <- main[, perm.colname]
block
View(block)
colnames(block)
nrow(block)
l <- sample(block)
View(l)
View(block)
View(l)
View(block)
View(block)
View(l)
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
block <- main[, perm.colname]
# block
nrow(block)
block <- block[sample(nrow(block)), ]
View(block)
block <- block[sample(nrow(block)), ]
View(block)
i <- 4
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
# loop for each clade
clade <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-3) # ensure degree of freedom is greater than zero
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
View(models)
# dredge
ifelse(clade == "Sauropsida", subtract.var <- 3, subtract.var <- 2)
clade
subtract.var
clade <- "Test"
# dredge
ifelse(clade == "Sauropsida", subtract.var <- 3, subtract.var <- 2)
subtract.var
