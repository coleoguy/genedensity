# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0("run", h)]] <- run.results
# write.csv(df, "../results/permute.csv", row.names = F)
gc()
}
View(df)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
main <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(main)[grep("^(prop|age)\\.", colnames(main))]
main <- na.omit(main[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
constant.cols <- c("species", "clade", "rsq")
h <- 1
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
block <- main[, perm.colname]
# block
block <- block[sample(nrow(block)), ]
main[, perm.colname] <- block
i <- 1
dat <- main
clade <- clades[i]
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeats <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeats, ":prop.", repeats)
all.terms <- c(
variables,
interactions
)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 2 degrees of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 1:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
rm(model.list)
gc()
# average and calculate CIs
num <- nrow(models)
imp <- sort(sw(models), decreasing = TRUE)
num
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
imp
avg
ci
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
main <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(main)[grep("^(prop|age)\\.", colnames(main))]
main <- na.omit(main[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
constant.cols <- c("species", "clade", "rsq")
h <- 1
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
block <- main[, perm.colname]
# block
block <- block[sample(nrow(block)), ]
main[, perm.colname] <- block
i <- 4
dat <- main
clade <- clades[i]
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeats <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeats, ":prop.", repeats)
all.terms <- c(
variables,
interactions
)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 2 degrees of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 1:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
rm(model.list)
gc()
# average and calculate CIs
num <- nrow(models)
num
imp <- sort(sw(models), decreasing = TRUE)
imp
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
lower
upper
rep(clades, each = length(imp) * 3)
length(imp)
rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4)
rep(rep(names(imp), 3), 4)
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
View(df)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
main <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(main)[grep("^(prop|age)\\.", colnames(main))]
main <- na.omit(main[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
constant.cols <- c("species", "clade", "rsq")
for (h in 1:3) { # for each run
print(h)
run.results <- c()
# permute
perm.colname <- setdiff(names(main), constant.cols)
block <- main[, perm.colname]
# block
block <- block[sample(nrow(block)), ]
main[, perm.colname] <- block
for (i in 1:4) { # for each clade
dat <- main
clade <- clades[i]
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeats <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeats, ":prop.", repeats)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 2 degrees of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 1:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
rm(model.list)
gc()
# average and calculate CIs
num <- nrow(models)
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0("run", h)]] <- run.results
# write.csv(df, "../results/permute.csv", row.names = F)
gc()
}
View(df)
library(MuMIn)
library(phytools)
library(caper)
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
# loop for each clade
i <- 4
# subset results
clade <- clades[i]
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeat.types <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeat.types, ":prop.", repeat.types)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 2 degrees of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 0:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
View(models)
View(models)
models <- models[cumsum(models$weight) <= 0.95, ]
# average and calculate CIs
num <- nrow(models)
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
avg
ci
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] # match ci
ci <- as.data.frame(ci)
ci
# subset significant models
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ] # subset ci
imp <- imp[idx] # subset importance
if (length(imp) == 0) {
next
}
imp
write.csv(data.frame(models), "new.csv", row.names = F)
l <- read.csv("old.csv")
View(l)
View(models)
l$X.Intercept.
all.equal(
round(l$X.Intercept., 2),
round(models$`(Intercept)`, 2)
)
all.equal(
round(l$age.dna, 2),
round(models$age.dna, 2)
)
all.equal(
round(l$age.unknown.prop.unknown, 2),
round(models$`age.unknown:prop.unknown`, 2)
)
# average and calculate CIs
num <- nrow(models)
num
imp <- sort(sw(models), decreasing = TRUE)
imp
library(MuMIn)
library(phytools)
library(caper)
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
# loop for each clade
i <- 4
# subset results
clade <- clades[i]
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# identify all predictors
repeat.types <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", repeat.types, ":prop.", repeat.types)
all.terms <- c(
variables,
interactions
)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# n <- nrow(cd$data)
n <- nrow(dat)
max.vars <- n-2 # leave 2 degrees of freedom
# fit models
model.list <- list()
model.idx <- 1
for (k in 0:length(all.terms)) {
if (k == 0) {
fml <- as.formula("rsq ~ 1")
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
next
}
combos <- combn(all.terms, k, simplify = FALSE)
for (m in combos) {
fml <- as.formula(paste("rsq ~", paste(m, collapse = " + ")))
predictor.num <- length(attr(terms(fml), "term.labels"))
if (predictor.num >= max.vars) next
if (!model.marginal(m)) next
# fit <- pgls(fml, data = cd)
fit <- glm(fml, data = dat)
model.name <- paste0("M", model.idx)
model.list[[model.name]] <- fit
model.idx <- model.idx + 1
}
}
# create model selection table
models <- model.sel(model.list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
rm(model.list)
gc()
write.csv(data.frame(models), "new.csv", row.names = F)
l <- read.csv("old.csv")
all.equal(l$X.Intercept., models$`(Intercept)`)
# average and calculate CIs
num <- nrow(models)
imp <- sort(sw(models), decreasing = TRUE)
imp
avg <- model.avg(models)
avg
ci <- confint(avg)
ci
ci <- ci[match(names(imp), row.names(ci)), ] # match ci
ci <- as.data.frame(ci)
ci
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(clade,
names(imp),
num,
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "num.models", "estimate", "importance", "lower", "upper")
df
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
