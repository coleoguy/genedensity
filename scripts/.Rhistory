} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance > 0.5, ]
View(combined.df)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
rsq <- read.csv("../results/rsq.filtered.csv")
repeats <- read.csv("../results/repeats.filtered.csv")
combined.df <- data.frame()
# loop for each clade
for (i in c("All", "Mammalia", "Actinopterygii", "Sauria")) {
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# prune tree
# tree <- read.tree("../data/formatted.tree.nwk")
# int <- intersect(dat$species, tree$tip.label)
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr
#extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
if (nrow(combined.df) == 0) {
combined.df <- df
} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance > 0.5, ]
View(combined.df)
plot(dat$age.ltr, dat$rsq)
i <- "Mammalia"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# prune tree
# tree <- read.tree("../data/formatted.tree.nwk")
# int <- intersect(dat$species, tree$tip.label)
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr
#extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
View(dat)
View(df)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
rsq <- read.csv("../results/rsq.filtered.csv")
repeats <- read.csv("../results/repeats.filtered.csv")
combined.df <- data.frame()
# loop for each clade
for (i in c("All", "Mammalia", "Actinopterygii", "Sauria")) {
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# prune tree
# tree <- read.tree("../data/formatted.tree.nwk")
# int <- intersect(dat$species, tree$tip.label)
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model
# subset = subset.expr
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
if (nrow(combined.df) == 0) {
combined.df <- df
} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance > 0.5, ]
View(combined.df)
write.csv(combined.df, "../results/model.averaging.csv", row.names = F)
View(combined.df)
i <- "Mammalia"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# prune tree
# tree <- read.tree("../data/formatted.tree.nwk")
# int <- intersect(dat$species, tree$tip.label)
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
plot(dat$age.sine, dat$rsq)
plot(dat$age.unknown, dat$rsq)
plot(dat$prop.sine, dat$rsq)
plot(dat$prop.sine * dat$age.sine, dat$rsq)
i <- "Actinopterygii"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# prune tree
# tree <- read.tree("../data/formatted.tree.nwk")
# int <- intersect(dat$species, tree$tip.label)
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
plot(dat$prop.dna, dat$rsq)
plot(dat$prop.others, dat$rsq)
i <- "Sauria"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# prune tree
# tree <- read.tree("../data/formatted.tree.nwk")
# int <- intersect(dat$species, tree$tip.label)
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
plot(dat$age.ltr, dat$rsq)
plot(dat$age.unknown, dat$rsq)
write.csv(combined.df, "../results/model.averaging.csv", row.names = F)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("fuctions.R")
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("fuctions.R")
2%%1
4%%2
4%%3
num <- 13195
vec <- c()
for (i in 1:length(num)) {
if (num %% i) {
vec <- c(vec, i)
}
}
vec
num <- 13195
vec <- c()
for (i in 1:num) {
if (num %% i) {
vec <- c(vec, i)
}
}
vec <- c()
for (i in 1:num) {
if (num %% i == 0) {
vec <- c(vec, i)
}
}
vec
j <- 35
5*7*13*29
num <- 600851475143
num <- 600851475143
num <- 600851475143
vec <- c()
for (i in 1:num) {
if (num %% i == 0) {
vec <- c(vec, i)
}
}
3:5
5:3
num <- 600851475143
vec <- c()
for (i in num:1) {
if (num %% i == 0) {
vec <- c(vec, i)
}
}
num <- 13195
num <- 600851475143
num <- 13195
vec <- c()
for (i in num:1) {
if (num %% i == 0) {
vec <- c(vec, i)
}
}
vec
j <- 29
num:1
j:1
j:1 %% j
j %% j:1
length(j %% j:1)
length(j %% j:1 == 0)
j %% j:1 == 0
which(j %% j:1 == 0)
length(which(j %% j:1 == 0))
vec2 <- c()
for (j in vec) {
if (length(which(j %% j:1 == 0)) == 2){
vec2 <- c(vec2, j)
}
}
vec2
