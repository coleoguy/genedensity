setwd("~/GitHub/genedensity/scripts")
# Zhaobo Hu
# zhaobohu2002@gmail.com
# Description: reads files from a directory containing fasta and gtf/gff3 files
# of all species to be analyzed. The script will alphabetically sort all species
# in the directly and loop through each of them. Haploid chromosome numbers for
# each species are recored in gene_density/data/chromnums.csv. If chromosome
# number is recorded for a species, the script will read the fasta of the
# species and extract the assembly size as well as the contig sizes of the 2N
# longest contigs, where N is the haploid chromosome number. Next, gene counts
# for each of the 2N longest contigs are gathered from the gtf/gff3 file. Gene
# density for each contig is calculated by dividing the gene count of each
# contig by the size of each contig. The results for each species is saved in
# its separate csv file
# load library
library(data.table)
source("functions.R")
# verbose
verbose <- T
# list genome files
genome.files <- list.files(paste0("../data/genomes"))
genome.files <- genome.files[genome.files != "readme.txt"]
# pull species names from list of genome files
all.species <- unique(gsub("\\..*$", "", genome.files))
max.contig <- 60
# make a results object
results <- as.data.frame(matrix(NA, 0, 3))
colnames(results) <- c("species","rsq","assem.sz")
# begin loop
c(1:length(all.species))
all.species
i <_ 1
i <- 1
print(paste("Working on", all.species[i]))
# assume first file is fasta
fasta.path <- paste0("../data/genomes/",all.species[i], ".fa")
# assume second file is gff3/gtf/gbff
annot.path <- paste0("../data/genomes/",all.species[i], ".gtf")
# read fasta
fasta.data <- dataFromFasta(fasta.path = fasta.path,
max.contig = max.contig,
verbose = TRUE)
fasta.data <- fasta.data[fasta.data$size.Mb >= 10, ]
# skip to next species if we have less than three retained contigs
if(nrow(fasta.data) < 3){
if (verbose == TRUE) {
print(noquote("   Aborted (less than 3 retained contigs)"))
}
next
}
# skip to next species if sum of captured size < 0.8 of assembly size
if(unique(sum(fasta.data$size) < 0.8 * fasta.data$asmblysize.Mb)) {
if (verbose == TRUE) {
print(noquote("   Aborted (low assembly contiguity)"))
}
next
}
# get names and sizes of retained contigs
name <- fasta.data$name
size.Mb <- fasta.data$size.Mb
asmblysize.Mb <- fasta.data$asmblysize.Mb[1]
rm(fasta.data)
gc()
# read gtf
genecount <- dataFromGtf(annot.path, name, verbose)
# skip to next species if gene count is unavailable for at least 3 contigs
if (sum(!is.na(genecount)) < 3) {
if (verbose == TRUE) {
print(noquote("   Aborted (insufficient contigs with data)"))
}
next
}
# assemble datatable
dat <- data.table(all.species[i],
size.Mb,
genecount)
dat <- na.omit(dat)
# calculate and add gene density
dat$genedens <- dat$genecount/dat$size.Mb
rsq <- summary(lm(dat$genecount~dat$size.Mb))$r.squared
j <- nrow(results) + 1
results[j, 1] <- all.species[i]
results[j, 2:3] <- c(rsq, round(asmblysize.Mb))
View(results)
View(dat)
plot(dat$genedens)
plot(dat$size.Mb, dat$genedens)
plot(dat$size.Mb, dat$genecount)
plot(dat$size.Mb, dat$genedens)
plot(dat$size.Mb, dat$genedens)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density")
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = -0.5)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = 90)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = 9)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = -0.1)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = -0.4)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, tcl = -0.5)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, axes = FALSE)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, axes = FALSE)
axis(1, at = pretty(dat$size.Mb))
axis(1, at = pretty(dat$size.Mb), mgp = c(1, 0.8, 0))
axis(1, at = pretty(dat$size.Mb), mgp = c(1, 0.8, 1))
axis(1, at = pretty(dat$size.Mb), mgp = c(0, 0.8, 0))
axis(1, at = pretty(dat$size.Mb), mgp = c(0, 0.8, 0))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, axes = FALSE)
axis(1, at = pretty(dat$size.Mb), mgp = c(0, 0.8, 0))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, axes = FALSE)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(15, 55))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(15, 53))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(15, 50))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(17, 50))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(17, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(16, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(16, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(15, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(13, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(17, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(19, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(0, 210), ylim = c(18, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 210), ylim = c(18, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 208), ylim = c(18, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 205), ylim = c(18, 49))
plot(dat$size.Mb, dat$genecount, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 205), ylim = c(18, 49))
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16, xlim = c(5, 205), ylim = c(18, 49))
plot(dat$size.Mb, dat$genecount, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16
)
plot(dat$size.Mb, dat$genecount, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genecount, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
plot(dat$size.Mb, dat$genecount / 1000, xlab = "Contig size (Mb)", ylab = "Gene count (thousands)", pch = 16)
plot(dat$size.Mb, dat$genedens, xlab = "Contig size (Mb)", ylab = "Gene density", pch = 16)
library(pracma)
f <- function(x) exp(x)
numderiv(f, 0)
numderiv(f, 0)$df
numderiv(f, c(0:3))$df
numderiv(f, 1)$df
numderiv(f, 2)$df
numderiv(f, 3)$df
plot(dat$size.Mb, dat$genecount / 1000, xlab = "Contig size (Mb)", ylab = "Gene count (thousands)", pch = 16)
plot(dat$size.Mb, dat$genecount / 1000 / dat$size.Mb, xlab = "Contig size (Mb)", ylab = "Gene count (thousands)", pch = 16)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
# loop for each clade
for (i in c("All", "Mammalia", "Actinopterygii", "Sauropsida")) {
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
# for (j in variables) {
#   dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
# }
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
num <- ifelse(nrow(dat) > 21, 16, 15) # get rid of error in reptiles
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, num)
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
num <- nrow(models)
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] # match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
num,
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "num.models", "estimate", "importance", "lower", "upper")
if (nrow(combined.df) == 0) {
combined.df <- df
} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance > 0.5, ]
View(combined.df)
?dredge
?MuMIn::dredge()
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
# loop for each clade
for (i in c("All", "Mammalia", "Actinopterygii", "Sauropsida")) {
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
num <- ifelse(nrow(dat) > 21, 16, 15) # get rid of error in reptiles
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, num)
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
num <- nrow(models)
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] # match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
num,
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "num.models", "estimate", "importance", "lower", "upper")
if (nrow(combined.df) == 0) {
combined.df <- df
} else {
combined.df <- rbind(combined.df, df)
}
}
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
# loop for each clade
View(repeats)
l <- setNames(rowSums(repeats[, c(2, 4, 6, 8, 10, 12)]))
l <- setNames(rowSums(repeats[, c(2, 4, 6, 8, 10, 12)]), repeats$species)
l
rsq
l
m <- data.set(names(l), l)
m <- data.frame(names(l), l)
View(m)
n <- intersect(m$names.l., rsq$species)
n
m <- m[m$names.l. %in% n]
n
View(m)
m[m$names.l.]
m[row.names(m) %in% n]
m[row.names(m) %in% n, ]
m <- m[row.names(m) %in% n, ]
o <- rsq[rsq$species %in% n, ]
o
o
View(rsq)
o <- rsq[rsq$species %in% n, ]
o
View(o)
m$clade <- o$clade
View(m)
plot(m[m$clade == "Actinopterygii", ])
plot(m[m$clade == "Actinopterygii", ]$l)
View(m)
hist(m[m$clade == "Actinopterygii", ]$l)
hist(m[m$clade == "Mammalia", ]$l)
hist(m[m$clade == "Sauria", ]$l)
hist(m[m$clade == "Sauropsida", ]$l)
hist(m[m$clade == "Mammalia", ]$l)
hist(m[m$clade == "Actinopterygii", ]$l)
View(m)
View(rsq)
dat <- read.csv("../results/rsq.csv")
files <- list.files("../results/divsums")
sp <- gsub(".divsum$", "", files)
repstats <- data.frame()
lis <- vector("list", length(sp))
h <- 1
sp
h <- 52
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[h]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
View(divsum)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
lis[[h]] <- colnames(divsum)
for (h in 1:length(sp)) {
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[h]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
lis[[h]] <- colnames(divsum)
}
to.collapse <- sort(unique(
sub("\\..*", "", unique(grep("\\.", unlist(lis), value = TRUE)))
))
others <- unique(grep("\\.", unlist(lis), value = TRUE, invert = TRUE))
others <- others[!others %in% to.collapse]
others <- others[!others %in% "Div"]
dat <- read.csv("../results/rsq.csv")
files <- list.files("../results/divsums")
sp <- gsub(".divsum$", "", files)
repstats <- data.frame()
lis <- vector("list", length(sp))
for (h in 1:length(sp)) {
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[h]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
lis[[h]] <- colnames(divsum)
}
to.collapse <- sort(unique(
sub("\\..*", "", unique(grep("\\.", unlist(lis), value = TRUE)))
))
others <- unique(grep("\\.", unlist(lis), value = TRUE, invert = TRUE))
others <- others[!others %in% to.collapse]
others <- others[!others %in% "Div"]
i <- 52
species <- sp[i]
asmbsz <- dat[dat$species == species, ]$assem.sz * 1000000
if (length(asmbsz) == 0L) {
asmbsz <- NA
}
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[i]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
View(divsum)
unlist(divsum)
unlist(divsum) |> sum()
(unlist(divsum) |> sum()) / asmbsz
asmbsz
sp
i <- 1
species <- sp[i]
asmbsz <- dat[dat$species == species, ]$assem.sz * 1000000
if (length(asmbsz) == 0L) {
asmbsz <- NA
}
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[i]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
i <- 52
species <- sp[i]
asmbsz <- dat[dat$species == species, ]$assem.sz * 1000000
if (length(asmbsz) == 0L) {
asmbsz <- NA
}
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[i]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
# collapse
for (j in to.collapse) {
pat <- paste0("^", j, "(\\.|$)")
headers <- grep(pat, names(divsum), value = TRUE)
sub <- divsum[, headers]
sums <- rowSums(as.matrix(sub))
#divsum <- divsum[, !names(divsum) %in% headers]
assign(j, sums)
}
# record others
for (k in others) {
pat <- paste0("^", k, "(\\.|$)")
headers <- grep(pat, names(divsum), value = TRUE)
sub <- divsum[, headers]
sums <- rowSums(as.matrix(sub))
assign(k, sums)
}
div <- divsum$Div
divsum <- data.frame(div, mget(to.collapse), mget(others))
# collapse further
to.keep <- c("div", "DNA", "LINE", "LTR", "SINE", "Unknown")
to.sum <- divsum[, colnames(divsum)[!colnames(divsum) %in% to.keep]]
divsum <- divsum[, to.keep]
divsum$others <- rowSums(to.sum)
df <- data.frame(species)
View(divsum)
sum(divsum)
taxo <- read.csv("../../results/rsq.csv")
