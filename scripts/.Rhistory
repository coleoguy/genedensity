for (i in 1:num) {
if (num %% i == 0) {
vec <- c(vec, i)
}
}
3:5
5:3
num <- 600851475143
vec <- c()
for (i in num:1) {
if (num %% i == 0) {
vec <- c(vec, i)
}
}
num <- 13195
num <- 600851475143
num <- 13195
vec <- c()
for (i in num:1) {
if (num %% i == 0) {
vec <- c(vec, i)
}
}
vec
j <- 29
num:1
j:1
j:1 %% j
j %% j:1
length(j %% j:1)
length(j %% j:1 == 0)
j %% j:1 == 0
which(j %% j:1 == 0)
length(which(j %% j:1 == 0))
vec2 <- c()
for (j in vec) {
if (length(which(j %% j:1 == 0)) == 2){
vec2 <- c(vec2, j)
}
}
vec2
# for each species, find the
a <- read.csv("../results/rsq.csv")
b <- read.csv("../results/repeats.csv")
int <- intersect(a$species, b$species)
df <- read.csv("../results/exon.num.csv")
all.sp <- unique(df$sp)
result <- c()
for (i in 1:length(all.sp)) {
sp <- all.sp[i]
spdat <- df[df$sp == sp, ]
metric <- quantile(spdat$exons, probs = 0.8, na.rm = TRUE)
result <- c(result, setNames(metric, sp))
}
result <- result[result <= 1000]
int <- intersect(int, names(result))
result
sp
spdat
metric
?quantile
gtf <- paste0("../data/genomic.gtf")
gtf <- read.table(gtf, header = FALSE, sep = "\t")
exon <- gtf[gtf[, 3] == "exon", ]
exon <- exon[order(exon$V5), ]
exon <- exon[order(exon$V4), ]
exon <- unique(exon)
gene <- gtf[gtf[, 3] == "gene", ]
gene <- gene[order(gene$V5), ]
gene <- gene[order(gene$V4), ]
gene <- unique(gene)
nums <- data.frame(sp = sp,
nums = apply(X = gene, MARGIN = 1, FUN = howmany, exons = exon))
nums <- data.frame(sp = "human",
nums = apply(X = gene, MARGIN = 1, FUN = howmany, exons = exon))
# get a csv with number of exons per gene for every gene in every species
source("functions.R")
nums <- data.frame(sp = "human",
nums = apply(X = gene, MARGIN = 1, FUN = howmany, exons = exon))
spdat <- nums
metric <- quantile(spdat$exons, probs = 0.8, na.rm = TRUE)
metric <- quantile(spdat$nums, probs = 0.8, na.rm = TRUE)
dat <- read.csv("../results/rsq.csv")
files <- list.files("../results/divsums")
sp <- gsub(".divsum$", "", files)
#asmbsz <- dat$assem.sz * 1000000
#names(asmbsz) <- dat$species
repstats <- data.frame()
lis <- vector("list", length(sp))
for (h in 1:length(sp)) {
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[h]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
lis[[h]] <- colnames(divsum)
}
View(lis)
l <- unlist(lis)
l <- sort(unique())
l <- sort(unique(l))
l
df <- read.csv("../results/exon.num.csv")
i <- unique(df$sp)
vec <- c()
j <- i[1]
vec <- c()
for (j in i) {
vec <- c(vec, nrow(df[df$sp == j]))
}
vec <- c()
for (j in i) {
vec <- c(vec, nrow(df[df$sp == j, ]))
}
# read in repeats.csv and removes species where the exon number at the 80%
# quantile is greater than 1000; for reference, this number for the human t2t
# annotation is 404 and the drosophila reference genome annotation is 50
a <- read.csv("../results/rsq.csv")
a <- read.csv("../results/rsq.csv")
hist(vec)
which(vec[vec < 50000])
vec[vec < 50000]
which(vec < 50000)
i[which(vec < 50000)]
b <- read.csv("../results/repeats.csv")
intersect(b$species, i)
i
intersect(a$species, i)
int <- intersect(a$species, i)
which(i == int)
i
which(i = int)
which(i %in% int)
i[which(i %in% int)]
i[which(i %in% int)] == int
which(i %in% int)
vec[which(i %in% int)]
vec[which(i %in% int)]/a$assem.sz
hist(vec[which(i %in% int)]/a$assem.sz)
sort(vec[which(i %in% int)]/a$assem.sz)
vec[which(i %in% int)]/a$assem.sz
setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
plot(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)]), a$rsq)
setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
plot(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)]), a$rsq)
setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
sort(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
)
# read in repeats.csv and removes species where the exon number at the 80%
# quantile is greater than 1000; for reference, this number for the human t2t
# annotation is 404 and the drosophila reference genome annotation is 50
# a <- read.csv("../results/rsq.csv")
# b <- read.csv("../results/repeats.csv")
# int <- intersect(a$species, b$species)
df <- read.csv("../results/exon.num.csv")
all.sp <- unique(df$sp)
result <- c()
for (i in 1:length(all.sp)) {
sp <- all.sp[i]
spdat <- df[df$sp == sp, ]
metric <- quantile(spdat$exons, probs = 0.8, na.rm = TRUE)
result <- c(result, setNames(metric, sp))
}
vec <- c()
for (j in i) {
vec <- c(vec, nrow(df[df$sp == j, ]))
}
i <- read.csv("../results/exon.num.csv")
i <- unique(i$sp)
vec <- c()
for (j in i) {
vec <- c(vec, nrow(df[df$sp == j, ]))
}
vec <- c()
for (j in i) {
vec <- c(vec, nrow(df[df$sp == j, ]))
}
df <- read.csv("../results/exon.num.csv")
i <- unique(df$sp)
vec <- c()
for (j in i) {
vec <- c(vec, nrow(df[df$sp == j, ]))
}
a <- read.csv("../results/rsq.csv")
int <- intersect(a$species, i)
i[which(i %in% int)]
which(i %in% int)
vec[which(i %in% int)]/a$assem.sz
setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
plot(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)]), a$rsq)
library(phytools)
library(caper)
tree <- read.tree("../data/formatted.tree.nwk")
int <- intersect(tree$tip.label, i[which(i %in% int)])
pruned.tree <- keep.tip(tree, int)
pruned.tree
library(phytools)
library(caper)
tree <- read.tree("../data/formatted.tree.nwk")
int <- intersect(tree$tip.label, i[which(i %in% int)])
pruned.tree <- keep.tip(tree, int)
y <- a$rsq
x <- setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
y <- a$rsq
x <- setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
i[which(i %in% int)]
vec[which(i %in% int)]/a$assem.sz
vec[which(i %in% int)]
df <- read.csv("../results/exon.num.csv")
i <- unique(df$sp)
vec <- c()
for (j in i) {
vec <- c(vec, nrow(df[df$sp == j, ]))
}
a <- read.csv("../results/rsq.csv")
int <- intersect(a$species, i)
i[which(i %in% int)]
which(i %in% int)
vec[which(i %in% int)]/a$assem.sz
setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
plot(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)]), a$rsq)
library(phytools)
library(caper)
tree <- read.tree("../data/formatted.tree.nwk")
int2 <- intersect(tree$tip.label, i[which(i %in% int)])
pruned.tree <- keep.tip(tree, int2)
y <- a$rsq
x <- setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
res <- setNames(resid(glm(y ~ x)), sort(int))
l <- phylosig(pruned.tree, res, method = "lambda", niter = 10000, test = T)
l$P
dat <- data.frame(sp = names(x),
rsq = y,
metric = x)
cd <- comparative.data(pruned.tree,
dat,
names.col = "sp",
vcv = T)
model <- pgls(rsq ~ metric, data = cd)
summary(model)
df <- read.csv("../results/exon.num.csv")
i <- unique(df$sp)
vec <- c()
for (j in i) {
vec <- c(vec, nrow(df[df$sp == j, ]))
}
a <- read.csv("../results/rsq.csv")
int <- intersect(a$species, i)
i[which(i %in% int)]
which(i %in% int)
vec[which(i %in% int)]/a$assem.sz
setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
plot(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)]), a$rsq)
sort(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)]))
setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)])
plot(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)]), a$assem.sz)
l <- data.frame(setNames(vec[which(i %in% int)]/a$assem.sz, i[which(i %in% int)]), a$assem.sz)
View(l)
# read in repeats.csv and removes species where the exon number at the 80%
# quantile is greater than 1000; for reference, this number for the human t2t
# annotation is 404 and the drosophila reference genome annotation is 50
# a <- read.csv("../results/rsq.csv")
# b <- read.csv("../results/repeats.csv")
# int <- intersect(a$species, b$species)
df <- read.csv("../results/exon.num.csv")
all.sp <- unique(df$sp)
result <- c()
for (i in 1:length(all.sp)) {
sp <- all.sp[i]
spdat <- df[df$sp == sp, ]
metric <- quantile(spdat$exons, probs = 0.8, na.rm = TRUE)
result <- c(result, setNames(metric, sp))
}
result <- result[result <= 1000]
result
rsq <- read.csv("../results/rsq.csv")
int <- intersect(rsq$species, names(result))
# read in repeats.csv and removes species where the exon number at the 80%
# quantile is greater than 1000; for reference, this number for the human t2t
# annotation is 404 and the drosophila reference genome annotation is 50
# a <- read.csv("../results/rsq.csv")
# b <- read.csv("../results/repeats.csv")
# int <- intersect(a$species, b$species)
df <- read.csv("../results/exon.num.csv")
all.sp <- unique(df$sp)
result <- c()
for (i in 1:length(all.sp)) {
sp <- all.sp[i]
spdat <- df[df$sp == sp, ]
metric <- quantile(spdat$exons, probs = 0.8, na.rm = TRUE)
result <- c(result, setNames(metric, sp))
}
result
hist(result)
result[result <= 1000]
hist(result[result <= 1000])
rsq <- read.csv("../results/rsq.csv")
num.gene <- c()
for (j in df$sp) {
num.gene <- c(num.gene, nrow(df[df$sp == j, ]))
}
rsq <- read.csv("../results/rsq.csv")
num.gene <- c()
for (j in unique(df$sp)) {
num.gene <- c(num.gene, assign(nrow(df[df$sp == j, ]), j))
}
assign(nrow(df[df$sp == j, ]), j)
nrow(df[df$sp == j, ])
j
assign(nrow(df[df$sp == j, ]), j)''
assign(nrow(df[df$sp == j, ]), j)
num.gene <- c()
for (j in unique(df$sp)) {
num.gene <- c(num.gene, setNames(nrow(df[df$sp == j, ]), j))
}
rsq <- rsq[rsq$species %in% names(num.gene), ]
rsq$species == names(num.gene)
rsq <- read.csv("../results/rsq.csv")
int <- intersect(rsq$species, names(num.gene))
int
rsq <- rsq[rsq$species %in% int, ]
num.gene <- num.gene[names(num.gene %in% int)]
rsq$species == names(num.gene)
names(num.gene)
num.gene <- c()
rsq <- read.csv("../results/rsq.csv")
num.gene <- c()
for (j in unique(df$sp)) {
num.gene <- c(num.gene, setNames(nrow(df[df$sp == j, ]), j))
}
int <- intersect(rsq$species, names(num.gene))
num.gene
num.gene[names(num.gene %in% int)]
num.gene[names(num.gene) %in% int]
rsq <- rsq[rsq$species %in% int, ]
num.gene <- num.gene[names(num.gene) %in% int]
rsq$species == num.gene |> names()
genedens <- num.gene / rsq$assem.sz
plot(genedens, rsq$assem.sz)
plot(rsq$assem.sz, genedens)
plot(genedens, num.gene)
plot(genedens, num.gene, color = rsq$clade)
plot(genedens, num.gene)
l <- data.frame(genedens, num.gene, rsq$species, rsq$clade)
View(l)
plot(num.gene, rsq$assem.sz)
plot(rsq$assem.sz, num.gene)
plot(genedens, rsq$assem.sz)
plot(genedens, rsq$assem.sz)
plot(rsq$assem.sz, genedens)
dat <- read.csv("../results/rsq.csv")
files <- list.files("../results/divsums")
sp <- gsub(".divsum$", "", files)
#asmbsz <- dat$assem.sz * 1000000
#names(asmbsz) <- dat$species
repstats <- data.frame()
lis <- vector("list", length(sp))
for (h in 1:length(sp)) {
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[h]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
lis[[h]] <- colnames(divsum)
}
to.collapse <- sort(unique(
sub("\\..*", "", unique(grep("\\.", unlist(lis), value = TRUE)))
))
others <- unique(grep("\\.", unlist(lis), value = TRUE, invert = TRUE))
others <- others[!others %in% to.collapse]
others <- others[!others %in% "Div"]
for (i in 1:length(sp)) {
species <- sp[i]
asmbsz <- dat[dat$species == species, ]$assem.sz * 1000000
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[i]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
# collapse
for (j in to.collapse) {
pat <- paste0("^", j, "(\\.|$)")
headers <- grep(pat, names(divsum), value = TRUE)
sub <- divsum[, headers]
sums <- rowSums(as.matrix(sub))
#divsum <- divsum[, !names(divsum) %in% headers]
assign(j, sums)
}
# record others
for (k in others) {
pat <- paste0("^", k, "(\\.|$)")
headers <- grep(pat, names(divsum), value = TRUE)
sub <- divsum[, headers]
sums <- rowSums(as.matrix(sub))
assign(k, sums)
}
div <- divsum$Div
divsum <- data.frame(div, mget(to.collapse), mget(others))
# collapse further
to.keep <- c("div", "DNA", "LINE", "LTR", "SINE", "Unknown")
to.sum <- divsum[, colnames(divsum)[!colnames(divsum) %in% to.keep]]
divsum <- divsum[, to.keep]
divsum$others <- rowSums(to.sum)
df <- data.frame(species)
for (l in colnames(divsum)[-1]) {
# proportion TODO change to new way of getting asmbsz
df[[paste0("prop.", tolower(l))]] <- sum(divsum[l] / asmbsz)
# age
df[[paste0("age.", tolower(l))]] <- which(cumsum(divsum[l]) > sum(divsum[l])/2)[1]
}
repstats <- rbind(repstats, df)
}
write.csv(repstats, "../results/repeat.results.csv", row.names = FALSE)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeats.csv")
combined.df <- data.frame()
# loop for each clade
for (i in c("All", "Mammalia", "Actinopterygii", "Sauria")) {
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# prune tree
# tree <- read.tree("../data/formatted.tree.nwk")
# int <- intersect(dat$species, tree$tip.label)
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
if (nrow(combined.df) == 0) {
combined.df <- df
} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance > 0.5, ]
write.csv(combined.df, "../results/model.averaging.csv", row.names = F)
