View(df)
rep(c("importance", "upper", "lower"), each = 3)
df <- data.frame(
stat = rep(c("importance", "upper", "lower"), each = length(imp)),
variable = rep(names(imp), 3)
)
View(df)
# loop for each clade
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3 )
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
View(df)
perm.colname
all.terms
# get CIs and int
imp <- sw(models)
imp
# get CIs and int
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
imp
ci <- confint(avg)
avg <- model.avg(models)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
View(df)
run.results <- c(imp, upper, lower)
View(df)
df$run1 <- run.results
View(df)
df[1, 5] <- run.results
h <- 1
i == 1
i <- 1
h == 1 && i == 2
h == 2 && i == 1
h == 1 && i == 1
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
foo <- "df$run1"
assign(foo, 1)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
# loop for each clade
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
for (i in 1:3) {
run.results <- c()
for (i in 1:4) {
clade <- clades[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# permute
constant.cols <- c("species", "clade", "rsq")
perm.colname <- setdiff(names(dat), constant.cols)
block <- dat[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
dat[, perm.colname] <- block
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
num <- ifelse(nrow(dat) > 21, 16, 15) # get rid of error in reptiles
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, num)
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
# get CIs and int in a vector
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0(run, "h")]] <- run.results
}
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
# loop for each clade
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
for (h in 1:3) {
run.results <- c()
for (i in 1:4) {
clade <- clades[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# permute
constant.cols <- c("species", "clade", "rsq")
perm.colname <- setdiff(names(dat), constant.cols)
block <- dat[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
dat[, perm.colname] <- block
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
num <- ifelse(nrow(dat) > 21, 16, 15) # get rid of error in reptiles
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, num)
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
# get CIs and int in a vector
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0(run, "h")]] <- run.results
}
df[[paste0("run", h)]] <- run.results
View(df)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
# loop for each clade
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
for (h in 1:10) {
print(h)
run.results <- c()
for (i in 1:4) {
clade <- clades[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# permute
constant.cols <- c("species", "clade", "rsq")
perm.colname <- setdiff(names(dat), constant.cols)
block <- dat[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
dat[, perm.colname] <- block
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# pgls
# cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
num <- ifelse(nrow(dat) > 21, 16, 15) # get rid of error in reptiles
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, num)
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
# get CIs and int in a vector
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0("run", h)]] <- run.results
}
constant.cols <- c("species", "clade", "rsq")
perm.colname <- setdiff(names(dat), constant.cols)
block <- dat[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
dat[, perm.colname] <- block
constant.cols <- c("species", "clade", "rsq")
h <- 1
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
# loop for each clade
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
h
i <- 1
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
variables
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
View(dat)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
h <- 1
print(h)
run.results <- c()
# permute
constant.cols <- c("species", "clade", "rsq")
perm.colname <- setdiff(names(dat), constant.cols)
block <- dat[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
dat[, perm.colname] <- block
View(dat)
i <- 1
clade <- clades[i]
sub <- dat
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
sub <- sub[sub$clade %in% clade, ]
}
# rescale
for (j in variables) {
sub[[j]] <- (sub[[j]]-min(sub[[j]])) / diff(range(sub[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = sub)
# pgls
# cd <- comparative.data(tree, sub, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
num <- ifelse(nrow(sub) > 21, 16, 15) # get rid of error in reptiles
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, num)
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
# get CIs and int in a vector
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
View(global.model)
View(df)
gc()
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
clades <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")
for (h in 1:10) { # for each run
print(h)
run.results <- c()
# permute
constant.cols <- c("species", "clade", "rsq")
perm.colname <- setdiff(names(dat), constant.cols)
block <- dat[, perm.colname]
for (l in 1:length(block)) {
block[, l] <- sample(block[, l])
}
dat[, perm.colname] <- block
for (i in 1:4) { # for each clade
clade <- clades[i]
sub <- dat
# subset results
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
sub <- sub[sub$clade %in% clade, ]
}
# rescale
for (j in variables) {
sub[[j]] <- (sub[[j]]-min(sub[[j]])) / diff(range(sub[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = sub)
# pgls
# cd <- comparative.data(tree, sub, names.col = "species", vcv = TRUE)
# global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
num <- ifelse(nrow(sub) > 21, 16, 15) # get rid of error in reptiles
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, num)
# extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
# get CIs and int in a vector
imp <- sw(models)
imp <- imp[match(all.terms, names(imp))]
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(all.terms, row.names(ci)), ] # match ci
lower <- ci[, 1]
upper <- ci[, 2]
run.results <- c(run.results, imp, upper, lower)
# make initial df
if (h == 1 && i == 1) {
df <- data.frame(
dataset = rep(clades, each = length(imp) * 3),
stat = rep(rep(c("importance", "upper", "lower"), each = length(imp)), 4),
variable = rep(rep(names(imp), 3), 4)
)
}
}
df[[paste0("run", h)]] <- run.results
write.csv(df, "../results/permute.csv", row.names = F)
gc()
}
source("../../scripts/functions.R")
