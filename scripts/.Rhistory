combos <- combn(predictors, k, simplify = FALSE)
for (combo in combos) {
if (!is_valid_model(combo)) next  # skip invalid interaction models
fml <- as.formula(paste(response, "~", paste(combo, collapse = " + ")))
fit <- try(pgls(fml, data = cd), silent = TRUE)
if (!inherits(fit, "try-error")) {
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
}
model_selection_table <- model.sel(model_list)
View(model_selection_table)
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
View(models)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Actinopterygii"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
n <- nrow(cd$data)
max_k <- n - 2
# Helper: check marginality rule
is_valid_model <- function(terms) {
interactions <- grep(":", terms, value = TRUE)
for (inter in interactions) {
parts <- unlist(strsplit(inter, ":"))
if (!all(parts %in% terms)) return(FALSE)  # missing main effect
}
TRUE
}
# Generate all valid combinations of predictors under marginality
model_list <- list()
model_index <- 1
for (k in 1:max_k) {
combos <- combn(predictors, k, simplify = FALSE)
for (combo in combos) {
if (!is_valid_model(combo)) next  # skip invalid interaction models
fml <- as.formula(paste(response, "~", paste(combo, collapse = " + ")))
fit <- try(pgls(fml, data = cd), silent = TRUE)
if (!inherits(fit, "try-error")) {
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
}
m
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Actinopterygii"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
n <- nrow(cd$data)
max_k <- min(n - 2, length(predictors))
# Helper: check marginality rule
is_valid_model <- function(terms) {
interactions <- grep(":", terms, value = TRUE)
for (inter in interactions) {
parts <- unlist(strsplit(inter, ":"))
if (!all(parts %in% terms)) return(FALSE)  # missing main effect
}
TRUE
}
# Generate all valid combinations of predictors under marginality
model_list <- list()
model_index <- 1
for (k in 1:max_k) {
combos <- combn(predictors, k, simplify = FALSE)
for (combo in combos) {
if (!is_valid_model(combo)) next  # skip invalid interaction models
fml <- as.formula(paste(response, "~", paste(combo, collapse = " + ")))
fit <- try(pgls(fml, data = cd), silent = TRUE)
if (!inherits(fit, "try-error")) {
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
View(models)
View(models)
combos
combo
combos <- combn(predictors, k, simplify = FALSE)
combos
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Sauropsida"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
n <- nrow(cd$data)
max_k <- min(n - 2, length(predictors))
# Helper: check marginality rule
is_valid_model <- function(terms) {
interactions <- grep(":", terms, value = TRUE)
for (inter in interactions) {
parts <- unlist(strsplit(inter, ":"))
if (!all(parts %in% terms)) return(FALSE)  # missing main effect
}
TRUE
}
# Generate all valid combinations of predictors under marginality
model_list <- list()
model_index <- 1
for (k in 0:max_k) {
if (k == 0) {
fml <- as.formula(paste(response, "~ 1"))
fit <- try(pgls(fml, data = cd), silent = TRUE)
if (!inherits(fit, "try-error")) {
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
next
}
combos <- combn(predictors, k, simplify = FALSE)
for (combo in combos) {
if (!is_valid_model(combo)) next  # enforce marginality
fml <- as.formula(paste(response, "~", paste(combo, collapse = " + ")))
fit <- try(pgls(fml, data = cd), silent = TRUE)
if (!inherits(fit, "try-error")) {
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
View(models)
k
max_k
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Actinopterygii"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
cd$data |> length()
cd$data |> nrow()
l <- cd$data
View(l)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Actinopterygii"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
n <- nrow(cd$data)
max_k <- min(n - 2, length(predictors))
# Helper: check marginality rule
is_valid_model <- function(terms) {
interactions <- grep(":", terms, value = TRUE)
for (inter in interactions) {
parts <- unlist(strsplit(inter, ":"))
if (!all(parts %in% terms)) return(FALSE)  # missing main effect
}
TRUE
}
# Generate all valid combinations of predictors under marginality
model_list <- list()
model_index <- 1
for (k in 0:max_k) {
if (k == 0) {
fml <- as.formula(paste(response, "~ 1"))
fit <- try(pgls(fml, data = cd), silent = TRUE)
if (!inherits(fit, "try-error")) {
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
next
}
combos <- combn(predictors, k, simplify = FALSE)
for (combo in combos) {
if (!is_valid_model(combo)) next  # enforce marginality
fml <- as.formula(paste(response, "~", paste(combo, collapse = " + ")))
fit <- try(pgls(fml, data = cd), silent = TRUE)
if (!inherits(fit, "try-error")) {
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Actinopterygii"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
n <- nrow(cd$data)
max_k <- min(n - 2, length(predictors))
# Helper: check marginality rule
is_valid_model <- function(terms) {
interactions <- grep(":", terms, value = TRUE)
for (inter in interactions) {
parts <- unlist(strsplit(inter, ":"))
if (!all(parts %in% terms)) return(FALSE)  # missing main effect
}
TRUE
}
# Generate all valid combinations of predictors under marginality
model_list <- list()
model_index <- 1
k
k <- 0
combos <- combn(predictors, k, simplify = FALSE)
k <- 1
if (k == 0) {
fml <- as.formula(paste(response, "~ 1"))
fit <- try(pgls(fml, data = cd), silent = TRUE)
if (!inherits(fit, "try-error")) {
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
next
}
combos <- combn(predictors, k, simplify = FALSE)
combos
View(sample.mse)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Actinopterygii"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
cd <- comparative.data(tree, dat, names.col = "species", vcv = TRUE)
response <- "rsq"
predictors <- all.terms
n <- nrow(cd$data)
max_k <- min(n - 2, length(predictors))
model_list <- list()
model_index <- 1
for (k in 0:max_k) {
if (k == 0) {
fml <- as.formula(paste(response, "~ 1"))
fit <- pgls(fml, data = cd)
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
next
}
combos <- combn(predictors, k, simplify = FALSE)
for (m in combos) {
if (!model.marginal(m)) next
fml <- as.formula(paste(response, "~", paste(m, collapse = " + ")))
fit <- try(pgls(fml, data = cd))
model_name <- paste0("M", model_index)
model_list[[model_name]] <- fit
model_index <- model_index + 1
}
}
models <- model.sel(model_list)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
View(models)
View(sw.test)
l <- get.models(models[1])
l <- get.models(models, subset = 1)
View(l)
l <- get.models(models, subset = 1)[[]]
[[l]]
l
l <- get.models(models, subset = 1)[[1]]
View(l)
lambda.test(l)
View(lambda.test)
View(l)
l$formula
lambda.test(l$formula)
l
lambda.test(l)
coef(l)
length(coef(l))
model <= l
model <- l
length(coef(model)) < length(residuals(model))
res <- setNames(residuals(model), dat$species)
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
clade <- "Actinopterygii"
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# functions
source("functions.R")
View(model.rm)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
source("functions.R")
rsq <- read.csv("../results/rsq.csv")
repeats <- read.csv("../results/repeat-results.csv")
tree <- read.tree("../data/formatted-tree.nwk")
combined.df <- data.frame()
# loop for each clade
i <- 4
clade <- c("All", "Mammalia", "Actinopterygii", "Sauropsida")[i]
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (clade %in% c("Mammalia", "Actinopterygii", "Sauropsida")) {
dat <- dat[dat$clade %in% clade, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# rescale
for (j in variables) {
dat[[j]] <- (dat[[j]]-min(dat[[j]])) / diff(range(dat[[j]]))
}
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# gls
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
m.lim = c(0, nrow(dat)-2), # ensure degree of freedom is greater than zero
extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
