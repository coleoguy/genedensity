url2 <- checksum[grepl("(?<!\\.abinitio)(?<!\\.chr)\\.gtf\\.gz$", checksum, perl = TRUE)]
url2.5 <- sub(".*\\s", "", url2)
url3 <- paste0(url, url2.5)
download.file(url3, paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), method = "auto")
gunzip(paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), paste0(gtfdest, "/", urlSpecific, ".gtf"), remove = TRUE)
gtfFilePath <- paste0(gtfdest, "/", urlSpecific, ".gtf")
asmblyGeneCount <- dataFromGtf(gtfFilePath)
csv$asmblyGeneCount <- asmblyGeneCount
fwrite(csv, file = resultsCsv, row.names = FALSE)
}
}
}
execTime <- round(as.numeric(difftime(Sys.time(), startTime, units = "mins")), 2)
print(noquote(paste0("   ", execTime, " minutes")))
}
speciesChromnumCsvPath <- "C:/Users/zhaob/Desktop/gene_density/data/vertebrates/speciesChromnum.csv"
library(data.table)
library(R.utils)
library(bit64)
speciesChromnumCsv <- fread(speciesChromnumCsvPath)
dataFromGtf <- function(gtfFilePath) {
# read gtf
gtf <- fread(gtfFilePath, header = FALSE, showProgress = TRUE)
# filter for genes only
gtf <- gtf[which(gtf[, 3] == "gene"), ]
asmblyGeneCount <- nrow(gtf[!(gtf[[1]] %in% c("mt", "mito", "mitochondrial", "nonchromosomal")), ])
return(asmblyGeneCount)
}
gtfdest <- "C:/Users/zhaob/Desktop/patchgtf"
for (species in speciesChromnumCsv$species[1:121]) {
startTime <- Sys.time()
gc()
print(noquote(species))
urlSpecific <- tolower(paste0(gsub(" ", "_", species)))
if (!file.exists(paste0(gtfdest, "/", urlSpecific, ".gtf"))) {
chromNum.1n <- speciesChromnumCsv$chromNum.1n[speciesChromnumCsv$species == species]
if (!is.na(chromNum.1n)) {
resultsCsv <- paste0("C:/Users/zhaob/Desktop/gene_density/results/vertebrates/genomicData/", gsub(" ", "_", species), ".csv")
csv <- fread(resultsCsv)
if (nrow(csv) > 0) {
urlBase <- "https://ftp.ensembl.org/pub/release-112/gtf/"
urlSpecific <- tolower(paste0(gsub(" ", "_", species)))
url <- paste0(urlBase, urlSpecific, "/")
checksum <- readLines(paste0(url, "CHECKSUMS"))
url2 <- checksum[grepl("(?<!\\.abinitio)(?<!\\.chr)\\.gtf\\.gz$", checksum, perl = TRUE)]
url2.5 <- sub(".*\\s", "", url2)
url3 <- paste0(url, url2.5)
download.file(url3, paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), method = "auto")
gunzip(paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), paste0(gtfdest, "/", urlSpecific, ".gtf"), remove = TRUE)
gtfFilePath <- paste0(gtfdest, "/", urlSpecific, ".gtf")
asmblyGeneCount <- dataFromGtf(gtfFilePath)
csv$asmblyGeneCount <- asmblyGeneCount
fwrite(csv, file = resultsCsv, row.names = FALSE)
}
}
}
execTime <- round(as.numeric(difftime(Sys.time(), startTime, units = "mins")), 2)
print(noquote(paste0("   ", execTime, " minutes")))
}
install.packages("curl")
library(curl)
url3
handle_setopt(h, timeout = 360)
h <- new_handle()
handle_setopt(h, timeout = 360)
handle_setopt(h, timeout = 360)
curl_download(url3, paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), handle = h)
gunzip(paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), paste0(gtfdest, "/", urlSpecific, ".gtf"), remove = TRUE)
gtfFilePath <- paste0(gtfdest, "/", urlSpecific, ".gtf")
asmblyGeneCount <- dataFromGtf(gtfFilePath)
csv$asmblyGeneCount <- asmblyGeneCount
fwrite(csv, file = resultsCsv, row.names = FALSE)
View(csv)
speciesChromnumCsvPath <- "C:/Users/zhaob/Desktop/gene_density/data/vertebrates/speciesChromnum.csv"
library(data.table)
library(R.utils)
library(bit64)
library(curl)
speciesChromnumCsv <- fread(speciesChromnumCsvPath)
dataFromGtf <- function(gtfFilePath) {
# read gtf
gtf <- fread(gtfFilePath, header = FALSE, showProgress = TRUE)
# filter for genes only
gtf <- gtf[which(gtf[, 3] == "gene"), ]
asmblyGeneCount <- nrow(gtf[!(gtf[[1]] %in% c("mt", "mito", "mitochondrial", "nonchromosomal")), ])
return(asmblyGeneCount)
}
gtfdest <- "C:/Users/zhaob/Desktop/patchgtf"
for (species in speciesChromnumCsv$species[1:121]) {
startTime <- Sys.time()
gc()
print(noquote(species))
urlSpecific <- tolower(paste0(gsub(" ", "_", species)))
if (!file.exists(paste0(gtfdest, "/", urlSpecific, ".gtf"))) {
chromNum.1n <- speciesChromnumCsv$chromNum.1n[speciesChromnumCsv$species == species]
if (!is.na(chromNum.1n)) {
resultsCsv <- paste0("C:/Users/zhaob/Desktop/gene_density/results/vertebrates/genomicData/", gsub(" ", "_", species), ".csv")
csv <- fread(resultsCsv)
if (nrow(csv) > 0) {
urlBase <- "https://ftp.ensembl.org/pub/release-112/gtf/"
urlSpecific <- tolower(paste0(gsub(" ", "_", species)))
url <- paste0(urlBase, urlSpecific, "/")
checksum <- readLines(paste0(url, "CHECKSUMS"))
url2 <- checksum[grepl("(?<!\\.abinitio)(?<!\\.chr)\\.gtf\\.gz$", checksum, perl = TRUE)]
url2.5 <- sub(".*\\s", "", url2)
url3 <- paste0(url, url2.5)
h <- new_handle()
handle_setopt(h, timeout = 360)
curl_download(url3, paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), handle = h)
gunzip(paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), paste0(gtfdest, "/", urlSpecific, ".gtf"), remove = TRUE)
gtfFilePath <- paste0(gtfdest, "/", urlSpecific, ".gtf")
asmblyGeneCount <- dataFromGtf(gtfFilePath)
csv$asmblyGeneCount <- asmblyGeneCount
fwrite(csv, file = resultsCsv, row.names = FALSE)
}
}
}
execTime <- round(as.numeric(difftime(Sys.time(), startTime, units = "mins")), 2)
print(noquote(paste0("   ", execTime, " minutes")))
}
speciesChromnumCsvPath <- "C:/Users/zhaob/Desktop/gene_density/data/vertebrates/speciesChromnum.csv"
library(data.table)
library(R.utils)
library(bit64)
library(curl)
speciesChromnumCsv <- fread(speciesChromnumCsvPath)
dataFromGtf <- function(gtfFilePath) {
# read gtf
gtf <- fread(gtfFilePath, header = FALSE, showProgress = TRUE)
# filter for genes only
gtf <- gtf[which(gtf[, 3] == "gene"), ]
asmblyGeneCount <- nrow(gtf[!(gtf[[1]] %in% c("mt", "mito", "mitochondrial", "nonchromosomal")), ])
return(asmblyGeneCount)
}
gtfdest <- "C:/Users/zhaob/Desktop/patchgtf"
for (species in speciesChromnumCsv$species[1:121]) {
startTime <- Sys.time()
gc()
print(noquote(species))
urlSpecific <- tolower(paste0(gsub(" ", "_", species)))
if (!file.exists(paste0(gtfdest, "/", urlSpecific, ".gtf"))) {
chromNum.1n <- speciesChromnumCsv$chromNum.1n[speciesChromnumCsv$species == species]
if (!is.na(chromNum.1n)) {
resultsCsv <- paste0("C:/Users/zhaob/Desktop/gene_density/results/vertebrates/genomicData/", gsub(" ", "_", species), ".csv")
csv <- fread(resultsCsv)
if (nrow(csv) > 0) {
urlBase <- "https://ftp.ensembl.org/pub/release-112/gtf/"
urlSpecific <- tolower(paste0(gsub(" ", "_", species)))
url <- paste0(urlBase, urlSpecific, "/")
checksum <- readLines(paste0(url, "CHECKSUMS"))
url2 <- checksum[grepl("(?<!\\.abinitio)(?<!\\.chr)\\.gtf\\.gz$", checksum, perl = TRUE)]
url2.5 <- sub(".*\\s", "", url2)
url3 <- paste0(url, url2.5)
h <- new_handle()
handle_setopt(h, timeout = 360)
curl_download(url3, paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), handle = h)
gunzip(paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), paste0(gtfdest, "/", urlSpecific, ".gtf"), remove = TRUE)
gtfFilePath <- paste0(gtfdest, "/", urlSpecific, ".gtf")
asmblyGeneCount <- dataFromGtf(gtfFilePath)
csv$asmblyGeneCount <- asmblyGeneCount
fwrite(csv, file = resultsCsv, row.names = FALSE)
}
}
}
execTime <- round(as.numeric(difftime(Sys.time(), startTime, units = "mins")), 2)
print(noquote(paste0("   ", execTime, " minutes")))
}
speciesChromnumCsvPath <- "C:/Users/zhaob/Desktop/gene_density/data/vertebrates/speciesChromnum.csv"
library(data.table)
library(R.utils)
library(bit64)
library(curl)
speciesChromnumCsv <- fread(speciesChromnumCsvPath)
dataFromGtf <- function(gtfFilePath) {
# read gtf
gtf <- fread(gtfFilePath, header = FALSE, showProgress = TRUE)
# filter for genes only
gtf <- gtf[which(gtf[, 3] == "gene"), ]
asmblyGeneCount <- nrow(gtf[!(gtf[[1]] %in% c("mt", "mito", "mitochondrial", "nonchromosomal")), ])
return(asmblyGeneCount)
}
gtfdest <- "C:/Users/zhaob/Desktop/patchgtf"
for (species in speciesChromnumCsv$species[1:121]) {
startTime <- Sys.time()
gc()
print(noquote(species))
urlSpecific <- tolower(paste0(gsub(" ", "_", species)))
if (!file.exists(paste0(gtfdest, "/", urlSpecific, ".gtf"))) {
chromNum.1n <- speciesChromnumCsv$chromNum.1n[speciesChromnumCsv$species == species]
if (!is.na(chromNum.1n)) {
resultsCsv <- paste0("C:/Users/zhaob/Desktop/gene_density/results/vertebrates/individualSpeciesResults/", gsub(" ", "_", species), ".csv")
csv <- fread(resultsCsv)
if (nrow(csv) > 0) {
urlBase <- "https://ftp.ensembl.org/pub/release-112/gtf/"
urlSpecific <- tolower(paste0(gsub(" ", "_", species)))
url <- paste0(urlBase, urlSpecific, "/")
checksum <- readLines(paste0(url, "CHECKSUMS"))
url2 <- checksum[grepl("(?<!\\.abinitio)(?<!\\.chr)\\.gtf\\.gz$", checksum, perl = TRUE)]
url2.5 <- sub(".*\\s", "", url2)
url3 <- paste0(url, url2.5)
h <- new_handle()
handle_setopt(h, timeout = 360)
curl_download(url3, paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), handle = h)
gunzip(paste0(gtfdest, "/", urlSpecific, ".gtf.gz"), paste0(gtfdest, "/", urlSpecific, ".gtf"), remove = TRUE)
gtfFilePath <- paste0(gtfdest, "/", urlSpecific, ".gtf")
asmblyGeneCount <- dataFromGtf(gtfFilePath)
csv$asmblyGeneCount <- asmblyGeneCount
fwrite(csv, file = resultsCsv, row.names = FALSE)
}
}
}
execTime <- round(as.numeric(difftime(Sys.time(), startTime, units = "mins")), 2)
print(noquote(paste0("   ", execTime, " minutes")))
}
# load stuff in
source("constants.and.paths.R")
source("functions.R")
loadPackages(requiredPackages)
species <- "Sarcophilus harrisii"
# load stuff in
source("constants.and.paths.R")
source("functions.R")
setwd("C:/Users/zhaob/Desktop/gene density project/scripts")
#load packages
{
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
packages <- c("ggplot2", "ggpubr")
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
BiocManager::install(packages[!installed_packages])
}
invisible(lapply(packages, library, character.only = TRUE))
rm(packages, installed_packages)
invisible(gc())
}
# read results in
{
dat <- read.csv("../results/parsed.csv")
estimates <- read.csv("../data/genome.size.est.csv")
clades <- read.csv("../data/clades.csv")
}
# calculate r squared
{
sp <- unique(dat$scientific.name)
rsq <- pvals <- c()
for(i in 1:length(sp)){
cursp <- dat[dat$scientific.name == sp[i],]
if(nrow(cursp)>=3){
fit <- summary(lm(cursp$contig.gene.count~cursp$contig.size.bp))
rsq[i] <- fit$adj.r.squared
pvals[i] <- fit$coefficients[2,4]
}
}
names(pvals) <- names(rsq) <- sp
rsq <- rsq[!is.na(rsq)]
pvals <- pvals[!is.na(pvals)]
}
rsq
setwd("C:/Users/zhaob/Desktop/gene_density/figures/rsqVsMeanK2p")
# constants
requiredPackages <- c("data.table", "ggplot2")
# paths
functionsPath <- "../../analysis/functions.R"
combinedResultsCsvPath <- "../../results/vertebrates/combinedResults.csv"
cladeDataCsvPath <- "../../data/vertebrates/cladeData.csv"
divsumDirPath <- "../../results/vertebrates/repeatLandscape"
# load stuff in
source(functionsPath)
loadPackages(requiredPackages)
combinedResults <- fread(combinedResultsCsvPath)
cladeData <- fread(cladeDataCsvPath)
getK2pMean <- function(files) {
# read text file into lines
divsumVector <- readLines(paste0(divsumDirPath, "/", files))
# look for the start of useful information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
startIndex <- match(phrase, divsumVector) + 1
# condense the useful lines into a table
divsumVector2 <- divsumVector[startIndex:length(divsumVector)]
divsumTable <- read.table(textConnection(divsumVector2), sep = " ", header = TRUE)
# drop NA columns
divsumTable2 <- divsumTable[-c(which(sapply(divsumTable,
function(col) all(is.na(col)))))]
divergence <- divsumTable$Div
frequency <- rowSums(divsumTable2[, !names(divsumTable2) == "Div"])
k2pMean <- sum(divergence*frequency)/sum(frequency)
return(k2pMean)
}
getRsq <- function(species) {
filterNames <- combinedResults$species == species
if (any(filterNames)) {
rsq <- unique(combinedResults$speciesRsquared[filterNames])
return(rsq)
} else {
return(NA)
}
}
getClass <- function(species) {
filterNames <- cladeData$species == species
if (any(filterNames)) {
class <- cladeData$class[filterNames]
return(class)
} else {
return(NA)
}
}
files <- list.files(divsumDirPath)
k2pMean <- sapply(files, getK2pMean)
species <- gsub("_", " ", gsub("_summary\\.divsum$", "", files))
rsq <- sapply(species, getRsq)
class <- sapply(species, getClass)
customClade <- class
customClade[customClade == "Actinopterygii"] <- "Ray-finned fish"
customClade[customClade == "Aves"] <- "Reptiles"
customClade[customClade == "Mammalia"] <- "Mammals"
customClade[customClade == "Reptilia"] <- "Reptiles"
otherClades <- !customClade %in% c("Ray-finned fish", "Reptiles", "Mammals")
customClade[otherClades] <- "Others"
customClade <- factor(customClade, levels = c("Mammals", "Ray-finned fish", "Reptiles", "Others"))
rsqVsK2pMean <- na.omit(data.frame(species, k2pMean, rsq, class, customClade))
fit <- lm(rsqVsK2pMean$rsq ~ rsqVsK2pMean$k2pMean)
slope <- signif(summary(fit)$coefficients[2, 1], 3)
intercept <- signif(summary(fit)$coefficients[1, 1], 3)
slopePvalue <- signif(summary(fit)$coefficients[2, 4], 3)
fitRsquared <- signif(summary(fit)$adj.r.squared, 3)
ggplot(rsqVsK2pMean, aes(x = k2pMean, y = rsq, color = customClade)) +
geom_point(shape = 16, alpha = 0.4, size = 2.3) +
scale_color_manual(labels = c(
paste0("Mammals\n(n = ", sum(customClade == "Mammals"), ")"),
paste0("Ray-finned fish\n(n = ", sum(customClade == "Ray-finned fish"), ")"),
paste0("Reptiles\n(n = ", sum(customClade == "Reptiles"), ")"),
paste0("Others\n(n = ", sum(customClade == "Others"), ")")
), values = c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"))+
ggtitle(bquote(italic(r)^2~"vs Estimated Genome Size"))+
theme(plot.title = element_text(hjust = 0.475),
axis.line = element_line(color = "black"),
legend.title = element_blank(),
legend.background = element_rect(fill = "#f2f2f2", color = "black", linewidth = 0.5),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black", linetype = "dotted", size = 0.25),
legend.position = c(0.86, 0.69),
legend.key.size = unit(21, "points"))+
xlim(c(10, 26)) +
ylim(c(0, 1))+
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed", linewidth = 0.5, fullrange = TRUE)+
labs(x = "Mean K2P Distance (subs per site)", y = bquote(italic(r)^2))
divergence
# constants
requiredPackages <- c("data.table", "ggplot2")
# paths
functionsPath <- "../../analysis/functions.R"
parsedResultsCsvPath <- "../../results/vertebrates/parsedResults.csv"
cladeDataCsvPath <- "../../data/vertebrates/cladeData.csv"
divsumDirPath <- "../../results/vertebrates/repeatLandscape"
# load stuff in
source(functionsPath)
loadPackages(requiredPackages)
parsedResults <- fread(parsedResultsCsvPath)
cladeData <- fread(cladeDataCsvPath)
getK2pMean <- function(files) {
# read text file into lines
divsumVector <- readLines(paste0(divsumDirPath, "/", files))
# look for the start of useful information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
startIndex <- match(phrase, divsumVector) + 1
# condense the useful lines into a table
divsumVector2 <- divsumVector[startIndex:length(divsumVector)]
divsumTable <- read.table(textConnection(divsumVector2), sep = " ", header = TRUE)
# drop NA columns
divsumTable2 <- divsumTable[-c(which(sapply(divsumTable,
function(col) all(is.na(col)))))]
divergence <- divsumTable$Div
frequency <- rowSums(divsumTable2[, !names(divsumTable2) == "Div"])
k2pMean <- sum(divergence*frequency)/sum(frequency)
return(k2pMean)
}
getRsq <- function(species) {
filterNames <- parsedResults$species == species
if (any(filterNames)) {
rsq <- unique(parsedResults$speciesRsquared[filterNames])
return(rsq)
} else {
return(NA)
}
}
getClass <- function(species) {
filterNames <- cladeData$species == species
if (any(filterNames)) {
class <- cladeData$class[filterNames]
return(class)
} else {
return(NA)
}
}
files <- list.files(divsumDirPath)
k2pMean <- sapply(files, getK2pMean)
species <- gsub("_", " ", gsub("_summary\\.divsum$", "", files))
rsq <- sapply(species, getRsq)
class <- sapply(species, getClass)
customClade <- class
customClade[customClade == "Actinopterygii"] <- "Ray-finned fish"
customClade[customClade == "Aves"] <- "Reptiles"
customClade[customClade == "Mammalia"] <- "Mammals"
customClade[customClade == "Reptilia"] <- "Reptiles"
otherClades <- !customClade %in% c("Ray-finned fish", "Reptiles", "Mammals")
customClade[otherClades] <- "Others"
customClade <- factor(customClade, levels = c("Mammals", "Ray-finned fish", "Reptiles", "Others"))
rsqVsK2pMean <- na.omit(data.frame(species, k2pMean, rsq, class, customClade))
fit <- lm(rsqVsK2pMean$rsq ~ rsqVsK2pMean$k2pMean)
species
speciesLower <- gsub("_", " ", gsub("_summary\\.divsum$", "", files))
species <- gsub("^(\\w)(.*)", "\\U\\1\\L\\2", speciesLower, perl = TRUE)
species
files
# constants
requiredPackages <- c("data.table", "ggplot2")
# paths
functionsPath <- "../../analysis/functions.R"
parsedResultsCsvPath <- "../../results/vertebrates/parsedResults.csv"
cladeDataCsvPath <- "../../data/vertebrates/cladeData.csv"
divsumDirPath <- "../../results/vertebrates/repeatLandscape"
# load stuff in
source(functionsPath)
loadPackages(requiredPackages)
parsedResults <- fread(parsedResultsCsvPath)
cladeData <- fread(cladeDataCsvPath)
getK2pMean <- function(files) {
# read text file into lines
divsumVector <- readLines(paste0(divsumDirPath, "/", files))
# look for the start of useful information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
startIndex <- match(phrase, divsumVector) + 1
# condense the useful lines into a table
divsumVector2 <- divsumVector[startIndex:length(divsumVector)]
divsumTable <- read.table(textConnection(divsumVector2), sep = " ", header = TRUE)
# drop NA columns
divsumTable2 <- divsumTable[-c(which(sapply(divsumTable,
function(col) all(is.na(col)))))]
divergence <- divsumTable$Div
frequency <- rowSums(divsumTable2[, !names(divsumTable2) == "Div"])
k2pMean <- sum(divergence*frequency)/sum(frequency)
return(k2pMean)
}
getRsq <- function(species) {
filterNames <- parsedResults$species == species
if (any(filterNames)) {
rsq <- unique(parsedResults$speciesRsquared[filterNames])
return(rsq)
} else {
return(NA)
}
}
getClass <- function(species) {
filterNames <- cladeData$species == species
if (any(filterNames)) {
class <- cladeData$class[filterNames]
return(class)
} else {
return(NA)
}
}
files <- list.files(divsumDirPath)
k2pMean <- sapply(files, getK2pMean)
speciesLower <- gsub("_", " ", gsub("_summary\\.divsum$", "", files))
species <- gsub("^(\\w)(.*)", "\\U\\1\\L\\2", speciesLower, perl = TRUE)
rsq <- sapply(species, getRsq)
class <- sapply(species, getClass)
customClade <- class
customClade[customClade == "Actinopterygii"] <- "Ray-finned fish"
customClade[customClade == "Aves"] <- "Reptiles"
customClade[customClade == "Mammalia"] <- "Mammals"
customClade[customClade == "Reptilia"] <- "Reptiles"
otherClades <- !customClade %in% c("Ray-finned fish", "Reptiles", "Mammals")
customClade[otherClades] <- "Others"
customClade <- factor(customClade, levels = c("Mammals", "Ray-finned fish", "Reptiles", "Others"))
rsqVsK2pMean <- na.omit(data.frame(species, k2pMean, rsq, class, customClade))
fit <- lm(rsqVsK2pMean$rsq ~ rsqVsK2pMean$k2pMean)
slope <- signif(summary(fit)$coefficients[2, 1], 3)
intercept <- signif(summary(fit)$coefficients[1, 1], 3)
slopePvalue <- signif(summary(fit)$coefficients[2, 4], 3)
fitRsquared <- signif(summary(fit)$adj.r.squared, 3)
ggplot(rsqVsK2pMean, aes(x = k2pMean, y = rsq, color = customClade)) +
geom_point(shape = 16, alpha = 0.4, size = 2.3) +
scale_color_manual(labels = c(
paste0("Mammals\n(n = ", sum(customClade == "Mammals"), ")"),
paste0("Ray-finned fish\n(n = ", sum(customClade == "Ray-finned fish"), ")"),
paste0("Reptiles\n(n = ", sum(customClade == "Reptiles"), ")"),
paste0("Others\n(n = ", sum(customClade == "Others"), ")")
), values = c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"))+
ggtitle(bquote(italic(r)^2~"vs Estimated Genome Size"))+
theme(plot.title = element_text(hjust = 0.475),
axis.line = element_line(color = "black"),
legend.title = element_blank(),
legend.background = element_rect(fill = "#f2f2f2", color = "black", linewidth = 0.5),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black", linetype = "dotted", size = 0.25),
legend.position = c(0.86, 0.69),
legend.key.size = unit(21, "points"))+
xlim(c(10, 26)) +
ylim(c(0, 1))+
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed", linewidth = 0.5, fullrange = TRUE)+
labs(x = "Mean K2P Distance (subs per site)", y = bquote(italic(r)^2))
ggsave(filename = "rsqVsK2pMean.jpg",
plot = last_plot(),
width = 7680,
height = 4320,
units = "px",
dpi = 1100)
slopeRsquared <- signif(summary(fit)$adj.r.squared, 3)
slopeRsquared
slopePvalue
