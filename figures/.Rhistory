while (TRUE) {
writeLines("This file keeps the SSD awake.", "../../keepawake.txt")
file.remove("../../keepawake.txt")
Sys.sleep(20)
}
while (TRUE) {
writeLines("This file was written to keep the SSD awake.", "../../keepawake.txt")
file.remove("../../keepawake.txt")
Sys.sleep(20)
}
library(viridis)
combined.df <- read.csv("../results/model.averaging.csv")
# x positions
x <- c()
for (i in 1:length(combined.df$clade)) {
if (is.null(x)) {
x <- c(1)
} else {
x <- c(x, ifelse(combined.df$clade[i] == prev, tail(x, 1) + 0.55, tail(x, 1) + 1))
}
prev <- combined.df$clade[i]
}
imp <- combined.df$importance
# color mapping
res <- 10000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in combined.df$model) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
int.range <- range(as.matrix(combined.df[c("lower", "upper")]))
plot(y = combined.df$estimate, x = x, type = "n", ylim = 1.05 * int.range,
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(min(x)-0.25, max(x)+0.25)) # plot
library(viridis)
combined.df <- read.csv("../results/model.averaging.csv")
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
rsq <- read.csv("../results/rsq.08.csv")
repeats <- read.csv("../results/repeats.08.csv")
combined.df <- data.frame()
# loop for each clade
for (i in c("All", "Mammalia", "Actinopterygii", "Sauria")) {
# subset results
dat <- merge(rsq, repeats, by.x = "species", by.y = "species", all.x = T, all.y = T)
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species", "clade", "rsq", variables)])
# prune tree
# tree <- read.tree("../data/formatted.tree.nwk")
# int <- intersect(dat$species, tree$tip.label)
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr
#extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
models <- models[order(models$AICc), ]
models <- models[cumsum(models$weight) <= 0.95, ]
imp <- sort(sw(models), decreasing = TRUE)
avg <- model.avg(models)
ci <- confint(avg)
ci <- ci[match(names(imp), row.names(ci)), ] #match ci
ci <- as.data.frame(ci)
idx <- which(sign(ci[, 1]) == sign(ci[, 2])) # idx where 0 is not in ci
ci <- ci[idx, ]# subset ci
imp <- imp[idx]# subset importance
if (length(imp) == 0) {
next
}
df <- data.frame(i,
names(imp),
sapply(1:nrow(ci), function(x) mean(unlist(ci[x, ]))),
imp,
ci[, 1],
ci[, 2])
colnames(df) <- c("clade", "model", "estimate", "importance", "lower", "upper")
if (nrow(combined.df) == 0) {
combined.df <- df
} else {
combined.df <- rbind(combined.df, df)
}
}
combined.df <- combined.df[combined.df$importance > 0.5, ]
write.csv(combined.df, "../results/model.averaging.csv", row.names = F)
write.csv(combined.df, "../results/model.averaging.csv", row.names = F)
library(viridis)
combined.df <- read.csv("../results/model.averaging.csv")
# x positions
x <- c()
for (i in 1:length(combined.df$clade)) {
if (is.null(x)) {
x <- c(1)
} else {
x <- c(x, ifelse(combined.df$clade[i] == prev, tail(x, 1) + 0.55, tail(x, 1) + 1))
}
prev <- combined.df$clade[i]
}
imp <- combined.df$importance
# color mapping
res <- 10000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in combined.df$model) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
int.range <- range(as.matrix(combined.df[c("lower", "upper")]))
plot(y = combined.df$estimate, x = x, type = "n", ylim = 1.05 * int.range,
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(min(x)-0.25, max(x)+0.25)) # plot
abline(h = 0, lty = 1, col = "black") # line at y = 0
for (l in -100:100) {
abline(h = l, lty = 2, col = "grey") # line at y = 0
}
segments(x, combined.df$lower, x, combined.df$upper, lwd = 2) # confidence bars
segments(x-0.1, combined.df$upper, x+0.1, combined.df$upper, lwd = 2)
segments(x-0.1, combined.df$lower, x+0.1, combined.df$lower, lwd = 2)
points(x, combined.df$estimate, pch = 16, cex = 1.5, col = cols) # colored points
axis(2) # y axis
axis(2, at = seq(-10, 10, by = 0.5), labels = FALSE, tcl = -0.2)
axis(2, at = seq(-10, 10, by = 1), labels = FALSE, tcl = -0.5)
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged models",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
# filter data
library(data.table)
library(beeswarm)
library(viridis)
dat <- read.csv("../results/rsq.csv")
dat <- na.omit(dat[, c("species", "clade", "rsq", "assem.sz")])
dat$assem.sz <- dat$assem.sz * 1000000
files <- list.files("../results/divsums")
masked.sp <- gsub(".divsum$", "", files)
int <- intersect(masked.sp, dat$species)
dat <- dat[dat$species %in% int, ]
dat <- dat[dat$species %in% c("Bos_taurus", "Peromyscus_maniculatus_bairdii"), ]
# repeat landscape
cols <- c("#e31a1c", "#fb9a99", "#33a02c", "#b2df8a", "#1f78b4", "#a6cee3")
# par(mar = c(3, 4, 1, 7)+0.1)
par(mfrow = c(1, 2))
for (i in dat$species) {
if (i == dat$species[1]) {
par(mar = c(5.1, 4.1, 4.1, 0.8))
} else {
par(mar = c(5.1, 0.7, 4.1, 4.2))
}
species <- i
divsum <- readLines(paste0("../results/divsums/", i, ".divsum"))
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
classes <- c("LINE", "SINE", "LTR", "DNA", "Div", "Unknown")
for (j in classes) {
pat <- paste0("^", j, "(\\.|$)")
headers <- grep(pat, names(divsum), value = TRUE)
sub <- divsum[, headers]
sums <- rowSums(as.matrix(sub)) / dat[dat$species == i, ]$assem.sz * 100
divsum <- divsum[, !names(divsum) %in% headers]
assign(j, sums)
}
Others <- rowSums(as.matrix(divsum)) / dat[dat$species == i, ]$assem.sz * 100
divsum <- data.frame(LINE, SINE, LTR, DNA, Others, Unknown)
divsum <- t(as.matrix(divsum))
divsum <- divsum[, 1:51]
divsum <- divsum[nrow(divsum):1, ]
if (i == dat$species[1]) {
barplot(divsum,
col = cols,
space = 0,
border = NA,
xlab = NA,
ylab = NA,
ylim = c(0, 1.1*3.049599))
axis(1)
} else {
barplot(divsum,
col = cols,
space = 0,
border = NA,
axes = FALSE,
xlab = NA,
ylab = NA,
ylim = c(0, 1.1*3.049599))
axis(1)
pos <- seq(0.3 * 3.049599, 0.95 * 3.049599, length.out = 6)
text(47, pos[6], "LINE", xpd = NA, adj = c(0, 0.5))
text(47, pos[5], "SINE", xpd = NA, adj = c(0, 0.5))
text(47, pos[4], "LTR", xpd = NA, adj = c(0, 0.5))
text(47, pos[3], "DNA", xpd = NA, adj = c(0, 0.5))
text(47, pos[2], "Others", xpd = NA, adj = c(0, 0.5))
text(47, pos[1], "Unclassified", xpd = NA, adj = c(0, 0.5))
points(45, pos[6], pch = 15, col = cols[6], xpd = NA, cex = 1.5)
points(45, pos[5], pch = 15, col = cols[5], xpd = NA, cex = 1.5)
points(45, pos[4], pch = 15, col = cols[4], xpd = NA, cex = 1.5)
points(45, pos[3], pch = 15, col = cols[3], xpd = NA, cex = 1.5)
points(45, pos[2], pch = 15, col = cols[2], xpd = NA, cex = 1.5)
points(45, pos[1], pch = 15, col = cols[1], xpd = NA, cex = 1.5)
}
}
par(mfrow = c(1, 1))
par(mar = c(5.1, 4.1, 4.1, 2.1))
library(viridis)
combined.df <- read.csv("../results/model.averaging.csv")
# x positions
x <- c()
for (i in 1:length(combined.df$clade)) {
if (is.null(x)) {
x <- c(1)
} else {
x <- c(x, ifelse(combined.df$clade[i] == prev, tail(x, 1) + 0.55, tail(x, 1) + 1))
}
prev <- combined.df$clade[i]
}
imp <- combined.df$importance
# color mapping
res <- 10000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in combined.df$model) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
int.range <- range(as.matrix(combined.df[c("lower", "upper")]))
plot(y = combined.df$estimate, x = x, type = "n", ylim = 1.05 * int.range,
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(min(x)-0.25, max(x)+0.25)) # plot
abline(h = 0, lty = 1, col = "black") # line at y = 0
for (l in -100:100) {
abline(h = l, lty = 2, col = "grey") # line at y = 0
}
segments(x, combined.df$lower, x, combined.df$upper, lwd = 2) # confidence bars
segments(x-0.1, combined.df$upper, x+0.1, combined.df$upper, lwd = 2)
segments(x-0.1, combined.df$lower, x+0.1, combined.df$lower, lwd = 2)
points(x, combined.df$estimate, pch = 16, cex = 1.5, col = cols) # colored points
axis(2) # y axis
axis(2, at = seq(-10, 10, by = 0.5), labels = FALSE, tcl = -0.2)
axis(2, at = seq(-10, 10, by = 1), labels = FALSE, tcl = -0.5)
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged models",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
