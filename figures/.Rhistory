xlim = c(30, 200),
col = cols,
cex = 1.5,
pch = 16)
# rsq scatter
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0.8, ]
dat <- dat[dat$clade %in% c("Mammalia", "Sauria", "Actinopterygii"), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
sub <- dat[dat$species %in% c("Bos taurus", "Peromyscus maniculatus bairdii"), ]
sub$genecount <- sub$genecount / 1000
cols <- c("#f4a582", "#0571b0")[as.factor(sub$species)]
par(mar = c(6, 4, 2, 2)+0.1)
plot(x = sub$size.Mbp,
y = sub$genecount,
xlab = NA,
ylab = "Gene count (thousands)",
ylim = c(0.3, 3),
xlim = c(30, 200),
col = cols,
cex = 1.5,
pch = 16)
plot(x = sub$size.Mbp,
y = sub$genecount,
xlab = NA,
ylab = "Gene count (thousands)",
ylim = c(0.3, 3),
xlim = c(30, 200),
col = cols,
cex = 1.5,
pch = 16)
x1 <- sub[sub$species == "Bos taurus", ]$size.Mbp
y1 <- sub[sub$species == "Bos taurus", ]$genecount
model1 <- lm(y1 ~ x1)
abline(model1,
col = "#f4a582",
lwd = 1.5)
x2 <- sub[sub$species == "Peromyscus maniculatus bairdii", ]$size.Mbp
y2 <- sub[sub$species == "Peromyscus maniculatus bairdii", ]$genecount
model2 <- lm(y2 ~ x2)
abline(model2,
col = "#0571b0",
lwd = 1.5)
par(mar = c(5.1, 4.1, 4.1, 2.1))
terms <- c(
"intercept",
"median.trans",
"rep.prop",
"median.trans:rep.prop"
)
df <- read.csv("../results/models.no.chromnum.csv")
names(df) <- c("clade", "thrs", "repeat", "phylosig", "n", "stat", terms, "f2")
# models where every term is either significant or NA
df1 <- df[apply(df[, terms[-1]], 1, function(x) all(is.na(x) | x < 0.05)), ]
# remove models with all NA terms
df1 <- df1[rowSums(is.na(df1[, terms[-1]])) < length(terms[-1]), ]
# filter for significant clade-threshold-repeat combinations
df1 <- df1[df1$stat == "p", ]
hit <- c("clade", "thrs", "repeat")
df1 <- df1[, hit]
# get beta coefficients for significant combinations
df2 <- merge(df, df1, by = intersect(names(df), names(df1)))
df2 <- df2[df2$stat == "beta", ]
df2 <- df2[!df2$`repeat` %in% "rc", ]
df2 <- df2[order(df2$thrs), ]
df2 <- df2[order(df2$`repeat`), ]
df2 <- df2[order(df2$clade), ]
rownames(df2) <- c(1:nrow(df2))
df2 <- df2[df2$thrs >= 0.7 & df2$thrs <= 0.9, ]
#combinations of clades and repeats
df3 <- unique(df2[, c("clade", "repeat"), ])
l <- list()
for (i in 1:nrow(df3)) {
cl <- df3[i, ][[1]]
rep <- df3[i, ][[2]]
sub <- df2[df2$clade == cl, ]
sub <- sub[sub$`repeat` == rep, ]
sub <- sub[, c(8, 9)]
beta <- mean(as.matrix(sub)[which(!is.na(sub))])
l <- c(l, list(c(cl, rep, beta)))
}
df4 <- as.data.frame(do.call(rbind, l))
vec <- as.numeric(df4$V3)
library(viridis)
cols <- viridis(300)
image(1, seq(0, 3, length.out = 300), t(seq(0, 3, length.out = 300)), col = cols, axes = FALSE, xlab = "", ylab = "")
axis(4)
num <- (abs(vec)-min(abs(vec))) / diff(range(abs(vec)))
cols <- viridis(300)
ramp <- colorRamp(cols, interpolate = "linear")
rgb(ramp(num), maxColorValue = 255)
vec
abs(vec)
# Install and load necessary packages
if (!requireNamespace("viridis", quietly = TRUE)) install.packages("viridis")
if (!requireNamespace("scales", quietly = TRUE)) install.packages("scales")
library(viridis)
library(scales)
# Your data vector
vec <- c(1.492454, 21.466283, 9.323701, 2.367490, 1.667414, 1.576235, 2.788643, 1.431416, 1.542669)
# Generate colors using a log-transformed scale
log_colors <- viridis(length(vec))[rank(log(vec))]
# Example of plotting points with log-transformed color scale
plot(vec, pch = 16, col = log_colors, cex = 2, main = "Log-Transformed Color Scale", xlab = "Index", ylab = "Value")
# Optional: Add a legend
legend("topright", legend = signif(range(vec), 2), fill = viridis(2), title = "Log Scale")
# Install and load necessary packages
if (!requireNamespace("viridis", quietly = TRUE)) install.packages("viridis")
if (!requireNamespace("scales", quietly = TRUE)) install.packages("scales")
library(viridis)
library(scales)
# Your data vector
vec <- c(1.492454, 21.466283, 9.323701, 2.367490, 1.667414, 1.576235, 2.788643, 1.431416, 1.542669)
# Define the range of values for the color scale
vec_range <- range(vec)
# Generate a sequence of values for the scale (log-transformed)
scale_values <- seq(log(vec_range[1]), log(vec_range[2]), length.out = 100)
# Generate corresponding colors using viridis
scale_colors <- viridis(length(scale_values))
# Plot a color bar
par(mar = c(5, 1, 1, 5)) # Adjust margins for color bar
image(
1, scale_values, t(as.matrix(scale_values)),
col = scale_colors,
axes = FALSE,
xlab = "",
ylab = "Log Scale",
main = "Color Scale"
)
axis(4, at = log(c(vec_range[1], vec_range[2])), labels = signif(c(vec_range[1], vec_range[2]), 2))
box()
# Add legend (optional, for context)
legend("right", legend = signif(c(vec_range[1], vec_range[2]), 2), fill = c(scale_colors[1], tail(scale_colors, 1)), title = "Value")
# Your data vector
vec <- c(1.492454, 21.466283, 9.323701, 2.367490, 1.667414, 1.576235, 2.788643, 1.431416, 1.542669)
# Define the range of values for the color scale
vec_range <- range(vec)
# Generate a sequence of values for the scale (log-transformed)
scale_values <- seq(log(vec_range[1]), log(vec_range[2]), length.out = 100)
# Generate corresponding colors using viridis
scale_colors <- viridis(length(scale_values))
# Create tick positions on the log scale
tick_positions <- seq(log(vec_range[1]), log(vec_range[2]), length.out = 5)
# Convert log tick positions back to original scale for labeling
tick_labels <- signif(exp(tick_positions), 2)
# Plot the color bar
par(mar = c(5, 1, 1, 5)) # Adjust margins for color bar
image(
1, scale_values, t(as.matrix(scale_values)),
col = scale_colors,
axes = FALSE,
xlab = "",
ylab = "Log Scale",
main = "Color Scale"
)
# Add axis labels at the specified tick positions
axis(4, at = tick_positions, labels = tick_labels)
# Install and load necessary packages
if (!requireNamespace("viridis", quietly = TRUE)) install.packages("viridis")
if (!requireNamespace("scales", quietly = TRUE)) install.packages("scales")
library(viridis)
library(scales)
# Your data vector
vec <- c(1.492454, 21.466283, 9.323701, 2.367490, 1.667414, 1.576235, 2.788643, 1.431416, 1.542669)
# Generate colors using a log-transformed scale
log_colors <- viridis(length(vec))[rank(log(vec))]
log_colors
View(df3)
a1 <- c(900, 900, 800, 800, 700, 700, 200, 200)
a2 <- c(100, 12, 100, 12, 100, 12, 100, 12)
size <- c(900, 900, 800, 800, 700, 700, 200, 200)
genes <- c(100, 12, 100, 12, 100, 12, 100, 12)
df <- data.frame(size, genes)
View(df)
df$density <- df$genes/df$size
View(df)
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
lm(genes ~ size, data = df)
summary(lm(genes ~ size, data = df))$r.squared
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(90, 80, 70, 60, 50, 40, 30, 100)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(450, 80, 70, 60, 50, 40, 30, 100)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(900, 80, 70, 60, 50, 40, 30, 100)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(999, 80, 70, 60, 50, 40, 30, 100)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(9999, 80, 70, 60, 50, 40, 30, 100)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(9999999, 80, 70, 60, 50, 40, 30, 100)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(90, 80, 70, 60, 50, 40, 30, 200)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 100, 100)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 10, 10)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 10, 10)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome,
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 9, 11)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes nearly equally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 7, 13)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes nearly equally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 6, 14)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes nearly equally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 5, 15)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes nearly equally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 1, 19)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tip, allocate genes equally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 1, 19)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tip, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 0, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tip, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 19, 1)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tip, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 19, 1)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes nearly equally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 9, 11)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 1, 19)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes nearly equally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 9, 11)
df <- data.frame(size, genes)
# break the smallest chromosome in the middle, allocate genes nearly equally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 9, 11)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 1, 11)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tips, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 1, 11)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tips, allocate genes equally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 1, 19)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tips, allocate genes equally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 2, 18)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tips, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
# break the smallest chromosome at the tips, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 0, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome at the tips, give smallest fragnemt every gene
size <- c(900, 800, 700, 600, 500, 400, 300, 20, 180)
genes <- c(90, 80, 70, 60, 50, 40, 30, 20, 0)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes nearly equally
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
genes <- c(90, 80, 70, 60, 50, 40, 30, 200)
df <- data.frame(size, genes)
# break the largest chromosome in the middle, allocate genes nearly equally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(400, 500, 80, 70, 60, 50, 40, 30, 200)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes nearly equally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(440, 460, 80, 70, 60, 50, 40, 30, 200)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes nearly equally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(440, 460, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes nearly equally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(45, 45, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes nearly equally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(44, 46, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes unequally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(1, 89, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the smallest chromosome in the middle, allocate genes unequally
size <- c(900, 800, 700, 600, 500, 400, 300, 100, 100)
genes <- c(90, 80, 70, 60, 50, 40, 30, 1, 11)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes unequally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(1, 89, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes unequally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(1, 89, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome in the middle, allocate genes unequally
size <- c(450, 450, 800, 700, 600, 500, 400, 300, 200)
genes <- c(1, 89, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome at the tip, allocate genes equally
size <- c(100, 800, 800, 700, 600, 500, 400, 300, 200)
genes <- c(10, 80, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome at the tip, give smaller fragment more genes
size <- c(100, 800, 800, 700, 600, 500, 400, 300, 200)
genes <- c(5, 85, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome at the tip, give smaller fragment more genes
size <- c(100, 800, 800, 700, 600, 500, 400, 300, 200)
genes <- c(80, 10, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome at the tip, give smaller fragment every gene
size <- c(100, 800, 800, 700, 600, 500, 400, 300, 200)
genes <- c(90, 0, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome at the tip, give smaller fragment no genes
size <- c(100, 800, 800, 700, 600, 500, 400, 300, 200)
genes <- c(0, 90, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome at the tip, give smaller fragment more genes
size <- c(100, 800, 800, 700, 600, 500, 400, 300, 200)
genes <- c(80, 10, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
# break the largest chromosome at the tip, give smaller fragment more genes
size <- c(100, 800, 800, 700, 600, 500, 400, 300, 200)
genes <- c(50, 40, 80, 70, 60, 50, 40, 30, 20)
df <- data.frame(size, genes)
df$density <- df$genes/df$size
summary(lm(genes ~ size, data = df))$r.squared
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0, ]
i <- unique(dat$species)[1]
sub <- dat[dat$species == i, ]
View(sub)
dens <- mean(sub$genedens)
dens
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0, ]
dens <- c()
for (i in  unique(dat$species)) {
sub <- dat[dat$species == i, ]
dens <- c(dens, mean(sub$genedens))
}
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0, ]
dens <- c()
for (i in  unique(dat$species)) {
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0, ]
dens <- c()
for (i in  unique(dat$species)) {
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0, ]
dens <- c()
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0, ]
dens <- c()
for (i in  unique(dat$species)) {
sub <- dat[dat$species == i, ]
dens <- c(dens, setNames(mean(sub$genedens), i))
}
# zero gene density variation
size <- c(900, 800, 700, 600, 500, 400, 300, 200)
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0, ]
dens <- c()
i <- unique(dat$species)[1]
i <- unique(dat$species)[1]
sub <- dat[dat$species == i, ]
dens <- c(dens, setNames(mean(sub$genedens), i))
dens
dat <- read.csv("../results/parsed.csv")
dat <- dat[dat$thrs == 0, ]
dens <- c()
for (i in  unique(dat$species)) {
sub <- dat[dat$species == i, ]
dens <- c(dens, setNames(mean(sub$genedens), unique(sub$clade)))
}
dens
which(names(dens) == "Mammalia")
dens[which(names(dens) == "Mammalia")]
for (j in unique(names(dens))) {
x <- mean(dens[which(names(dens) == j)])
print(j)
print(x)
}
