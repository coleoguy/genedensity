# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <<- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <<- glm(reformulate(all.terms, response = "rsq"), data = dat)
model <- global.model
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
# no pgls
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
i <- "All"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
# no pgls
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(parallel)
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
# no pgls
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(parallel)
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
i <- "All"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
cl <- makeCluster(round(0.8 * detectCores()))
clusterExport(cl, varlist = c("sw.test", "lambda.test", "global.model", "dat", "subset.expr"))
clusterEvalQ(cl, library(MuMIn))
clusterEvalQ(cl, library(ape))
clusterEvalQ(cl, library(phytools))
# dredge
models <- dredge(global.model,
subset = subset.expr,
extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
# no pgls
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(parallel)
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
i <- "Sauria"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
View(dat)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
best_model <- get.models(model, 1)[[1]]
best_model <- get.models(models, 1)[[1]]
View(best_model)
resid(best_model)
plot(dat$rsq, resid(best_model))
View(models)
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
library(MuMIn)
library(viridis)
models <- readRDS("../results/sauria.rds")
models <- models[-1]
View(models)
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
imp <- sort(sw(models), decreasing = T) # importance
terms <- names(imp) # terms
est <- coef(avg)[match(terms, names(coef(avg)))] # parameter estimates
int <- as.data.frame(confint(avg, full = FALSE)) [terms, ] # confidence intervals
x <- 1:length(terms) # x positions
# color mapping
res <- 1000 # resolution
palette <- viridis(res, begin = 0, end = 0.8, option = "A") # palette
cols <- palette[round(((imp - min(imp)) / diff(range(imp))) * (res-1)) + 1] # colors
# x labels
labels <- c()
for (i in terms) {
rep <- toupper(regmatches(i, regexpr("(?<=\\.)[a-zA-Z]+", i, perl = TRUE)))
if (rep == "OTHERS") {
rep <- "Others"
} else if (rep == "UNKNOWN") {
rep <- "Unidtf"
}
if (grepl(":", i)) {
type <- "int."
} else if (sub("\\..*", "", i) == "prop") {
type <- "prop."
} else {
type <- "age"
}
labels <- c(labels, paste(rep, type))
}
par(oma = c(0, 0, 3, 0))
layout(matrix(1:2, ncol = 2), widths = c(4, 1)) # make 2 plots
# main plot
par(mar = c(8, 4, 1, 0))
plot(y = est, x = x, type = "n", ylim = 1.05 * range(int),
ylab = "Parameter estimate", xlab = NA, axes = FALSE,
xlim = c(0.75, length(terms) + 0.2)) # plot
abline(h = 0, lty = 2, col = "gray") # line at y = 0
segments(x, int[, 1], x, int[, 2], lwd = 2) # confidence bars
points(x, est, pch = 16, col = cols) # colored points
axis(2) # y axis
axis(1, at = x, labels = labels, las = 2) # x axis
box()
# color bar
par(mar = c(8, 1, 1, 4))
height <- seq(min(imp), max(imp), length.out = res + 1) # y values
z <- matrix(seq(min(imp), max(imp), length.out = res), nrow = 1, ncol = res) # color gradient
image(x = c(0, 1), y = height, z = z, col = palette,
axes = FALSE, xlab = "", ylab = "") # make color bar
ticks <- seq(min(imp), max(imp), length.out = 5) # ticks
axis(4, at = ticks, labels = round(ticks, 2), las = 1) # y axis
# title
mtext("Parameter estimates for averaged model of reptiles",
outer = TRUE, cex = 1.1, line = 0, font = 2, family = "sans",
adj = 0.35)
par(mar = c(5, 4, 4, 2) + 0.1)
length(which(models$lambda.p >= 0.05))
View(models)
plot(models$weight, models$lambda.p)
# no pgls
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(parallel)
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
i <- "Mammalia"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
cl <- makeCluster(round(0.3 * detectCores()))
clusterExport(cl, varlist = c("sw.test", "lambda.test", "global.model", "dat", "subset.expr"))
clusterEvalQ(cl, library(MuMIn))
clusterEvalQ(cl, library(ape))
clusterEvalQ(cl, library(phytools))
# dredge
models <- dredge(global.model,
subset = subset.expr,
extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
stopCluster(cl)
# no pgls
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(parallel)
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
i <- "Mammalia"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
stopCluster(cl)
i <-- "Mammalia"
i <- "Mammalia"
# no pgls
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(parallel)
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
res <- setNames(residuals(model), dat$species)
lambda.p <- phylosig(tree, res, method = "lambda", test = TRUE, niter = 100)$P
return(lambda.p)
}
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
# cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- glm(reformulate(all.terms, response = "rsq"), data = dat)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
# write
saveRDS(models, paste0("../results/", tolower(i), ".rds"))
