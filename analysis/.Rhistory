col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$median.trans * dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$chromnum.1n
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$chromnum.1n), max(dat$median.trans * dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
sum(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + totalrep.prop + totalrep.prop:chromnum.1n, weights = dat$w, data = dat)
# convert to plotting format
x <- seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 100)
y <- seq(min(dat$chromnum.1n), max(dat$chromnum.1n), length.out = 100)
grid <- expand.grid(totalrep.prop = x, chromnum.1n = y)
grid$rsq <- predict(model, newdata = grid, type = "response")
z <- matrix(grid$rsq, nrow = length(x), ncol = length(y))
# plot
original <- par(no.readonly = TRUE)
par(mar = c(4, 4, 3, 8) + 0.1)
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
mtext("Expansion Recency", side=1, line=2.5)
mtext("Chromosome Number", side=2, line=2.5)
contour(x,
y,
z,
add = TRUE,
col = "black",
lwd = 1,
drawlabels = FALSE)
par(new = TRUE)
par(mar = c(4, 25, 3, 6))
z_range <- seq(min(z), max(z), length.out = 100)
image(1,
z_range,
t(matrix(z_range)),
col = viridis(100),
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
axis(4, at = pretty(z_range), labels = round(pretty(z_range), 2))
mtext("Predicted Consistency", side=4, line=2.5)
par(mar = c(5.1, 4.1, 4.1, 2.1))
summary(model)
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# subset data
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# color by weights
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$chromnum.1n, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$chromnum.1n))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$median.trans * dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$chromnum.1n
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$chromnum.1n), max(dat$median.trans * dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
sum(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
# convert to plotting format
x <- seq(min(dat$median.trans), max(dat$median.trans), length.out = 100)
y <- seq(min(dat$chromnum.1n), max(dat$chromnum.1n), length.out = 100)
grid <- expand.grid(median.trans = x, chromnum.1n = y)
grid$rsq <- predict(model, newdata = grid, type = "response")
z <- matrix(grid$rsq, nrow = length(x), ncol = length(y))
# plot
original <- par(no.readonly = TRUE)
par(mar = c(4, 4, 3, 8) + 0.1)
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
mtext("Expansion Recency", side=1, line=2.5)
mtext("Chromosome Number", side=2, line=2.5)
contour(x,
y,
z,
add = TRUE,
col = "black",
lwd = 1,
drawlabels = FALSE)
par(new = TRUE)
par(mar = c(4, 25, 3, 6))
z_range <- seq(min(z), max(z), length.out = 100)
image(1,
z_range,
t(matrix(z_range)),
col = viridis(100),
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
axis(4, at = pretty(z_range), labels = round(pretty(z_range), 2))
mtext("Predicted Consistency", side=4, line=2.5)
par(mar = c(5.1, 4.1, 4.1, 2.1))
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# subset data
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# color by weights
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$chromnum.1n, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$chromnum.1n))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$median.trans * dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$chromnum.1n
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$chromnum.1n), max(dat$median.trans * dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
sum(dat$w)
# model
model <- glm(rsq ~ median.trans:chromnum.1n, weights = dat$w, data = dat)
# convert to plotting format
x <- seq(min(dat$median.trans), max(dat$median.trans), length.out = 100)
y <- seq(min(dat$chromnum.1n), max(dat$chromnum.1n), length.out = 100)
grid <- expand.grid(median.trans = x, chromnum.1n = y)
grid$rsq <- predict(model, newdata = grid, type = "response")
z <- matrix(grid$rsq, nrow = length(x), ncol = length(y))
# plot
original <- par(no.readonly = TRUE)
par(mar = c(4, 4, 3, 8) + 0.1)
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
mtext("Expansion Recency", side=1, line=2.5)
mtext("Chromosome Number", side=2, line=2.5)
contour(x,
y,
z,
add = TRUE,
col = "black",
lwd = 1,
drawlabels = FALSE)
par(new = TRUE)
par(mar = c(4, 25, 3, 6))
z_range <- seq(min(z), max(z), length.out = 100)
image(1,
z_range,
t(matrix(z_range)),
col = viridis(100),
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
axis(4, at = pretty(z_range), labels = round(pretty(z_range), 2))
mtext("Predicted Consistency", side=4, line=2.5)
par(mar = c(5.1, 4.1, 4.1, 2.1))
summary(model)
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# subset data
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# color by weights
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$chromnum.1n, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$chromnum.1n))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$median.trans * dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$chromnum.1n
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$chromnum.1n), max(dat$median.trans * dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
sum(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
# convert to plotting format
x <- seq(min(dat$median.trans), max(dat$median.trans), length.out = 100)
y <- seq(min(dat$chromnum.1n), max(dat$chromnum.1n), length.out = 100)
grid <- expand.grid(median.trans = x, chromnum.1n = y)
grid$rsq <- predict(model, newdata = grid, type = "response")
z <- matrix(grid$rsq, nrow = length(x), ncol = length(y))
# plot
original <- par(no.readonly = TRUE)
par(mar = c(4, 4, 3, 8) + 0.1)
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
mtext("Expansion Recency", side=1, line=2.5)
mtext("Chromosome Number", side=2, line=2.5)
contour(x,
y,
z,
add = TRUE,
col = "black",
lwd = 1,
drawlabels = FALSE)
par(new = TRUE)
par(mar = c(4, 25, 3, 6))
z_range <- seq(min(z), max(z), length.out = 100)
image(1,
z_range,
t(matrix(z_range)),
col = viridis(100),
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
axis(4, at = pretty(z_range), labels = round(pretty(z_range), 2))
mtext("Predicted Consistency", side=4, line=2.5)
par(mar = c(5.1, 4.1, 4.1, 2.1))
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# subset data
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# color by weights
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
plot(dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$chromnum.1n, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$chromnum.1n))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
hist(dat$w)
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
sum(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
hist(w)
hist(dat$w)
summary(model)
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# subset data
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# color by weights
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$chromnum.1n, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$chromnum.1n))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$median.trans * dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$chromnum.1n
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$chromnum.1n), max(dat$median.trans * dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
sum(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
summary(model)
summary(step(glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
))
# Fit the full model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n,
weights = dat$w,
data = dat)
# Fit the null model (intercept only)
null_model <- glm(rsq ~ 1,
weights = dat$w,
data = dat)
# Calculate the deviance difference
deviance_diff <- null_model$deviance - model$deviance
df_diff <- null_model$df.residual - model$df.residual
# Residual deviance and degrees of freedom for the full model
residual_deviance <- model$deviance
residual_df <- model$df.residual
# F-statistic calculation
f_value <- (deviance_diff / df_diff) / (residual_deviance / residual_df)
# Display the F-value
f_value
# Calculate pseudo-R² (McFadden's)
pseudo_r2 <- 1 - (model$deviance / null_model$deviance)
pseudo_r2
