type = "n",
xlim = c(0, 1.1*max.chromsize),
ylim = c(0, chromnum),
xlab = "Size (Mb)",
ylab = "Chromosomes",
axes = FALSE,
main = i)
axis(1)
chromcount <- 1
for (j in dat[dat$species == i, ]$name) { # for each chromosome
chrom <- annot[annot[, 1] == j, ]
end <- dat[dat$species == i & dat$name == j, ]$size.Mbp
# rect(ybottom = chromcount - 0.4,
# xleft = 0,
# ytop = chromcount + 0.4,
# xright = end,
# col = "white",
# border = "black")
if (chromcount %% 2 == 0) {
text(-0.01*max.chromsize, chromcount, j, cex = 0.6, xpd = NA, adj = c(1, 0.5))
} else {
text(-0.03*max.chromsize, chromcount, j, cex = 0.6, xpd = NA, adj = c(1, 0.5))
}
mid <- chrom[, 4]+((chrom[, 5]-chrom[, 4])/2)
b <- rep(chromcount - 0.4, nrow(chrom))
l <- mid - 0.00004*end
t <- rep(chromcount + 0.4, nrow(chrom))
r <- mid + 0.00004*end
x <- c(rbind(l, r, r, l, NA))
y <- c(rbind(b, b, t, t, NA))
polygon(x, y, col = "black", border = NA)
chromcount <- chromcount + 1
}
}
# visualize gene start positions
dat <- read.csv("../results/parsed.csv")
sp <- gsub("_", " ", sub("\\..*", "", list.files("../data/annot")))
i <- sp[2]
annot <- read.table(paste0("../data/annot/", gsub(" ", "_", i), ".gtf"),
header = TRUE,
sep = "\t")
annot <- annot[annot[, 3] == "gene", ]
annot[, c(4, 5)] <- annot[, c(4, 5)] / 1000000
chromnum <- nrow(dat[dat$species == i, ])
max.chromsize <- max(dat[dat$species == i, ]$size.Mbp)
plot(1,
type = "n",
xlim = c(0, 1.1*max.chromsize),
ylim = c(0, chromnum),
xlab = "Size (Mb)",
ylab = "Chromosomes",
axes = FALSE,
main = i)
axis(1)
chromcount <- 1
for (j in dat[dat$species == i, ]$name) { # for each chromosome
chrom <- annot[annot[, 1] == j, ]
end <- dat[dat$species == i & dat$name == j, ]$size.Mbp
# rect(ybottom = chromcount - 0.4,
# xleft = 0,
# ytop = chromcount + 0.4,
# xright = end,
# col = "white",
# border = "black")
if (chromcount %% 2 == 0) {
text(-0.01*max.chromsize, chromcount, j, cex = 0.6, xpd = NA, adj = c(1, 0.5))
} else {
text(-0.03*max.chromsize, chromcount, j, cex = 0.6, xpd = NA, adj = c(1, 0.5))
}
mid <- chrom[, 4]+((chrom[, 5]-chrom[, 4])/2)
b <- rep(chromcount - 0.4, nrow(chrom))
l <- mid - 0.00004*end
t <- rep(chromcount + 0.4, nrow(chrom))
r <- mid + 0.00004*end
x <- c(rbind(l, r, r, l, NA))
y <- c(rbind(b, b, t, t, NA))
polygon(x, y, col = "black", border = NA)
chromcount <- chromcount + 1
}
# visualize gene start positions
dat <- read.csv("../results/parsed.csv")
sp <- gsub("_", " ", sub("\\..*", "", list.files("../data/annot")))
i <- sp[3]
annot <- read.table(paste0("../data/annot/", gsub(" ", "_", i), ".gtf"),
header = TRUE,
sep = "\t")
annot <- annot[annot[, 3] == "gene", ]
annot[, c(4, 5)] <- annot[, c(4, 5)] / 1000000
chromnum <- nrow(dat[dat$species == i, ])
max.chromsize <- max(dat[dat$species == i, ]$size.Mbp)
plot(1,
type = "n",
xlim = c(0, 1.1*max.chromsize),
ylim = c(0, chromnum),
xlab = "Size (Mb)",
ylab = "Chromosomes",
axes = FALSE,
main = i)
axis(1)
chromcount <- 1
for (j in dat[dat$species == i, ]$name) { # for each chromosome
chrom <- annot[annot[, 1] == j, ]
end <- dat[dat$species == i & dat$name == j, ]$size.Mbp
# rect(ybottom = chromcount - 0.4,
# xleft = 0,
# ytop = chromcount + 0.4,
# xright = end,
# col = "white",
# border = "black")
if (chromcount %% 2 == 0) {
text(-0.01*max.chromsize, chromcount, j, cex = 0.6, xpd = NA, adj = c(1, 0.5))
} else {
text(-0.03*max.chromsize, chromcount, j, cex = 0.6, xpd = NA, adj = c(1, 0.5))
}
mid <- chrom[, 4]+((chrom[, 5]-chrom[, 4])/2)
b <- rep(chromcount - 0.4, nrow(chrom))
l <- mid - 0.00004*end
t <- rep(chromcount + 0.4, nrow(chrom))
r <- mid + 0.00004*end
x <- c(rbind(l, r, r, l, NA))
y <- c(rbind(b, b, t, t, NA))
polygon(x, y, col = "black", border = NA)
chromcount <- chromcount + 1
}
# visualize gene start positions
dat <- read.csv("../results/parsed.csv")
sp <- gsub("_", " ", sub("\\..*", "", list.files("../data/annot")))
i <- sp[4]
annot <- read.table(paste0("../data/annot/", gsub(" ", "_", i), ".gtf"),
header = TRUE,
sep = "\t")
annot <- annot[annot[, 3] == "gene", ]
annot[, c(4, 5)] <- annot[, c(4, 5)] / 1000000
chromnum <- nrow(dat[dat$species == i, ])
max.chromsize <- max(dat[dat$species == i, ]$size.Mbp)
plot(1,
type = "n",
xlim = c(0, 1.1*max.chromsize),
ylim = c(0, chromnum),
xlab = "Size (Mb)",
ylab = "Chromosomes",
axes = FALSE,
main = i)
axis(1)
chromcount <- 1
for (j in dat[dat$species == i, ]$name) { # for each chromosome
chrom <- annot[annot[, 1] == j, ]
end <- dat[dat$species == i & dat$name == j, ]$size.Mbp
# rect(ybottom = chromcount - 0.4,
# xleft = 0,
# ytop = chromcount + 0.4,
# xright = end,
# col = "white",
# border = "black")
if (chromcount %% 2 == 0) {
text(-0.01*max.chromsize, chromcount, j, cex = 0.6, xpd = NA, adj = c(1, 0.5))
} else {
text(-0.03*max.chromsize, chromcount, j, cex = 0.6, xpd = NA, adj = c(1, 0.5))
}
mid <- chrom[, 4]+((chrom[, 5]-chrom[, 4])/2)
b <- rep(chromcount - 0.4, nrow(chrom))
l <- mid - 0.00004*end
t <- rep(chromcount + 0.4, nrow(chrom))
r <- mid + 0.00004*end
x <- c(rbind(l, r, r, l, NA))
y <- c(rbind(b, b, t, t, NA))
polygon(x, y, col = "black", border = NA)
chromcount <- chromcount + 1
}
dat <- read.csv("../results/parsed.csv")
View(dat)
dat <- dat[!is.na(dat$chromnum.1n), ]
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n), ]
i <- unique(dat$species)[1]
sub <- dat[dat$species == i, ]
unique(dat$species)[96]
unique(dat$species)[97]
res <- resid(glm(dat$genecount ~ dat$size.Mbp))
glm(abs(res) ~ sub$size.Mbp)
abs(res)
glm(abs(res) ~ sub$size.Mbp)
length(res)
res <- resid(glm(sub$genecount ~ sub$size.Mbp))
glm(abs(res) ~ sub$size.Mbp)
summary(glm(abs(res) ~ sub$size.Mbp))
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n), ]
df <- data.frame()
for (i in unique(dat$species)) {
species <- i
clade <- unique(sub$clade)
sub <- dat[dat$species == i, ]
res <- resid(glm(sub$genecount ~ sub$size.Mbp))
b <- summary(glm(abs(res) ~ sub$size.Mbp))$coefficients[2, 1]
p <- summary(glm(abs(res) ~ sub$size.Mbp))$coefficients[2, 4]
df <- rbind(df, c(species, clade, b, p))
}
View(df)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n), ]
df <- data.frame()
for (i in unique(dat$species)) {
species <- i
clade <- unique(sub$clade)
sub <- dat[dat$species == i, ]
res <- resid(glm(sub$genecount ~ sub$size.Mbp))
b <- summary(glm(abs(res) ~ sub$size.Mbp))$coefficients[2, 1]
p <- summary(glm(abs(res) ~ sub$size.Mbp))$coefficients[2, 4]
df <- rbind(df, data.frame(species, clade, b, p))
}
species <- i
clade <- unique(sub$clade)
sub <- dat[dat$species == i, ]
clade <- unique(sub$clade)
res <- resid(glm(sub$genecount ~ sub$size.Mbp))
b <- summary(glm(abs(res) ~ sub$size.Mbp))$coefficients[2, 1]
p <- summary(glm(abs(res) ~ sub$size.Mbp))$coefficients[2, 4]
df <- rbind(df, data.frame(species, clade, b, p))
View(df)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n), ]
df <- data.frame()
for (i in unique(dat$species)) {
species <- i
sub <- dat[dat$species == i, ]
clade <- unique(sub$clade)
res <- resid(glm(sub$genecount ~ sub$size.Mbp))
b <- summary(glm(abs(res) ~ sub$size.Mbp))$coefficients[2, 1]
p <- summary(glm(abs(res) ~ sub$size.Mbp))$coefficients[2, 4]
df <- rbind(df, data.frame(species, clade, b, p))
}
View(dat)
df <- df[df$p < 0.05, ]
View(df)
View(df)
# visualize gene start positions
dat <- read.csv("../results/parsed.csv")
sp <- gsub("_", " ", sub("\\..*", "", list.files("../data/annot")))
# load chromosome numbers
chromnums <- read.csv(paste0("../data/data.csv"))
View(chromnums)
dat <- read.csv("../data/data.csv")
# combine raw contig results
library(data.table)
# dir <- "../results/individual_species_results"
dir <- "../results/chromlevel"
files <- paste0(dir, "/",  list.files(dir))
contigs <- lapply(files, fread)
contigs <- as.data.frame(rbindlist((contigs), fill = TRUE))
df <- data.frame()
# contig sum/assembly size ratio threshold
# for (thrs in seq(from = 0, to = 0.9, by = 0.05)) {
for (thrs in c(0.95)) {
# remove species if sum of contig sizes is not within some multiple of assembly size
parsed <- data.frame()
for (z in unique(contigs$species)) {
sub <- contigs[contigs$species == z, ]
cont <- sum(sub$size.Mbp)
total <- contigs[contigs$species == z, ]$asmblysize[1]
if (cont/total >= thrs) {
parsed <- rbind(parsed, sub)
}
}
# calculate stats based on parsed results
sp <- unique(parsed$species)
for (species in sp) {
sub <- parsed[which(parsed$species == species), ]
# fit <- summary(glm(sub$genecount ~ sub$size.Mbp))
# beta <- fit$coefficients[2, 1]
# pval.beta <- fit$coefficients[2, 4]
rsq <- summary(lm(sub$genecount ~ sub$size.Mbp))$r.squared
# weightmean <- sum(sub$genedens * sub$size.Mbp) / sum(sub$size.Mbp)
# weightsd <- sqrt(sum(sub$size.Mbp * (sub$genedens - weightmean)^2) / sum(sub$size.Mbp))
# weightcv <- weightsd / weightmean
stats <- data.frame(species, rsq, thrs)
sub <- merge(sub, stats, by = "species", all = TRUE)
sub <- merge(dat[dat$species == species, ], sub, by = "species", all = TRUE)
df <- rbind(df, sub)
}
}
#assign clades
df$clade <- df$class
df[df$clade %in% "Aves", ]$clade <- "Sauria"
df[df$clade %in% "Reptilia", ]$clade <- "Sauria"
df[!(df$clade %in% c("Actinopterygii", "Mammalia", "Sauria")), ]$clade <- "Others"
# reorder columns
df <- df[, c(18, 1, 19, 2:11, 16:17, 12:15)]
dat <- read.csv("../data/data.csv")
# combine raw contig results
library(data.table)
# dir <- "../results/individual_species_results"
dir <- "../results/chromlevel"
files <- paste0(dir, "/",  list.files(dir))
contigs <- lapply(files, fread)
contigs <- as.data.frame(rbindlist((contigs), fill = TRUE))
df <- data.frame()
# contig sum/assembly size ratio threshold
# for (thrs in seq(from = 0, to = 0.9, by = 0.05)) {
for (thrs in c(0.95)) {
# remove species if sum of contig sizes is not within some multiple of assembly size
parsed <- data.frame()
for (z in unique(contigs$species)) {
sub <- contigs[contigs$species == z, ]
cont <- sum(sub$size.Mbp)
total <- contigs[contigs$species == z, ]$asmblysize[1]
if (cont/total >= thrs) {
parsed <- rbind(parsed, sub)
}
}
# calculate stats based on parsed results
sp <- unique(parsed$species)
for (species in sp) {
sub <- parsed[which(parsed$species == species), ]
# fit <- summary(glm(sub$genecount ~ sub$size.Mbp))
# beta <- fit$coefficients[2, 1]
# pval.beta <- fit$coefficients[2, 4]
rsq <- summary(lm(sub$genecount ~ sub$size.Mbp))$r.squared
# weightmean <- sum(sub$genedens * sub$size.Mbp) / sum(sub$size.Mbp)
# weightsd <- sqrt(sum(sub$size.Mbp * (sub$genedens - weightmean)^2) / sum(sub$size.Mbp))
# weightcv <- weightsd / weightmean
stats <- data.frame(species, rsq, thrs)
sub <- merge(sub, stats, by = "species", all = TRUE)
sub <- merge(dat[dat$species == species, ], sub, by = "species", all = TRUE)
df <- rbind(df, sub)
}
}
#assign clades
df$clade <- df$class
df[df$clade %in% "Aves", ]$clade <- "Sauria"
df[df$clade %in% "Reptilia", ]$clade <- "Sauria"
df[!(df$clade %in% c("Actinopterygii", "Mammalia", "Sauria")), ]$clade <- "Others"
# reorder columns
df <- df[, c(18, 1, 19, 2:11, 16:17, 12:15)]
View(df)
unique(df$species)
# write csv
write.csv(df, "../results/parsed.csv", row.names = FALSE)
# load stuff in
library(ape)
library(dispRity)
source("../analysis/functions.R")
dat <- read.csv("../results/parsed.csv")
tree <- read.tree("../data/chordates_species.nwk")
# format and prune tree
sp <- unique(dat$species)
spf <- sub("^([^_]*_[^_]*)_.*", "\\1", gsub(" ", "_", sp))
sp.intersect <- intersect(tree$tip.label, spf)
# load stuff in
library(ape)
library(dispRity)
source("../analysis/functions.R")
dat <- read.csv("../results/parsed.csv")
tree <- read.tree("../data/chordates_species.nwk")
# format and prune tree
sp <- unique(dat$species)
spf <- sub("^([^_]*_[^_]*)_.*", "\\1", gsub(" ", "_", sp))
sp.intersect <- intersect(tree$tip.label, spf)
pruned.tree <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% sp.intersect)])
spn <- sp[match(spf[match(pruned.tree$tip.label, spf)], spf)]
pruned.tree$tip.label <- spn
pruned.tree$tip.label
# load stuff in
library(ape)
library(dispRity)
# load stuff in
library(ape)
library(dispRity)
source("../analysis/functions.R")
dat <- read.csv("../results/data.csv")
# load stuff in
library(ape)
library(dispRity)
source("../analysis/functions.R")
dat <- read.csv("../data/data.csv")
tree <- read.tree("../data/chordates_species.nwk")
# format and prune tree
sp <- unique(dat$species)
spf <- sub("^([^_]*_[^_]*)_.*", "\\1", gsub(" ", "_", sp))
sp.intersect <- intersect(tree$tip.label, spf)
pruned.tree <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% sp.intersect)])
spn <- sp[match(spf[match(pruned.tree$tip.label, spf)], spf)]
pruned.tree$tip.label <- spn
pruned.tree$tip.label
write.tree(pruned.tree, file = paste0("../data/formatted_tree.nwk"))
dat <- read.csv("../results/parsed.csv")
files <- list.files("../results/divsums")
sp <- gsub("_", " ", gsub(".divsum$", "", files))
asmbsz <- dat[!duplicated(dat$species), ]
asmbsz <- asmbsz[asmbsz$species %in% sp, ]
asmbsz <- setNames(asmbsz$asmblysize.Mbp*1000000, asmbsz$species)
repstats <- data.frame()
for (i in 1:length(sp)) {
species <- sp[i]
# read text file into lines
divsum <- readLines(paste0("../results/divsums/", files[i]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum) + 1
# condense relevant lines into a table
divsum <- divsum[start.index:length(divsum)]
divsum <- read.table(textConnection(divsum),
sep = " ",
header = TRUE)
# drop columns with all NA
divsum <- divsum[-c(which(sapply(divsum, function(col) all(is.na(col)))))]
# condense table
classes <- c("LINE", "SINE", "LTR", "DNA", "RC", "Div", "Unknown")
for (j in classes) {
pat <- paste0("^", j, "(\\.|$)")
headers <- grep(pat, names(divsum), value = TRUE)
sub <- divsum[, headers]
sums <- rowSums(as.matrix(sub))
divsum <- divsum[, !names(divsum) %in% headers]
assign(j, sums)
}
Others <- rowSums(as.matrix(divsum))
divsum <- data.frame(Div, LINE, SINE, LTR, DNA, RC, Others, Unknown)
# all repeat total and median
rep.bp <- rowSums(divsum[, !names(divsum) == "Div"])
total.rep.pct <- sum((rep.bp / asmbsz[sp[i]]) * 100)
total.rep.median <- which(cumsum(rep.bp) > sum(rep.bp)/2)[1]
for (k in classes) {
assign(paste0(tolower(k), ".rep.pct"), sum(divsum[k] /  asmbsz[sp[i]] * 100))
assign(paste0(tolower(k), ".rep.median"), which(cumsum(divsum[k]) > sum(divsum[k])/2)[1])
}
# build dataframe
df <- data.frame(species,
total.rep.pct,
total.rep.median,
line.rep.pct,
line.rep.median,
sine.rep.pct,
sine.rep.median,
ltr.rep.pct,
ltr.rep.median,
dna.rep.pct,
dna.rep.median,
rc.rep.pct,
rc.rep.median
)
repstats <- rbind(repstats, df)
}
dat <- read.csv("../results/parsed.csv")
files <- list.files("../results/divsums")
sp <- gsub("_", " ", gsub(".divsum$", "", files))
asmbsz <- dat[!duplicated(dat$species), ]
asmbsz <- asmbsz[asmbsz$species %in% sp, ]
asmbsz <- setNames(asmbsz$asmblysize.Mbp*1000000, asmbsz$species)
dat <- read.csv("../results/parsed.csv")
files <- list.files("../results/divsums")
library(viridis)
# visualize gene density variation on either half of chromosomes
dat <- read.csv("../results/parsed.csv")
?write.csv
# calculate CVs for gene positions on the 0.5n largest chromosomes and calculate
# the median of those CVs
dat <- read.csv("../results/parsed.csv")
sp <- gsub("_", " ", sub("\\..*", "", list.files("../data/annot")))
df <- data.frame()
for (i in sp) { # for each species
df1 <- data.frame()
annot <- read.table(paste0("../data/annot/", gsub(" ", "_", i), ".gtf"),
header = TRUE,
sep = "\t")
annot <- annot[annot[, 3] == "gene", ]
annot[, c(4, 5)] <- annot[, c(4, 5)] / 1000000
chromnum <- nrow(dat[dat$species == i, ])
if (chromnum == 0) {
next
}
top <- round(0.5 * chromnum, 0)
for (j in dat[dat$species == i, ]$name[1:top]) { # for each chromosome
chrom <- annot[annot[, 1] == j, ]
end <- dat[dat$species == i & dat$name == j, ]$size.Mbp
mid <- chrom[, 4]+((chrom[, 5]-chrom[, 4])/2)
cv <- sd(mid) / mean(mid)
df1 <- rbind(df1, data.frame(i, cv))
}
med <- median(df1$cv)
df <- rbind(df, data.frame(i, med))
}
l <- merge(dat, df, by.y = "i", by.x = "species", all.y = TRUE)
View(l)
l <- merge(dat, df, by.y = "i", by.x = "species", all.x = TRUE)
length(unique(dat$species))
dat <- merge(dat, df, by.y = "i", by.x = "species", all.x = TRUE)
?write.csv
write.csv(dat, "../results/parsed.csv", row.names = FALSE)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[, c("species", "med", "rsq")]
plot(dat$med, dat$rsq)
model <- glm(rsq ~ med, data = dat)
summary(model)
library(phytools)
library(caper)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
res <- setNames(resid(model), dat$species)
phylosig(pruned.tree,
res,
method = "lambda",
test = TRUE,
nsim = 10000)
cd <- comparative.data(pruned.tree,
dat,
names.col = "species",
vcv = TRUE)
summary(pgls(rsq ~ med, data = cd))
