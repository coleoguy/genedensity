library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
if(length(miss) > 0) for(col in miss) df[[col]] <- NA
df[, cols, drop = FALSE]
}
combined.models <- NULL
combined.coefTables <- list()
for(i in 1:27){
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types, $names, and $class
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
cur.attr$class <- c("model.selection", "data.frame")
# add missing columns and sort by the order of cols
cur.models <- fix_columns(as.data.frame(cur.models), cols)
cur.models$rn <- paste(i, rownames(cur.models), sep = "_")
# preserve ordering of coefTables
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = "_")
combined.coefTables <- c(combined.coefTables, cur.coefTables)
combined.models <- if(is.null(combined.models)) cur.models else rbind(combined.models, cur.models)
}
View(combined.models)
combined.models$rn
# rownames
rownames(combined.models) <- combined.models$rn
combined.models$rn <- NULL
View(combined.models)
l <- attributes(combined.models)
View(l)
# Deduplicate based on parameter inclusion pattern (columns 1:19).
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
pattern
unique.idx <- !duplicated(pattern)
unique.idx
# Deduplicate based on parameter inclusion pattern (columns 1:19).
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
unique.idx <- !duplicated(pattern)
final.model <- combined.models[unique.idx, ]
final.coefTables <- combined.coefTables[!duplicated(pattern)]
# Assign numeric row names.
new_names <- as.character(seq_len(nrow(final.model)))
rownames(final.model) <- new_names
names(final.coefTables) <- new_names
as.character(seq_len(nrow(final.model)))
# Set final necessary attributes.
attr(final.model, "model.calls") <- NULL
attr(final.model, "coefTables") <- final.coefTables
attr(final.model, "column.types") <- ctypes
attr(final.model, "names") <- cols
class(final.model) <- c("model.selection", "data.frame")
terms_vec <- cols[1:19]
attr(terms_vec, "interceptLabel") <- "(Intercept)"
attr(final.model, "terms") <- terms_vec
library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
if(length(miss) > 0) for(col in miss) df[[col]] <- NA
df[, cols, drop = FALSE]
}
combined.models <- NULL
combined.coefTables <- list()
for(i in 1:27){
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types, $names, and $class
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
#cur.attr$class <- c("model.selection", "data.frame")
# add missing columns and sort by the order of cols
cur.models <- fix_columns(as.data.frame(cur.models), cols)
cur.models$rn <- paste(i, rownames(cur.models), sep = "_")
# preserve ordering of coefTables
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = "_")
combined.coefTables <- c(combined.coefTables, cur.coefTables)
combined.models <- if(is.null(combined.models)) cur.models else rbind(combined.models, cur.models)
}
# rownames
rownames(combined.models) <- combined.models$rn
combined.models$rn <- NULL
# Deduplicate based on parameter inclusion pattern (columns 1:19).
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
final.model <- combined.models[!duplicated(pattern), ]
final.coefTables <- combined.coefTables[!duplicated(pattern)]
# Assign numeric row names.
rownames(final.model) <- as.character(seq_len(nrow(final.model)))
names(final.coefTables) <- as.character(seq_len(nrow(final.model)))
# Set final necessary attributes.
attr(final.model, "model.calls") <- NULL
attr(final.model, "coefTables") <- final.coefTables
attr(final.model, "column.types") <- ctypes
attr(final.model, "names") <- cols
class(final.model) <- c("model.selection", "data.frame")
terms_vec <- cols[1:19]
attr(terms_vec, "interceptLabel") <- "(Intercept)"
attr(final.model, "terms") <- terms_vec
l <- attributes(final.model)
View(l)
library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
if(length(miss) > 0) for(col in miss) df[[col]] <- NA
df[, cols, drop = FALSE]
}
combined.models <- NULL
combined.coefTables <- list()
i <- 1
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types and $names
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
# add missing columns and sort by the order of cols
cur.models <- fix_columns(as.data.frame(cur.models), cols)
cur.models$rn <- paste(i, rownames(cur.models), sep = "_")
# preserve ordering of coefTables
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = "_")
View(cur.attr)
# preserve ordering of coefTables
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = "_")
combined.coefTables <- c(combined.coefTables, cur.coefTables)
library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
if(length(miss) > 0) for(col in miss) df[[col]] <- NA
df[, cols, drop = FALSE]
}
combined.models <- NULL
combined.coefTables <- list()
for(i in 1:27){
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types and $names
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
# add missing columns and sort by the order of cols; record rownames
cur.models <- fix_columns(as.data.frame(cur.models), cols)
cur.models$rn <- paste(i, rownames(cur.models), sep = ".")
# preserve ordering of coefTables
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = ".")
# combine models and attribute(model)$coefTables
if (is.null(combined.models)) {
combined.models <- cur.models
} else {
combined.models <- rbind(combined.models, cur.models)
}
combined.coefTables <- c(combined.coefTables, cur.coefTables)
}
# rownames
rownames(combined.models) <- combined.models$rn
combined.models$rn <- NULL
# Deduplicate based on parameter inclusion pattern (columns 1:19).
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
final.model <- combined.models[!duplicated(pattern), ]
final.coefTables <- combined.coefTables[!duplicated(pattern)]
# Assign numeric row names.
rownames(final.model) <- as.character(seq_len(nrow(final.model)))
names(final.coefTables) <- as.character(seq_len(nrow(final.model)))
# Set final necessary attributes.
attr(final.model, "model.calls") <- NULL
attr(final.model, "coefTables") <- final.coefTables
attr(final.model, "column.types") <- ctypes
attr(final.model, "names") <- cols
class(final.model) <- c("model.selection", "data.frame")
terms_vec <- cols[1:19]
attr(terms_vec, "interceptLabel") <- "(Intercept)"
attr(final.model, "terms") <- terms_vec
View(final.model)
library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
if(length(miss) > 0) for(col in miss) df[[col]] <- NA
df[, cols, drop = FALSE]
}
combined.models <- NULL
combined.coefTables <- list()
for(i in 1:27){
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types and $names
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
# add missing columns and sort by the order of cols; record rownames
cur.models <- fix_columns(as.data.frame(cur.models), cols)
cur.models$rn <- paste(i, rownames(cur.models), sep = ".")
# preserve ordering of coefTables
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = ".")
# combine models and attribute(model)$coefTables
if (is.null(combined.models)) {
combined.models <- cur.models
} else {
combined.models <- rbind(combined.models, cur.models)
}
combined.coefTables <- c(combined.coefTables, cur.coefTables)
}
View(combined.models)
# rownames
rownames(combined.models) <- combined.models$rn
combined.models$rn <- NULL
View(combined.models)
# Deduplicate based on parameter inclusion pattern (columns 1:19).
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
terms <- cols[1:19]
attributes(terms)$interceptLabel <- "(Intercept)"
terms
library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# vector for attribute(model)$terms
terms <- cols[1:19]
attributes(terms)$interceptLabel <- "(Intercept)"
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
for(col in miss) df[[col]] <- NA
return(df[, cols, drop = FALSE])
}
combined.models <- NULL
combined.coefTables <- list()
for(i in 1:27){
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types and $names
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
# add missing columns and sort by the order of cols;
cur.models <- fix_columns(as.data.frame(cur.models), cols)
# assign unique indices to each model
cur.models$rn <- paste(i, rownames(cur.models), sep = ".")
# save attributes(cur.models)$coefTables and assign unique indices to each
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = ".")
# combine current and previous models
if (is.null(combined.models)) {
combined.models <- cur.models
} else {
combined.models <- rbind(combined.models, cur.models)
}
#combine current and previous attribute(cur.models)$coefTables
combined.coefTables <- c(combined.coefTables, cur.coefTables)
}
# reassign rownames
rownames(combined.models) <- combined.models$rn
combined.models$rn <- NULL
# remove duplicate models based on parameter inclusion
# actual values are not matched to work around rounding errors
# models with the same parameter inclusion patterns have the same parameter estimates
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
final.model <- combined.models[!duplicated(pattern), ]
final.coefTables <- combined.coefTables[!duplicated(pattern)]
# reassign rownames
rownames(final.model) <- as.character(seq_len(nrow(final.model)))
names(final.coefTables) <- as.character(seq_len(nrow(final.model)))
# set other attributes
attributes(final.model)$model.calls <- NULL
attributes(final.model)$coefTables <- final.coefTables
attributes(final.model)$column.types <- ctypes
attributes(final.model)$names <- cols
attributes(final.model)$class <- c("model.selection", "data.frame")
attributes(final.model)$terms <- terms
View(final.model)
aaaaa <- final.model
library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
if(length(miss) > 0) for(col in miss) df[[col]] <- NA
df[, cols, drop = FALSE]
}
combined.models <- NULL
combined.coefTables <- list()
for(i in 1:27){
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types and $names
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
# add missing columns and sort by the order of cols; record rownames
cur.models <- fix_columns(as.data.frame(cur.models), cols)
cur.models$rn <- paste(i, rownames(cur.models), sep = ".")
# preserve ordering of coefTables
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = ".")
# combine models and attribute(model)$coefTables
if (is.null(combined.models)) {
combined.models <- cur.models
} else {
combined.models <- rbind(combined.models, cur.models)
}
combined.coefTables <- c(combined.coefTables, cur.coefTables)
}
# rownames
rownames(combined.models) <- combined.models$rn
combined.models$rn <- NULL
# Deduplicate based on parameter inclusion pattern (columns 1:19).
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
final.model <- combined.models[!duplicated(pattern), ]
final.coefTables <- combined.coefTables[!duplicated(pattern)]
# Assign numeric row names.
rownames(final.model) <- as.character(seq_len(nrow(final.model)))
names(final.coefTables) <- as.character(seq_len(nrow(final.model)))
# Set final necessary attributes.
attr(final.model, "model.calls") <- NULL
attr(final.model, "coefTables") <- final.coefTables
attr(final.model, "column.types") <- ctypes
attr(final.model, "names") <- cols
class(final.model) <- c("model.selection", "data.frame")
terms_vec <- cols[1:19]
attr(terms_vec, "interceptLabel") <- "(Intercept)"
attr(final.model, "terms") <- terms_vec
View(aaaaa)
all.equal(aaaaa[, c(1, 24)], final.model[, c(1, 24)])
library(MuMIn)
# columns in combined table
cols <- c("(Intercept)", "age.dna", "age.line", "age.ltr", "age.sine",
"age.unknown", "age.others", "prop.dna", "prop.line", "prop.ltr",
"prop.sine", "prop.unknown", "prop.others", "age.dna:prop.dna",
"age.line:prop.line", "age.ltr:prop.ltr", "age.sine:prop.sine",
"age.unknown:prop.unknown", "age.others:prop.others", "shapirowilk.p",
"lambda.p", "df", "logLik", "AICc", "delta", "weight")
# factor for attributes(model)$column.types
ctypes <- c(rep("terms", 19), rep("extra", 2), "df",
"loglik", "ic", "delta", "weight")
levels <- c("terms", "varying", "extra", "df",
"loglik", "ic", "delta", "weight")
ctypes <- factor(ctypes, levels = levels)
names(ctypes) <- cols
# vector for attribute(model)$terms
terms <- cols[1:19]
attributes(terms)$interceptLabel <- "(Intercept)"
# add missing columns and sort by the order of cols
fix_columns <- function(df, cols) {
miss <- setdiff(cols, colnames(df))
for(col in miss) df[[col]] <- NA
return(df[, cols, drop = FALSE])
}
combined.models <- NULL
combined.coefTables <- list()
for(i in 1:27){
cur.models <- readRDS(paste0("../results/sauria.models/Sauria.", i, ".rds"))
# fix attributes(cur.models)$column.types and $names
cur.attr <- attributes(cur.models)
cur.attr$column.types <- ctypes
cur.attr$names <- cols
# add missing columns and sort by the order of cols;
cur.models <- fix_columns(as.data.frame(cur.models), cols)
# assign unique indices to each model
cur.models$rn <- paste(i, rownames(cur.models), sep = ".")
# save attributes(cur.models)$coefTables and assign unique indices to each
cur.coefTables <- cur.attr$coefTables
names(cur.coefTables) <- paste(i, names(cur.coefTables), sep = ".")
# combine current and previous models
if (is.null(combined.models)) {
combined.models <- cur.models
} else {
combined.models <- rbind(combined.models, cur.models)
}
#combine current and previous attribute(cur.models)$coefTables
combined.coefTables <- c(combined.coefTables, cur.coefTables)
}
# reassign rownames
rownames(combined.models) <- combined.models$rn
combined.models$rn <- NULL
# remove duplicate models based on parameter inclusion
# actual values are not matched to work around rounding errors
# models with the same parameter inclusion patterns have the same parameter estimates
pattern <- apply(combined.models[, 1:19], 1, function(x) {
paste(ifelse(is.na(x), "0", "1"), collapse = ".")
})
final.model <- combined.models[!duplicated(pattern), ]
final.coefTables <- combined.coefTables[!duplicated(pattern)]
# reassign rownames
rownames(final.model) <- as.character(seq_len(nrow(final.model)))
names(final.coefTables) <- as.character(seq_len(nrow(final.model)))
# set other attributes
attributes(final.model)$model.calls <- NULL
attributes(final.model)$coefTables <- final.coefTables
attributes(final.model)$column.types <- ctypes
attributes(final.model)$names <- cols
attributes(final.model)$class <- c("model.selection", "data.frame")
attributes(final.model)$terms <- terms
saveRDS("../results/sauria.rds")
saveRDS(final.model, "../results/sauria.rds")
