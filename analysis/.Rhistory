plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# totsl repeat
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# product of total repeat and median
plot(dat$median.trans * dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$totalrep.prop
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$totalrep.prop), max(dat$median.trans * dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
glm(dat$rsq ~ dat$median.trans, weights = dat$w)
glm(dat$rsq ~ dat$median.trans, weights = dat$w) |> summary()
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
glm(dat$rsq ~ dat$median.trans, weights = dat$w) |> summary()
summary(glm(rsq ~ chromnum.1n * median.trans * totalrep.prop, weights = dat$w, data = dat))
summary(glm(rsq ~ chromnum.1n:median.trans:totalrep.prop, weights = dat$w, data = dat))
summary(glm(rsq ~ chromnum.1n * median.trans * totalrep.prop, weights = dat$w, data = dat))
View(d)
# Zhaobo Hu
# zhaobohu2002@gmail.com
# Description: Parses results and calculates additional statistics
# to summarize contigs for each species
dat <- read.csv("../data/data.csv")
# combine raw contig results
library(data.table)
dir <- "../results/individual_species_results"
files <- paste0(dir, "/",  list.files(dir))
raw <- lapply(files, fread)
raw <- as.data.frame(rbindlist((raw), fill = TRUE))
# parse results
parsed <- raw[raw$size.Mbp >= 10, ]
sp.lessthanthree <- names(which(table(parsed$species) < 3))
parsed <- parsed[!(parsed$species %in% sp.lessthanthree), ]
# calculate stats based on parsed results and record the unparsed contigs
sp <- unique(parsed$species)
final <- data.frame()
for (species in sp) {
i <- species
sub <- parsed[which(parsed$species == i), ]
if (nrow(sub) > 0){
fit <- summary(glm(sub$genecount ~ sub$size.Mbp))
beta <- fit$coefficients[2, 1]
pval.beta <- fit$coefficients[2, 4]
rsq <- summary(lm(sub$genecount ~ sub$size.Mbp))$r.squared
sdgd <- sd(sub$genedens)
meangd <- mean(sub$genedens)
cor <- cor(sub$size.Mbp, sub$genecount)
weightmean <- sum(sub$genedens * sub$size.Mbp) / sum(sub$size.Mbp)
weightsd <- sqrt(sum(sub$size.Mbp * (sub$genedens - weightmean)^2) / sum(sub$size.Mbp))
weightcv <- weightsd / weightmean
chromsd <- sd(sub$size.Mbp)/mean(sub$size.Mbp)
contig.stats <- data.frame(species, beta, meangd, sdgd, pval.beta, rsq, cor, weightmean, weightsd, weightcv, chromsd)
} else {
beta <- meangd <- sdgd <- pval.beta <- rsq <- cor <- weightmean <- weightsd <- weightcv <- chromsd <- NA
contig.stats <- data.frame(species, beta, meangd, sdgd, pval.beta, rsq, cor, weightmean, weightsd, weightcv, chromsd)
}
final <- rbind(final, merge(merge(dat[dat$species == species, ], contig.stats, by = "species"), sub, by = "species", all = TRUE))
}
#assign clades
final$clade <- final$class
final[final$clade %in% "Aves", ]$clade <- "Sauria"
final[final$clade %in% "Reptilia", ]$clade <- "Sauria"
final[!(final$clade %in% c("Actinopterygii", "Mammalia", "Sauria")), ]$clade <- "Others"
# reorder columns
final <- final[, c(1, 27, 2:11, 26, 12:25)]
# write csv
write.csv(final, "../results/parsed.csv", row.names = FALSE)
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
library(ape)
library(phytools)
library(picante)
install.packages("picante")
library(picante)
# load stuff in
library(ape)
library(dispRity)
source("../analysis/functions.R")
dat <- read.csv("../results/unparsed.csv")
setwd("~/GitHub/genedensity/analysis")
dat <- read.csv("../data/data.csv")
# combine raw contig results
library(data.table)
dir <- "../results/individual_species_results"
files <- paste0(dir, "/",  list.files(dir))
raw <- lapply(files, fread)
raw <- as.data.frame(rbindlist((raw), fill = TRUE))
library(data.table)
# verbose
verbose <- F
# load stuff in
library(ape)
library(dispRity)
source("../analysis/functions.R")
dat <- read.csv("../results/parsed.csv")
tree <- read.tree("../data/chordates_species.nwk")
# format and prune tree
sp <- unique(dat$species)
spf <- sub("^([^_]*_[^_]*)_.*", "\\1", gsub(" ", "_", sp))
sp.intersect <- intersect(tree$tip.label, spf)
pruned.tree <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% sp.intersect)])
spn <- sp[match(spf[match(pruned.tree$tip.label, spf)], spf)]
pruned.tree$tip.label <- spn
# clean zero-length branches
pruned.tree <- remove.zero.brlen(pruned.tree)
write.tree(pruned.tree, file = paste0("../data/formatted_tree.nwk"))
# load stuff in
library(ape)
library(dispRity)
source("../analysis/functions.R")
dat <- read.csv("../results/parsed.csv")
tree <- read.tree("../data/chordates_species.nwk")
# format and prune tree
sp <- unique(dat$species)
spf <- sub("^([^_]*_[^_]*)_.*", "\\1", gsub(" ", "_", sp))
sp.intersect <- intersect(tree$tip.label, spf)
pruned.tree <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% sp.intersect)])
spn <- sp[match(spf[match(pruned.tree$tip.label, spf)], spf)]
pruned.tree$tip.label <- spn
write.tree(pruned.tree, file = paste0("../data/formatted_tree.nwk"))
tree <- read.tree("../data/formatted_tree.nwk")
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
# note: new parsing method kept 21 mammals and rsq~transformed median has slope -1.6988 and p value 0.016207; no need to exponentiate weights
# model predicts an rsq difference of 0.36402 between the highest-median mammal and the lowest-median mammal
# what about other clades?
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# marsupials?
mars <- c()
for (g in 1:nrow(dat)) {
if (dat[g, ]$order %in% c("Didelphimorphia",
"Paucituberculata",
"Microbiotheria",
"Dasyuromorphia",
"Notoryctemorphia",
"Peramelemorphia",
"Diprotodontia")){
mars <- c(mars, TRUE)
} else {
mars <- c(mars, FALSE)
}
}
dat$mars <- mars
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# marsupials
mars <- dat[, c("species", "mars", "rsq", "order")]
mars <- mars[mars$order != "Monotrema", ]
obs.diff <- mean(mars[mars$mars == TRUE, ]$rsq) - mean(mars[mars$mars == FALSE, ]$rsq)
null.diff <- c()
for (f in 1:10000) {
null <- sample(mars)
null.diff <- c(null.diff, mean(null[null$mars == TRUE, ]$rsq) - mean(null[null$mars == FALSE, ]$rsq))
}
p <- mean(abs(null.diff) >= abs(obs.diff))
print(paste0("p = ", p))
# nope
# median
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# totsl repeat
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# product of total repeat and median
plot(dat$median.trans * dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$totalrep.prop
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$totalrep.prop), max(dat$median.trans * dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
sum(dat$w)
hist(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
int <- tree$tip.label, dat$species
int <- intersect(tree$tip.label, dat$species)
int
model <- glm(rsq ~ median.trans, weights = w, data = dat)
resid(model)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
model <- glm(rsq ~ median.trans, weights = w, data = dat1)
phylosig(pruned.tree, resid(model), method="lambda", test=TRUE)
dat1 <- dat1[order(dat1$species == pruned.tree$tip.label), ]
View(dat1)
pruned.tree$tip.label
dat1 <- dat1[order(dat1$species == pruned.tree$tip.label), ]
View(dat1)
dat1[match(pruned.tree$tip.label, dat1$species), ]
View(dat1)
dat1 <- dat1[order(dat1$species %in% pruned.tree$tip.label), ]
View(dat1)
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
View(dat1)
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- glm(rsq ~ median.trans, weights = w, data = dat1)
phylosig(pruned.tree, resid(model), method="lambda", test=TRUE)
dat1$species
pruned.tree$tip.label
phylosig(pruned.tree, resid(model), method="lambda", test=TRUE)
setdiff(pruned.tree$tip.label, names(resid(model)))
setdiff(names(resid(model)), pruned.tree$tip.label)
resid(model)
res <- setNames(resid(model), dat1$species)
res
res <- setNames(resid(model), dat1$species)
phylosig(pruned.tree, res, method="lambda", test=TRUE)
library(caper)
cd <- comparative.data(pruned.tree, dat, names.col = "species")
summary(pgls(rsq ~ median.trans, weights = w, data = cd))
summary(pgls(rsq ~ median.trans, weights = w, data = cd))
model <- gls(rsq ~ median.trans, weights = varFixed(~w),
correlation = corPagel(value = 1, phy = cd$phy, fixed = FALSE),
data = cd)
library(nlme)
model <- gls(rsq ~ median.trans, weights = varFixed(~w),
correlation = corPagel(value = 1, phy = cd$phy, fixed = FALSE),
data = cd)
model <- gls(rsq ~ median.trans,
weights = varFixed(~w),
data = cd)
model <- gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1)
summary(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
# before pgls: new parsing method kept 21 mammals and rsq~transformed median has slope -1.6988 and p value 0.016207; no need to exponentiate weights
# after pgls: beta = -1.990920, p = 0.0084
# what about other clades?
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# marsupials?
mars <- c()
for (g in 1:nrow(dat)) {
if (dat[g, ]$order %in% c("Didelphimorphia",
"Paucituberculata",
"Microbiotheria",
"Dasyuromorphia",
"Notoryctemorphia",
"Peramelemorphia",
"Diprotodontia")){
mars <- c(mars, TRUE)
} else {
mars <- c(mars, FALSE)
}
}
dat$mars <- mars
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- glm(rsq ~ median.trans, weights = w, data = dat1)
res <- setNames(resid(model), dat1$species)
phylosig(pruned.tree, res, method="lambda", test=TRUE)
library(nlme)
summary(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- glm(rsq ~ median.trans, weights = w, data = dat1)
res <- setNames(resid(model), dat1$species)
phylosig(pruned.tree, res, method="lambda", test=TRUE)
library(nlme)
summary(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
View(dat)
View(dat1)
model <- glm(rsq ~ median.trans, weights = w, data = dat1)
res <- setNames(resid(model), dat1$species)
phylosig(pruned.tree, res, method="lambda", test=TRUE)
library(nlme)
summary(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- glm(rsq ~ median.trans, weights = w, data = dat1)
res <- setNames(resid(model), dat1$species)
phylosig(pruned.tree, res, method="lambda", test=TRUE)
library(nlme)
summary(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
View(dat1)
# before pgls: new parsing method kept 21 mammals and rsq~transformed median has slope -1.6988 and p value 0.016207; no need to exponentiate weights
# after pgls: 20 species, beta = 1.747489, p = 0.0183
# what about other clades?
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- glm(rsq ~ median.trans, weights = w, data = dat1)
res <- setNames(resid(model), dat1$species)
phylosig(pruned.tree, res, method="lambda", test=TRUE)
library(nlme)
summary(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
install.packages("piecewiseSEM")
library(piecewiseSEM)
rsquared.gls(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
summary(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
s <- summary(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
View(s)
l <- gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1)
View(dat1)
View(l)
library(piecewiseSEM)
rsquared.gls(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
ls("package:piecewiseSEM")
rsquared(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
plot(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1), which = 1)
plot(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1), which = 2)
plot(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1), which = 1)
plot(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
plot(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1), which = 2)
rsquared(gls(rsq ~ median.trans,
weights = varFixed(~w),
data = dat1))
