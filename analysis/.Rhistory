dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", terms))
interactions <- paste0("age.", rep, ":prop.", rep)
predictors <- c(
terms,
interactions
)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.dna:prop.dna",
"age.line:prop.line",
"age.ltr:prop.ltr",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
cd$data[, c(terms, interactions)]
cd$data
terms
interactions
cd$data
[, c(terms, interactions)]
c(terms, interactions)
cd$data[, c(terms, interactions)]
cd$data[, c(terms, interactions)]
interactions
predictors
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
terms <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
terms
)])
# normalize
for (j in terms) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", terms))
interactions <- paste0("age.", rep, ":prop.", rep)
predictors <- c(
terms,
interactions
)
# Attempt to fit the PGLS model
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
tryCatch({
# Attempt to fit the PGLS model
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
# If successful, break out of the loop
model_fitted <- TRUE
}, error = function(e) {
# Print the error message
message("Error fitting model: ", e$message)
# Check if the problematic term is "age.dna:prop.dna"
if ("age.dna:prop.dna" %in% predictors) {
message("Dropping age.dna:prop.dna and retrying...")
predictors <- setdiff(predictors, "age.dna:prop.dna")
} else {
# If no more terms to drop, stop with an error
stop("Model fitting failed after removing all problematic terms.")
}
})
tryCatch({
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
}, error = function(e) {
message("Dropping age.dna:prop.dna and retrying...")
predictors <- setdiff(predictors, "age.dna:prop.dna")
})
tryCatch({
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
}, error = function(e) {
message(paste0("in ", i,", dropping age.dna:prop.dna"))
predictors <- setdiff(predictors, "age.dna:prop.dna")
})
tryCatch({
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
}, error = function(e) {
message(paste0("in ", i,", dropping age.dna:prop.dna"))
predictors <- setdiff(predictors, "age.dna:prop.dna")
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
})
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
terms <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
terms
)])
# normalize
for (j in terms) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", terms))
interactions <- paste0("age.", rep, ":prop.", rep)
predictors <- c(
terms,
interactions
)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.dna:prop.dna",
"age.line:prop.line",
"age.ltr:prop.ltr",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
tryCatch({
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
}, error = function(e) {
message(paste0("in ", i,", dropping age.dna:prop.dna"))
global.model <- pgls(reformulate(setdiff(predictors, "age.dna:prop.dna"),
response = "rsq"), data = cd)
})
global.model
global.model
tryCatch({
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
}, error = function(e) {
message(paste0("in ", i,", dropping age.dna:prop.dna"))
global.model <- pgls(reformulate(setdiff(predictors, "age.dna:prop.dna"),
response = "rsq"), data = cd)
})
global.model
global.model <- NULL
tryCatch({
global.model <<- pgls(reformulate(predictors, response = "rsq"), data = cd)
}, error = function(e) {
message(paste0("in ", i,", dropping age.dna:prop.dna"))
global.model <<- pgls(reformulate(setdiff(predictors, "age.dna:prop.dna"),
response = "rsq"), data = cd)
})
global.model
summary(global.model)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(lmtest) # Breusch-Pagan test
# library(rJava) # maybe not necessary
# library(glmulti) # maybe not necessary
options(na.action = "na.fail")
# loop for each clade
for (i in c("All", "Mammalia", "Actinopterygii", "Sauria")) {
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
terms <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
terms
)])
# normalize
for (j in terms) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", terms))
interactions <- paste0("age.", rep, ":prop.", rep)
predictors <- c(
terms,
interactions
)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
#global.model <- pgls(reformulate(c(terms,
#                                   "age.dna:prop.dna",
#                                   "age.line:prop.line",
#                                   "age.ltr:prop.ltr",
#                                   "age.sine:prop.sine",
#                                   "age.unknown:prop.unknown",
#                                   "age.others:prop.others"), response = "rsq"), data = cd)
global.model <- NULL
tryCatch({
global.model <<- pgls(reformulate(predictors, response = "rsq"), data = cd)
}, error = function(e) {
message(paste0("in ", i,", dropping age.dna:prop.dna"))
global.model <<- pgls(reformulate(setdiff(predictors, "age.dna:prop.dna"),
response = "rsq"), data = cd)
})
constraints <- sapply(interactions, function(x) {
parts <- strsplit(x, ":")[[1]]
sprintf("((!`%s`) | (%s & %s))", x, parts[1], parts[2])
})
subset_expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
models <- dredge(global.model, subset = subset_expr)
# write
saveRDS(models, paste0("../results/", tolower(i), ".models.rds"))
}
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(lmtest) # Breusch-Pagan test
# library(rJava) # maybe not necessary
# library(glmulti) # maybe not necessary
options(na.action = "na.fail")
i <- "All"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
terms <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
terms
)])
# normalize
for (j in terms) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", terms))
interactions <- paste0("age.", rep, ":prop.", rep)
predictors <- c(
terms,
interactions
)
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model
summary(global.model)
i <- "Mammalia"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
terms <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
terms
)])
# normalize
for (j in terms) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", terms))
interactions <- paste0("age.", rep, ":prop.", rep)
predictors <- c(
terms,
interactions
)
global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model
summary(global.model)
i <- "Sauria"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
terms <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
terms
)])
# normalize
for (j in terms) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", terms))
interactions <- paste0("age.", rep, ":prop.", rep)
predictors <- c(
terms,
interactions
)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.line:prop.line",
"age.ltr:prop.ltr",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
global.model
summary(glibal.model)
summary(global.model)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.ltr:prop.ltr",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
summary(global.model)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.dna:prop.dna",
"age.ltr:prop.ltr",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
summary(global.model)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.line:prop.line",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
summary(global.model)
terms
terms[-1
]
library(phytools)
?phylosig
models <- readRDS("../results/all.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))]
avg <- model.avg(models)
library(MuMIn)
avg <- model.avg(models)
confint(avg, full = F)
sw(l) # importance
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Mammalia.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
models <- readRDS("../results/Actinopterygii.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Mammalia.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Actinopterygii.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
lambda.p <- phylosig(pruned.tree, res, method = "lambda", test = TRUE, niter = 10)$P
return(lambda.p)
}
i <- "Sauria"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# catch an error in reptile global model caused by severe collinearity
# drop the problematic term
global.model <- NULL
tryCatch({
global.model <<- pgls(reformulate(all.terms, response = "rsq"), data = cd)
}, error = function(e) {
message(paste0("dropping age.dna:prop.dna in ", i))
global.model <<- pgls(reformulate(setdiff(all.terms, c("age.dna:prop.dna")),
response = "rsq"), data = cd)
})
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
View(dat)
reformulate(all.terms, response = "rsq")
library(MuMIn)
models <- readRDS("../results/all.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/no.Mammalia.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/no.Actinopterygii.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/no.Sauria.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/all.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Mammalia.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Actinopterygii.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
