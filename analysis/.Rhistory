# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.line:prop.line",
"age.ltr:prop.ltr",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
global.model
summary(glibal.model)
summary(global.model)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.ltr:prop.ltr",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
summary(global.model)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.dna:prop.dna",
"age.ltr:prop.ltr",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
summary(global.model)
# fit model
#global.model <- pgls(reformulate(predictors, response = "rsq"), data = cd)
global.model <- pgls(reformulate(c(terms,
"age.line:prop.line",
"age.sine:prop.sine",
"age.unknown:prop.unknown",
"age.others:prop.others"), response = "rsq"), data = cd)
summary(global.model)
terms
terms[-1
]
library(phytools)
?phylosig
models <- readRDS("../results/all.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))]
avg <- model.avg(models)
library(MuMIn)
avg <- model.avg(models)
confint(avg, full = F)
sw(l) # importance
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Mammalia.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
models <- readRDS("../results/Actinopterygii.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Mammalia.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Actinopterygii.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
lambda.p <- phylosig(pruned.tree, res, method = "lambda", test = TRUE, niter = 10)$P
return(lambda.p)
}
i <- "Sauria"
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
if (i %in% c("Mammalia", "Actinopterygii", "Sauria")) {
dat <- dat[dat$clade %in% i, ]
}
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# catch an error in reptile global model caused by severe collinearity
# drop the problematic term
global.model <- NULL
tryCatch({
global.model <<- pgls(reformulate(all.terms, response = "rsq"), data = cd)
}, error = function(e) {
message(paste0("dropping age.dna:prop.dna in ", i))
global.model <<- pgls(reformulate(setdiff(all.terms, c("age.dna:prop.dna")),
response = "rsq"), data = cd)
})
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
View(dat)
reformulate(all.terms, response = "rsq")
library(MuMIn)
models <- readRDS("../results/all.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/no.Mammalia.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/no.Actinopterygii.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/no.Sauria.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/all.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Mammalia.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn)
models <- readRDS("../results/Actinopterygii.models.rds")
models <- models[1:length(which(cumsum(models$weight) <= 0.95))] # confidence set
avg <- model.avg(models) # average
confint(avg, full = F) # confidence interval
sw(models) # importance
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
lambda.p <- phylosig(pruned.tree, res, method = "lambda", test = TRUE, niter = 10)$P
return(lambda.p)
}
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
dat <- dat[dat$clade %in% "Sauria", ]
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
global.model <- pgls(reformulate(all.terms, response = "rsq"), data = cd)
all.terms
number <- 1
all.terms[-1]
all.terms[-2]
number <- 1
# global model
global.model <- pgls(reformulate(all.terms[-number], response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
extra = list(shapirowilk.p = sw.test, lambda.p = lambda.test)
)
model <- global.model
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
lambda.p <- phylosig(pruned.tree, res, method = "lambda", test = TRUE, niter = 10)$P
cur.terms
nophylo.formula
nophylo.model
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
res
number <- 2
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
lambda.p <- phylosig(pruned.tree, res, method = "lambda", test = TRUE, niter = 10)$P
return(lambda.p)
}
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
dat <- dat[dat$clade %in% "Sauria", ]
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- pgls(reformulate(all.terms[-number], response = "rsq"), data = cd)
model <- global.model
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
res
number <- 1
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
lambda.test <- function(model) {
cur.terms <- unlist(strsplit(as.character(model$formula)[3], " \\+ "))
nophylo.formula <- reformulate(cur.terms, response = "rsq")
nophylo.model <- glm(nophylo.formula, data = cd$data)
res <- residuals(nophylo.model)
lambda.p <- phylosig(pruned.tree, res, method = "lambda", test = TRUE, niter = 10)$P
return(lambda.p)
}
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
dat <- dat[dat$clade %in% "Sauria", ]
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- pgls(reformulate(all.terms[-number], response = "rsq"), data = cd)
global.model
number <- 1
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# functions
sw.test <- function(model) {
res <- residuals(model)
sw.p <- shapiro.test(res)$p.value
return(sw.p)
}
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
dat <- dat[dat$clade %in% "Sauria", ]
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- pgls(reformulate(all.terms[-number], response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr,
extra = list(shapirowilk.p = sw.test)
)
number <- 1
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
dat <- dat[dat$clade %in% "Sauria", ]
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- pgls(reformulate(all.terms[-number], response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
# dredge
models <- dredge(global.model,
subset = subset.expr
)
number <- 1
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
options(na.action = "na.fail")
# subset results
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n) & !duplicated(dat$species), ]
dat <- dat[dat$clade %in% "Sauria", ]
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
variables <- colnames(dat)[grep("^(prop|age)\\.", colnames(dat))]
dat <- na.omit(dat[, c("species",
"clade",
"rsq",
variables
)])
# normalize
for (j in variables) {
dat[[j]] <- (max(dat[[j]])-dat[[j]]) / diff(range(dat[[j]]))
}
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = TRUE)
# set up interactions
rep <- unique(sub("^[^.]*\\.", "", variables))
interactions <- paste0("age.", rep, ":prop.", rep)
all.terms <- c(
variables,
interactions
)
# global model
global.model <- pgls(reformulate(all.terms[-number], response = "rsq"), data = cd)
# set constraints
model.terms <- unlist(strsplit(as.character(global.model$formula)[3], " \\+ "))
model.interactions <- grep(":", model.terms, value = TRUE)
constraints <- character(length(model.interactions))
for (k in seq_along(model.interactions)) {
parts <- strsplit(model.interactions[k], ":")[[1]]
constraints[k] <- sprintf("((!`%s`) | (%s & %s))", model.interactions[k], parts[1], parts[2])
}
subset.expr <- parse(text = paste(constraints, collapse = " & "))[[1]]
summary(global.model)
