labs(# title = "PCA Biplot",
x = "Principal Component 1",
y = "Principal Component 2") +
theme(plot.title = element_text(hjust = 0.475),
plot.subtitle = element_text(hjust = 0.475),
axis.line = element_line(color = "black"),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black", linetype = "dotted", size = 0.25),
legend.position = "none")
barplot(y, names.arg = c("pc1", "pc2", "pc3", "pc4"))
unique(dat$sepl)
unique(dat$sp)
View(pca)
pca$x
plot(dat$petl,
dat$sepl,
cool = rep(c("green", "blue", "purple"), each = 50),
pch = 16,
cex = 0.7)
plot(dat$petl,
dat$sepl,
col = rep(c("green", "blue", "purple"), each = 50),
pch = 16,
cex = 0.7)
plot(pca$x[, 1],
pca$x[, 2],
col = rep(c("green", "blue", "purple"), each = 50),
pch = 16,
cex = 0.7)
plot(dat$petl,
dat$sepl,
col = rep(c("green", "blue", "purple"), each = 50),
pch = 16,
cex = 0.7)
plot(pca$x[, 1],
pca$x[, 2],
col = rep(c("green", "blue", "purple"), each = 50),
pch = 16,
cex = 0.7)
View(pca)
pca$x
PC1 <- pca$x[, 1]
pc1 <- pca$x[, 1]
pc2 <- pca$x[, 2]
dat <- dat.frame(pc1, pc2)
dat <- data.frame(pc1, pc2)
library(car)
library(FactoMineR)
library(ggplot2)
library(ggrepel)
data("iris")
pca <- prcomp(iris[, c(1:4)])
y <- pca$sdev^2/sum(pca$sdev^2)
barplot(y, names.arg = c("pc1", "pc2", "pc3", "pc4"))
pc1 <- pca$x[, 1]
pc2 <- pca$x[, 2]
dat <- data.frame(pc1, pc2)
dat <- data.frame(pca$x[, c(1, 2)])
dat <- data.frame(pca$x[, c(1, 2)])
ggplot(dat, aes(x = PC1, y = PC2)) +
geom_point()
library(FactoMineR)
pca2 <- PCA(iris[, 1:4], graph = T)
loadings <- pca$rotation
ggplot(loadings, aes(x = PC1, y = PC2)) +
# vectors
geom_segment(aes(x = 0, y = 0, xend = PC1, yend = PC2),
# arrows
arrow = arrow(), color = "blue") +
# vector labels
geom_text_repel(data = loadings, aes(x = PC1, y = PC2, label = rownames(loadings)),
size = 4, nudge_x = 0.1, nudge_y = 0.1,
max.overlaps = Inf, force = 180) +
# axis labels
labs(# title = "PCA Biplot",
x = "Principal Component 1",
y = "Principal Component 2") +
theme(plot.title = element_text(hjust = 0.475),
plot.subtitle = element_text(hjust = 0.475),
axis.line = element_line(color = "black"),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black", linetype = "dotted", size = 0.25),
legend.position = "none")
library(FactoMineR)
pca2 <- PCA(iris[, 1:4], graph = T)
loadings <- pca$rotation
ggplot(loadings, aes(x = PC1, y = PC2)) +
# vectors
geom_segment(aes(x = 0, y = 0, xend = PC1, yend = PC2),
# arrows
arrow = arrow(), color = "blue") +
# vector labels
geom_text_repel(data = loadings, aes(x = PC1, y = PC2, label = rownames(loadings)),
size = 4, nudge_x = 0.1, nudge_y = 0.1,
max.overlaps = Inf, force = 180) +
# axis labels
labs(# title = "PCA Biplot",
x = "Principal Component 1",
y = "Principal Component 2") +
theme(plot.title = element_text(hjust = 0.475),
plot.subtitle = element_text(hjust = 0.475),
axis.line = element_line(color = "black"),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black", linetype = "dotted", size = 0.25),
legend.position = "none")
library(FactoMineR)
pca2 <- PCA(iris[, 1:4], graph = T)
df <- read.csv("../results/vertebrates/parsed.csv")
rm(list=ls())
q()
# transform results
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
# transform results
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- read.csv("../results/parsed.csv")
dat <- read.csv("../results/parsed.csv")
dat <- read.csv("../results/parsed.csv")
dat <- read.csv("../results/parsed.csv")
setwd("~/GitHub/genedensity/analysis")
dat <- read.csv("../results/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n), ]
dat <- dat[dat$clade %in% "Mammalia", ]
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
dat <- na.omit(dat[, c("species", "rsq", "clade", "w")])
dat <- dat[dat$species != "Callithrix jacchus", ]
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat <- dat[dat$clade %in% "Mammalia", ]
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
dat <- na.omit(dat[, c("species", "rsq", "clade", "w")])
dat <- dat[dat$species != "Callithrix jacchus", ]
# prune
tree <- read.tree("../data/formatted_tree.nwk")
library(phytools)
library(caper)
# prune
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
# initial model selection
model <- get.models(dredge(glm(rsq ~ w, data = dat)), 1)[[1]]
library(MuMIn)
# initial model selection
model <- get.models(dredge(glm(rsq ~ w, data = dat)), 1)[[1]]
options(na.action = "na.fail")
# initial model selection
model <- get.models(dredge(glm(rsq ~ w, data = dat)), 1)[[1]]
model
# initial model selection
model <- glm(rsq ~ w, data = dat)
model
res <- setNames(resid(model), dat$species)
res
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[[4]]
signal
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = T)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat <- dat[dat$clade %in% "Mammalia", ]
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
dat <- na.omit(dat[, c("species", "rsq", "clade", "w")])
dat <- dat[dat$species != "Callithrix jacchus", ]
# prune
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
# if phylogenetic signals are present in the residuals, use PGLS
model <- glm(rsq ~ w, data = dat)
res <- setNames(resid(model), dat$species)
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[[4]]
sig <- TRUE
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = T)
beta <- summary(pgls(rsq ~ w, cd))$coefficients[2, 1]
p <- summary(pgls(rsq ~ w, cd))$coefficients[2, 4]
beta
p
beta <- summary(glm(rsq ~ w, data = dat))$coefficients[2, 1]
p <- summary(glm(rsq ~ w, data = dat))$coefficients[2, 4]
beta
p
options(na.action = "na.fail")
terms <- c(
"(Intercept)",
"chromnum.1n",
"median.trans",
"rep.prop",
"chromnum.1n:median.trans",
"chromnum.1n:rep.prop",
"median.trans:rep.prop",
"chromnum.1n:median.trans:rep.prop"
)
lis <- list()
# for each threshold
for (thrs in (0:100)*0.01) {
# read data
dat <- read.csv("../data/data.csv")
library(data.table)
dir <- "../results/individual_species_results"
files <- paste0(dir, "/",  list.files(dir))
contigs <- lapply(files, fread)
contigs <- as.data.frame(rbindlist((contigs), fill = TRUE))
# parse by contig size
contigs <- contigs[contigs$size.Mbp >= 10, ]
# remove species with less than 2 contigs
rm <- names(table(contigs$species)[table(contigs$species) < 2])
contigs <- contigs[!(contigs$species %in% rm), ]
# test new method
parsed <- data.frame()
for (z in unique(contigs$species)) {
sub <- contigs[contigs$species == z, ]
cont <- sum(sub$size.Mbp)
total <- contigs[contigs$species == z, ]$asmblysize[1]
if (cont/total >= thrs) {
parsed <- rbind(parsed, sub)
}
}
# calculate stats based on parsed results
sp <- unique(parsed$species)
final <- data.frame()
for (species in sp) {
i <- species
sub <- parsed[which(parsed$species == i), ]
if (nrow(sub) > 0){
fit <- summary(glm(sub$genecount ~ sub$size.Mbp))
beta <- fit$coefficients[2, 1]
pval.beta <- fit$coefficients[2, 4]
rsq <- summary(lm(sub$genecount ~ sub$size.Mbp))$r.squared
weightmean <- sum(sub$genedens * sub$size.Mbp) / sum(sub$size.Mbp)
weightsd <- sqrt(sum(sub$size.Mbp * (sub$genedens - weightmean)^2) / sum(sub$size.Mbp))
weightcv <- weightsd / weightmean
contig.stats <- data.frame(species, beta, pval.beta, rsq, weightmean, weightsd, weightcv)
} else {
beta <- pval.beta <- rsq <- weightmean <- weightsd <- weightcv <- NA
contig.stats <- data.frame(species, beta, pval.beta, rsq, weightmean, weightsd, weightcv)
}
final <- rbind(final, merge(merge(dat[dat$species == species, ], contig.stats, by = "species"), sub, by = "species", all = TRUE))
}
#assign clades
final$clade <- final$class
final[final$clade %in% "Aves", ]$clade <- "Sauria"
final[final$clade %in% "Reptilia", ]$clade <- "Sauria"
final[!(final$clade %in% c("Actinopterygii", "Mammalia", "Sauria")), ]$clade <- "Others"
final$cont.asmb.rat.cutoff <- thrs
# reorder columns
final <- final[, c(1, 23, 2:8, 12:17, 22, 24, 9:11, 18:21)]
files <- list.files("../results/divsums")
sp <- gsub("_", " ", gsub(".divsum$", "", files))
asmbsz <- final[!duplicated(final$species), ]
asmbsz <- asmbsz[asmbsz$species %in% sp, ]
asmbsz <- setNames(asmbsz$asmblysize.Mbp*1000000, asmbsz$species)
repstats <- data.frame()
for (i in 1:length(sp)) {
species <- sp[i]
# read text file into lines
lines <- readLines(paste0("../results/divsums/", files[i]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, lines) + 1
# condense relevant lines into a table
lines <- lines[start.index:length(lines)]
table <- read.table(textConnection(lines),
sep = " ",
header = TRUE)
# drop NA columns
table <- table[-c(which(sapply(table, function(col) all(is.na(col)))))]
# condense table
classes <- c("LINE", "SINE", "LTR", "DNA", "RC", "Div", "Unknown")
for (j in classes) {
pat <- paste0("^", j, "(\\.|$)")
headers <- grep(pat, names(table), value = TRUE)
sub <- table[, headers]
sums <- rowSums(as.matrix(sub))
table <- table[, !names(table) %in% headers]
assign(j, sums)
}
Others <- rowSums(as.matrix(table))
table <- data.frame(Div, LINE, SINE, LTR, DNA, RC, Others, Unknown)
# all repeat total and median
rep.bp <- rowSums(table[, !names(table) == "Div"])
total.rep.pct <- sum((rep.bp / asmbsz[sp[i]]) * 100)
total.rep.median <- which(cumsum(rep.bp) > sum(rep.bp)/2)[1]
for (k in classes) {
assign(paste0(tolower(k), ".rep.pct"), sum(table[k] /  asmbsz[sp[i]] * 100))
assign(paste0(tolower(k), ".rep.median"), which(cumsum(table[k]) > sum(table[k])/2)[1])
}
# build dataframe
df <- data.frame(species,
total.rep.pct,
total.rep.median,
line.rep.pct,
line.rep.median,
sine.rep.pct,
sine.rep.median,
ltr.rep.pct,
ltr.rep.median,
dna.rep.pct,
dna.rep.median,
rc.rep.pct,
rc.rep.median
)
repstats <- rbind(repstats, df)
}
final <- merge(final, repstats, by = "species", all.x = TRUE)
# reorganize and save results
final <- final[, c(1:20, 25:36, 21:24)]
library(phytools)
library(caper)
library(MuMIn)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
# subset
dat <- final[!duplicated(final$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat <- dat[dat$clade %in% "Mammalia", ]
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
dat <- na.omit(dat[, c("species", "rsq", "clade", "w")])
dat <- dat[dat$species != "Callithrix jacchus", ]
# prune
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
# if phylogenetic signals are present in the residuals, use PGLS
model <- glm(rsq ~ w, data = dat)
res <- setNames(resid(model), dat$species)
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[[4]]
if (signal < 0.05) {
sig <- TRUE
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = T)
beta <- summary(pgls(rsq ~ w, cd))$coefficients[2, 1]
p <- summary(pgls(rsq ~ w, cd))$coefficients[2, 4]
lis <- c(lis, list(c(thrs, sig, beta, p)))
} else {
sig <- FALSE
beta <- summary(glm(rsq ~ w, data = dat))$coefficients[2, 1]
p <- summary(glm(rsq ~ w, data = dat))$coefficients[2, 4]
lis <- c(lis, list(c(thrs, sig, beta, p)))
}
}
options(na.action = "na.fail")
terms <- c(
"(Intercept)",
"chromnum.1n",
"median.trans",
"rep.prop",
"chromnum.1n:median.trans",
"chromnum.1n:rep.prop",
"median.trans:rep.prop",
"chromnum.1n:median.trans:rep.prop"
)
lis <- list()
# for each threshold
for (thrs in (0:100)*0.01) {
# read data
dat <- read.csv("../data/data.csv")
library(data.table)
dir <- "../results/individual_species_results"
files <- paste0(dir, "/",  list.files(dir))
contigs <- lapply(files, fread)
contigs <- as.data.frame(rbindlist((contigs), fill = TRUE))
# parse by contig size
contigs <- contigs[contigs$size.Mbp >= 10, ]
# remove species with less than 2 contigs
rm <- names(table(contigs$species)[table(contigs$species) < 2])
contigs <- contigs[!(contigs$species %in% rm), ]
# test new method
parsed <- data.frame()
for (z in unique(contigs$species)) {
sub <- contigs[contigs$species == z, ]
cont <- sum(sub$size.Mbp)
total <- contigs[contigs$species == z, ]$asmblysize[1]
if (cont/total >= thrs) {
parsed <- rbind(parsed, sub)
}
}
# calculate stats based on parsed results
sp <- unique(parsed$species)
final <- data.frame()
for (species in sp) {
i <- species
sub <- parsed[which(parsed$species == i), ]
if (nrow(sub) > 0){
fit <- summary(glm(sub$genecount ~ sub$size.Mbp))
beta <- fit$coefficients[2, 1]
pval.beta <- fit$coefficients[2, 4]
rsq <- summary(lm(sub$genecount ~ sub$size.Mbp))$r.squared
weightmean <- sum(sub$genedens * sub$size.Mbp) / sum(sub$size.Mbp)
weightsd <- sqrt(sum(sub$size.Mbp * (sub$genedens - weightmean)^2) / sum(sub$size.Mbp))
weightcv <- weightsd / weightmean
contig.stats <- data.frame(species, beta, pval.beta, rsq, weightmean, weightsd, weightcv)
} else {
beta <- pval.beta <- rsq <- weightmean <- weightsd <- weightcv <- NA
contig.stats <- data.frame(species, beta, pval.beta, rsq, weightmean, weightsd, weightcv)
}
final <- rbind(final, merge(merge(dat[dat$species == species, ], contig.stats, by = "species"), sub, by = "species", all = TRUE))
}
#assign clades
final$clade <- final$class
final[final$clade %in% "Aves", ]$clade <- "Sauria"
final[final$clade %in% "Reptilia", ]$clade <- "Sauria"
final[!(final$clade %in% c("Actinopterygii", "Mammalia", "Sauria")), ]$clade <- "Others"
final$cont.asmb.rat.cutoff <- thrs
# reorder columns
final <- final[, c(1, 23, 2:8, 12:17, 22, 24, 9:11, 18:21)]
files <- list.files("../results/divsums")
sp <- gsub("_", " ", gsub(".divsum$", "", files))
asmbsz <- final[!duplicated(final$species), ]
asmbsz <- asmbsz[asmbsz$species %in% sp, ]
asmbsz <- setNames(asmbsz$asmblysize.Mbp*1000000, asmbsz$species)
repstats <- data.frame()
for (i in 1:length(sp)) {
species <- sp[i]
# read text file into lines
lines <- readLines(paste0("../results/divsums/", files[i]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, lines) + 1
# condense relevant lines into a table
lines <- lines[start.index:length(lines)]
table <- read.table(textConnection(lines),
sep = " ",
header = TRUE)
# drop NA columns
table <- table[-c(which(sapply(table, function(col) all(is.na(col)))))]
# condense table
classes <- c("LINE", "SINE", "LTR", "DNA", "RC", "Div", "Unknown")
for (j in classes) {
pat <- paste0("^", j, "(\\.|$)")
headers <- grep(pat, names(table), value = TRUE)
sub <- table[, headers]
sums <- rowSums(as.matrix(sub))
table <- table[, !names(table) %in% headers]
assign(j, sums)
}
Others <- rowSums(as.matrix(table))
table <- data.frame(Div, LINE, SINE, LTR, DNA, RC, Others, Unknown)
# all repeat total and median
rep.bp <- rowSums(table[, !names(table) == "Div"])
total.rep.pct <- sum((rep.bp / asmbsz[sp[i]]) * 100)
total.rep.median <- which(cumsum(rep.bp) > sum(rep.bp)/2)[1]
for (k in classes) {
assign(paste0(tolower(k), ".rep.pct"), sum(table[k] /  asmbsz[sp[i]] * 100))
assign(paste0(tolower(k), ".rep.median"), which(cumsum(table[k]) > sum(table[k])/2)[1])
}
# build dataframe
df <- data.frame(species,
total.rep.pct,
total.rep.median,
line.rep.pct,
line.rep.median,
sine.rep.pct,
sine.rep.median,
ltr.rep.pct,
ltr.rep.median,
dna.rep.pct,
dna.rep.median,
rc.rep.pct,
rc.rep.median
)
repstats <- rbind(repstats, df)
}
final <- merge(final, repstats, by = "species", all.x = TRUE)
# reorganize and save results
final <- final[, c(1:20, 25:36, 21:24)]
library(phytools)
library(caper)
library(MuMIn)
# subset
dat <- final[!duplicated(final$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat <- dat[dat$clade %in% "Mammalia", ]
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
dat <- na.omit(dat[, c("species", "rsq", "clade", "w")])
dat <- dat[dat$species != "Callithrix jacchus", ]
# prune
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
# if phylogenetic signals are present in the residuals, use PGLS
model <- glm(rsq ~ w, data = dat)
res <- setNames(resid(model), dat$species)
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[[4]]
if (signal < 0.05) {
sig <- TRUE
cd <- comparative.data(pruned.tree, dat, names.col = "species", vcv = T)
beta <- summary(pgls(rsq ~ w, cd))$coefficients[2, 1]
p <- summary(pgls(rsq ~ w, cd))$coefficients[2, 4]
lis <- c(lis, list(c(thrs, sig, beta, p)))
} else {
sig <- FALSE
beta <- summary(glm(rsq ~ w, data = dat))$coefficients[2, 1]
p <- summary(glm(rsq ~ w, data = dat))$coefficients[2, 4]
lis <- c(lis, list(c(thrs, sig, beta, p)))
}
}
df <- as.data.frame(do.call(rbind, lis))
names(df) <- c("thrs", "p")
write.csv(df, "../results/w.csv", row.names = F)
l <- read.csv("../results/w.csv")
View(l)
names(df) <- c("thrs", "sig", "beta", "p")
write.csv(df, "../results/w.csv", row.names = F)
l <- read.csv("../results/w.csv")
View(l)
