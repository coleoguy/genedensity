method = "ML")
summary <- summary(pgls.model)
intercept <- signif(summary$tTable[1, 1], 3)
slope <- signif(summary$tTable[2, 1], 3)
slope.p <- signif(summary$tTable[2, 4], 3)
# pgls for mammals
mam <- dat[dat$clade %in% "Mammalia", ]
mam.model <- gls(rsq ~ mediandvg,
data = mam,
correlation = corBrownian(phy = pruned.tree, form = ~species),
method = "ML")
summary <- summary(mam.model)
mam.int <- signif(summary$tTable[1, 1], 3)
mam.slope <- signif(summary$tTable[2, 1], 3)
mam.slope.p <- signif(summary$tTable[2, 4], 3)
# pgls for fish
fish <- dat[dat$clade %in% "Actinopterygii", ]
fish.model <- gls(rsq ~ mediandvg,
data = fish,
correlation = corBrownian(phy = pruned.tree, form = ~species),
method = "ML")
summary <- summary(fish.model)
fish.int <- signif(summary$tTable[1, 1], 3)
fish.slope <- signif(summary$tTable[2, 1], 3)
fish.slope.p <- signif(summary$tTable[2, 4], 3)
# pgls for reptiles
rep <- dat[dat$clade %in% "Sauria", ]
rep.model <- gls(rsq ~ mediandvg,
data = rep,
correlation = corBrownian(phy = pruned.tree, form = ~species),
method = "ML")
summary <- summary(rep.model)
rep.int <- signif(summary$tTable[1, 1], 3)
rep.slope <- signif(summary$tTable[2, 1], 3)
rep.slope.p <- signif(summary$tTable[2, 4], 3)
# set factors for figure legend
dat$clade <- factor(dat$clade, levels = c("Mammalia", "Actinopterygii", "Sauria", "Others"))
# graph
ggplot(dat, aes(x = mediandvg, y = rsq, color = clade)) +
geom_point(shape = 16, alpha = 0.4, size = 2.3) +
scale_color_manual(labels = c(
paste0("Mammals\n(n = ", sum(dat$clade == "Mammalia"), ")"),
paste0("Ray-finned fish\n(n = ", sum(dat$clade == "Actinopterygii"), ")"),
paste0("Reptiles\n(n = ", sum(dat$clade == "Sauria"), ")"),
paste0("Others\n(n = ", sum(dat$clade == "Others"), ")")
), values = c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"))+
theme(plot.title = element_text(hjust = 0.475),
plot.subtitle = element_text(hjust = 0.475),
axis.line = element_line(color = "black"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.5),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black", linetype = "dotted", size = 0.25),
legend.position = c(0.86, 0.69),
legend.key.size = unit(21, "points"),
legend.margin = margin(r = 5, l = 1, t = 2, b = 4))+
#geom_abline(intercept = intercept, slope = slope, color = "black", linetype = "dashed", linewidth = 0.5) +
geom_abline(intercept = mam.int, slope = mam.slope, color = "#e41a1c", linetype = "dashed", linewidth = 0.5) +
geom_abline(intercept = fish.int, slope = fish.slope, color = "#377eb8", linetype = "dashed", linewidth = 0.5) +
geom_abline(intercept = rep.int, slope = rep.slope, color = "#4daf4a", linetype = "dashed", linewidth = 0.5) +
labs(title = bquote(italic(r)^2~"vs Median Divergence"),
subtitle = bquote(italic(β) * "-coefficient" == .(slope) * "," ~~ italic(β) ~ italic(p) * "-value" == .(slope.p)),
x = "Median Divergence",
y = bquote(italic(r)^2))
# load stuff in
packages <- c("ape", "ggplot2", "nlme")
lapply(packages, library, character.only = TRUE)
dat <- read.csv("../results/vertebrates/parsed.csv")
tree <- read.tree(paste0("../data/vertebrates/formatted_tree.nwk"))
tree$tip.label <- gsub("_", " ", tree$tip.label)
# gather and subset relevant results
dat <- dat[!is.na(dat$chromnum.1n), ]
dat <- dat[!duplicated(dat$species), ]
dat <- na.omit(dat[, c("species", "rsq", "mediandvg", "clade")])
sp.intersect <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% sp.intersect, ]
# prune tree
pruned.tree <- keep.tip(tree, sp.intersect)
# create PGLS object for trendline
pgls.model <- gls(rsq ~ mediandvg,
data = dat,
correlation = corBrownian(phy = pruned.tree, form = ~species),
method = "ML")
summary <- summary(pgls.model)
intercept <- signif(summary$tTable[1, 1], 3)
slope <- signif(summary$tTable[2, 1], 3)
slope.p <- signif(summary$tTable[2, 4], 3)
# pgls for mammals
mam <- dat[dat$clade %in% "Mammalia", ]
mam.model <- gls(rsq ~ mediandvg,
data = mam,
correlation = corBrownian(phy = pruned.tree, form = ~species),
method = "ML")
summary <- summary(mam.model)
mam.int <- signif(summary$tTable[1, 1], 3)
mam.slope <- signif(summary$tTable[2, 1], 3)
mam.slope.p <- signif(summary$tTable[2, 4], 3)
# pgls for fish
fish <- dat[dat$clade %in% "Actinopterygii", ]
fish.model <- gls(rsq ~ mediandvg,
data = fish,
correlation = corBrownian(phy = pruned.tree, form = ~species),
method = "ML")
summary <- summary(fish.model)
fish.int <- signif(summary$tTable[1, 1], 3)
fish.slope <- signif(summary$tTable[2, 1], 3)
fish.slope.p <- signif(summary$tTable[2, 4], 3)
# pgls for reptiles
rep <- dat[dat$clade %in% "Sauria", ]
rep.model <- gls(rsq ~ mediandvg,
data = rep,
correlation = corBrownian(phy = pruned.tree, form = ~species),
method = "ML")
summary <- summary(rep.model)
rep.int <- signif(summary$tTable[1, 1], 3)
rep.slope <- signif(summary$tTable[2, 1], 3)
rep.slope.p <- signif(summary$tTable[2, 4], 3)
# set factors for figure legend
dat$clade <- factor(dat$clade, levels = c("Mammalia", "Actinopterygii", "Sauria", "Others"))
# graph
ggplot(dat, aes(x = mediandvg, y = rsq, color = clade)) +
geom_point(shape = 16, alpha = 0.4, size = 2.3) +
scale_color_manual(labels = c(
paste0("Mammals\n(n = ", sum(dat$clade == "Mammalia"), ")"),
paste0("Ray-finned fish\n(n = ", sum(dat$clade == "Actinopterygii"), ")"),
paste0("Reptiles\n(n = ", sum(dat$clade == "Sauria"), ")"),
paste0("Others\n(n = ", sum(dat$clade == "Others"), ")")
), values = c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3"))+
theme(plot.title = element_text(hjust = 0.475),
plot.subtitle = element_text(hjust = 0.475),
axis.line = element_line(color = "black"),
legend.title = element_blank(),
legend.background = element_rect(fill = "white", color = "black", linewidth = 0.5),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "black", linetype = "dotted", size = 0.25),
legend.position = c(0.86, 0.69),
legend.key.size = unit(21, "points"),
legend.margin = margin(r = 5, l = 1, t = 2, b = 4))+
#geom_abline(intercept = intercept, slope = slope, color = "black", linetype = "dashed", linewidth = 0.5) +
geom_abline(intercept = mam.int, slope = mam.slope, color = "#e41a1c", linetype = "dashed", linewidth = 0.5) +
geom_abline(intercept = fish.int, slope = fish.slope, color = "#377eb8", linetype = "dashed", linewidth = 0.5) +
geom_abline(intercept = rep.int, slope = rep.slope, color = "#4daf4a", linetype = "dashed", linewidth = 0.5) +
labs(title = bquote(italic(r)^2~"vs Median Divergence"),
subtitle = bquote(italic(β) * "-coefficient" == .(slope) * "," ~~ italic(β) ~ italic(p) * "-value" == .(slope.p)),
x = "Median Divergence",
y = bquote(italic(r)^2))
unparsed <- read.csv("../results/vertebrates/unparsed.csv")
# calculate stats
files <- list.files("../results/vertebrates/repeat_landscape_divsums")
species <- gsub("_", " ", gsub(".divsum$", "", files))
asmblysz <- unique(unparsed[, c(1, 13)])
asmblysz <- asmblysz[asmblysz$species %in% species, ]
asmblysz <- asmblysz[order(asmblysz$species == species), ]
dat <- data.frame(asmblysz, files)
repstats <- data.frame()
for (i in dat$species) {
file <- dat[dat$species == i, ]$files
asmblysz.Mbp <- dat[dat$species == i, ]$asmblysize.Mbp
# read text file into lines
divsum.vector <- readLines(
paste0("../results/vertebrates/repeat_landscape_divsums/", file))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, divsum.vector) + 1
# condense relevant lines into a table
divsum.vector <- divsum.vector[start.index:length(divsum.vector)]
divsum.table <- read.table(textConnection(divsum.vector),
sep = " ",
header = TRUE)
# drop NA columns
divsum.table <- divsum.table[
-c(which(sapply(divsum.table, function(col) all(is.na(col)))))]
# vector of divergence scores
divergence <- divsum.table$Div
# vector of the frequencies of each divergence score
perdivrep.bp <- rowSums(divsum.table[, !names(divsum.table) == "Div"])
# repeat content in Mbp
totalrep.Mbp <- sum(perdivrep.bp) / 1000000
# repeat content in percent coverage
perdivrep.pct <- 0.0001 * (perdivrep.bp / asmblysz.Mbp)
totalrep.pct <- sum(perdivrep.pct)
# median
median.bin <- which(cumsum(perdivrep.pct) > sum(perdivrep.pct)/2)[1]
lower <- cumsum(perdivrep.pct)[median.bin-1]
upper <- cumsum(perdivrep.pct)[median.bin+1]
mid <- sum(perdivrep.pct)/2
mediandvg <- median.bin + (mid-lower)/(upper-lower)
# mean
meandvg <- sum(divergence*perdivrep.pct)/sum(perdivrep.pct)
# smoothed repeat content in percent coverage
perdivsmooth.pct <- smooth.spline(1:length(perdivrep.pct), perdivrep.pct, spar = 0.6)$y
# build dataframe
df <- data.frame(i,
totalrep.Mbp,
totalrep.pct,
meandvg,
mediandvg)
repstats <- rbind(repstats, df)
}
View(repstats)
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
cols <- colnames(dat)
# add mean chromosome size to dat
meansize <- c()
for (i in unique(dat$species)) {
sub <- subset(dat, species == i)
meansize <- c(meansize, mean(sub$size.Mbp))
}
dat$meansize <- meansize
d <- na.omit(dat[, c("rsq", "clade", "beta", "chromnum.1n", "est.gnsz.Mbp", "meansize", "mediandvg", "totalrep.pct")])
# testing 2-variable combinations
fit <- glm(d$rsq ~ d$est.gnsz.Mbp * d$meansize)
step(fit) # -31.86
fit <- glm(d$rsq ~ d$beta * d$est.gnsz.Mbp)
step(fit) # -20.26
fit <- glm(d$rsq ~ d$beta * d$meansize)
step(fit) # -19.75
fit <- glm(d$rsq ~ d$chromnum.1n * d$meansize)
step(fit) # -19.73
fit <- glm(d$rsq ~ d$meansize * d$mediandvg)
step(fit) # -19.59
fit <- glm(d$rsq ~ d$est.gnsz.Mbp * d$mediandvg)
step(fit) # -19.14
fit <- glm(d$rsq ~ d$chromnum.1n * d$est.gnsz.Mbp)
step(fit) # -18.85
fit <- glm(d$rsq ~ d$est.gnsz.Mbp * d$totalrep.pct)
step(fit) # -18.85
fit <- glm(d$rsq ~ d$meansize * d$totalrep.pct)
step(fit) # -18.51
fit <- glm(d$rsq ~ d$mediandvg * d$totalrep.pct)
step(fit) # -14.64
fit <- glm(d$rsq ~ d$beta * d$mediandvg)
step(fit) # -13.27
fit <- glm(d$rsq ~ d$chromnum.1n * d$mediandvg)
step(fit) # -13.27
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
cols <- colnames(dat)
# add mean chromosome size to dat
meansize <- c()
for (i in unique(dat$species)) {
sub <- subset(dat, species == i)
meansize <- c(meansize, mean(sub$size.Mbp))
}
dat$meansize <- meansize
d <- na.omit(dat[, c("rsq", "clade", "beta", "chromnum.1n", "est.gnsz.Mbp", "meansize", "mediandvg", "totalrep.pct")])
# testing 2-variable combinations
fit <- glm(d$rsq ~ d$est.gnsz.Mbp * d$meansize)
step(fit) # -31.86
fit <- glm(d$rsq ~ d$beta * d$est.gnsz.Mbp)
step(fit) # -20.26
fit <- glm(d$rsq ~ d$beta * d$totalrep.pct)
step(fit) # -11.28
fit <- glm(d$rsq ~ d$chromnum.1n * d$totalrep.pct)
step(fit) # -11.18
fit <- glm(d$rsq ~ d$beta * d$chromnum.1n)
step(fit) # -11.55
fit <- glm(d$rsq ~ d$chromnum.1n * d$mediandvg)
step(fit) # -13.27
dat <- read.csv("../results/vertebrates/parsed.csv")
View(dat)
dat <- read.csv("../results/vertebrates/parsed.csv")
View(dat)
dat <- dat[!duplicated(dat$species), ]
d <- na.omit(dat[, c("rsq", "clade", "median", "totalrep.pct")])
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
d <- na.omit(dat[, c("rsq", "clade", "median", "totalrep.pct")])
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
d <- na.omit(dat[, c("rsq", "clade", "median", "totalrep.pct")])
d$median <- 70 - d$median # subtract median by max divergence
summary(step(glm(d$rsq ~ d$median * d$totalrep.pct)))
# transform results
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# subset data and perform stepwise model selection
d <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "totalrep.prop")])
summary(step(glm(d$rsq ~ d$median.trans * d$totalrep.prop))) # d$rsq ~ d$median.trans * d$totalrep.prop
# stepwise selection for each clade
m <- d[d$clade == "Mammalia", ]
summary(step(glm(m$rsq ~ m$median.trans * m$totalrep.prop))) # m$rsq ~ m$median.trans
f <- d[d$clade == "Actinopterygii", ]
summary(step(glm(f$rsq ~ f$median.trans * f$totalrep.prop))) # f$rsq ~ f$median.trans * f$totalrep.prop
r <- d[d$clade == "Sauria", ]
summary(step(glm(r$rsq ~ r$median.trans * r$totalrep.prop))) # r$rsq ~ 1
# prune tree
library(phytools)
tree <- read.tree("../data/vertebrates/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(d$species, tree$tip.label)
pruned.tree <- keep.tip(tree, int)
# test for phylogenetic signal in overall model
res <- setNames(resid(step(glm(d$rsq ~ d$median.trans * d$totalrep.prop))), d$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE)
# phylogenetic signals in each clade
res <- setNames(resid(glm(m$rsq ~ m$median.trans)), m$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # mammals
res <- setNames(resid(glm(f$rsq ~ f$median.trans * f$totalrep.prop)), f$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # fish
res <- setNames(resid(glm(r$rsq ~ 1)), r$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # reptiles
# PGLS for mammals
library(caper)
cd <- comparative.data(tree, m, species)
summary(pgls(rsq ~ median.trans, data = cd))
# did step() overlook this model for mammals?
res <- setNames(resid(glm(m$rsq ~ m$median.trans * m$totalrep.prop)), m$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # mammals
summary(pgls(rsq ~ totalrep.prop * median.trans, data = cd))
cd <- comparative.data(tree, f, species)
summary(pgls(rsq ~ totalrep.prop * median.trans, data = cd))
res <- setNames(resid(glm(f$rsq ~ f$median.trans * f$totalrep.prop)), f$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # mammals
cd <- comparative.data(tree, f, species)
summary(pgls(rsq ~ totalrep.prop * median.trans, data = cd))
cd$data
ncols(cd$data)
ncoo(cd$data)
ncol(cd$data)
nrow(cd$data)
res <- setNames(resid(glm(f$rsq ~ f$median.trans * f$totalrep.prop)), f$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE)
cd <- comparative.data(tree, f, species)
summary(pgls(rsq ~ totalrep.prop * median.trans, data = cd))
# transform results
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# subset data and perform stepwise model selection
d <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "totalrep.prop")])
summary(step(glm(d$rsq ~ d$median.trans * d$totalrep.prop))) # d$rsq ~ d$median.trans * d$totalrep.prop
# stepwise selection for each clade
m <- d[d$clade == "Mammalia", ]
summary(step(glm(m$rsq ~ m$median.trans * m$totalrep.prop))) # m$rsq ~ m$median.trans
f <- d[d$clade == "Actinopterygii", ]
summary(step(glm(f$rsq ~ f$median.trans * f$totalrep.prop))) # f$rsq ~ f$median.trans * f$totalrep.prop
# stepwise selection for each clade
m <- d[d$clade == "Mammalia", ]
summary(step(glm(m$rsq ~ m$median.trans * m$totalrep.prop))) # m$rsq ~ m$median.trans
r <- d[d$clade == "Sauria", ]
summary(step(glm(r$rsq ~ r$median.trans * r$totalrep.prop))) # r$rsq ~ 1
# prune tree
library(phytools)
tree <- read.tree("../data/vertebrates/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(d$species, tree$tip.label)
pruned.tree <- keep.tip(tree, int)
# test for phylogenetic signal in overall model
res <- setNames(resid(step(glm(d$rsq ~ d$median.trans * d$totalrep.prop))), d$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE)
# phylogenetic signals in each clade
res <- setNames(resid(glm(m$rsq ~ m$median.trans)), m$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # mammals
res <- setNames(resid(glm(f$rsq ~ f$median.trans * f$totalrep.prop)), f$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # fish
res <- setNames(resid(glm(r$rsq ~ 1)), r$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # reptiles
# PGLS for mammals
library(caper)
cd <- comparative.data(tree, m, species)
summary(pgls(rsq ~ median.trans, data = cd))
# did step() overlook this model for mammals?
res <- setNames(resid(glm(m$rsq ~ m$median.trans * m$totalrep.prop)), m$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE) # mammals
summary(pgls(rsq ~ totalrep.prop * median.trans, data = cd))
# PGLS for fish despite lack of phylogenetic signal
res <- setNames(resid(glm(f$rsq ~ f$median.trans * f$totalrep.prop)), f$species)
phylosig(pruned.tree, res, method = "lambda", test = TRUE)
cd <- comparative.data(tree, f, species)
summary(pgls(rsq ~ totalrep.prop * median.trans, data = cd))
# repeat table
library(data.table)
# verbose
verbose <- F
dat <- read.csv("../results/vertebrates/unparsed.csv")
library(viridis)
# transform results
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!is.na(dat$chromnum.1n), ]
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# subset data
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^10
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
# convert to plotting format
x <- seq(min(dat$median.trans), max(dat$median.trans), length.out = 100)
y <- seq(min(dat$chromnum.1n), max(dat$chromnum.1n), length.out = 100)
grid <- expand.grid(median.trans = x, chromnum.1n = y)
grid$rsq <- predict(model, newdata = grid, type = "response")
z <- matrix(grid$rsq, nrow = length(x), ncol = length(y))
# plot
original <- par(no.readonly = TRUE)
par(mar = c(4, 4, 3, 8) + 0.1)
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
mtext("Expansion Recency", side=1, line=2.5)
mtext("Chromosome Number", side=2, line=2.5)
contour(x,
y,
z,
add = TRUE,
col = "black",
lwd = 1,
drawlabels = FALSE)
par(new = TRUE)
par(mar = c(4, 25, 3, 6))
z_range <- seq(min(z), max(z), length.out = 100)
image(1,
z_range,
t(matrix(z_range)),
col = viridis(100),
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
axis(4, at = pretty(z_range), labels = round(pretty(z_range), 2))
mtext("Predicted Consistency", side=4, line=2.5)
par(mar = c(5.1, 4.1, 4.1, 2.1))
# color by weights
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$chromnum.1n, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$chromnum.1n))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
# color by weights
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$chromnum.1n, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$chromnum.1n))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
plot(dat$median.trans * dat$chromnum.1n,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$chromnum.1n
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$chromnum.1n), max(dat$median.trans * dat$chromnum.1n), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
