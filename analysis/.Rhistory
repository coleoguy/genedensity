# load results and filter for terms of interest
dat <- readRDS("../results/actinopterygii.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
#dat <- dat[which(dat$lambda.p < 0.05)]
#dat <- dat[which(dat$bp.p < 0.05)]
#dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/mammalia.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
#dat <- dat[which(dat$lambda.p < 0.05)]
#dat <- dat[which(dat$bp.p < 0.05)]
#dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
#dat <- dat[which(dat$lambda.p < 0.05)]
#dat <- dat[which(dat$bp.p < 0.05)]
#dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/mammalia.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
#dat <- dat[which(dat$lambda.p < 0.05)]
#dat <- dat[which(dat$bp.p < 0.05)]
#dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/mammalia.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/mammalia.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.1)]
dat <- dat[which(dat$bp.p < 0.1)]
dat <- dat[which(dat$sw.p < 0.1)]
# recalculate
dat <- rbind(dat, dat[1,])
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/mammalia.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.1)]
dat <- dat[which(dat$bp.p < 0.1)]
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/mammalia.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.1)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/actinopterygii.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.1)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/sauria.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.1)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/sauria.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
# dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.1)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
# dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.1)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.1)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
dat <- dat[which(dat$sw.p < 0.1)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
dat <- dat[which(dat$lambda.p < 0.05)]
dat <- dat[which(dat$bp.p < 0.05)]
dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
View(dat)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
# dat <- dat[which(dat$lambda.p < 0.05)]
# dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
# dat <- dat[which(dat$lambda.p < 0.05)]
# dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
View(dat)
confint
confint
?confint
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
# dat <- dat[which(dat$lambda.p < 0.05)]
# dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
confint(avg)
plot(coef(avg))
summary(avg)
plot(predict(avg))
plot(predict(dat))
observed <- your_data$observed_variable
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
l <- read.csv("../results/parsed.csv")
l <- l[!is.na(l$chromnum.1n) & !duplicated(l$species), ]
terms <- gsub("rep.prop.", "", names(l)[grep("^rep.prop", names(l))])
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(lmtest) # Breusch-Pagan test
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
l <- read.csv("../results/parsed.csv")
l <- l[!is.na(l$chromnum.1n) & !duplicated(l$species), ]
terms <- gsub("rep.prop.", "", names(l)[grep("^rep.prop", names(l))])
combs <- gsub("rep.age.", "", names(l)[grep("^rep.age", names(l))])
l <- na.omit(l[, c("species",
"clade",
"rsq",
paste0("rep.prop.", terms),
paste0("rep.age.", combs))])
l
l
l
int <- intersect(dat$species, tree$tip.label)
dat <- dat[dat$species %in% int, ]
int <- intersect(l$species, tree$tip.label)
l <- l[l$species %in% int, ]
pruned.tree <- keep.tip(tree, int)
library(MuMIn) # multimodel inference
library(phytools) # load and prune tree
library(caper) # PGLS
library(lmtest) # Breusch-Pagan test
tree <- read.tree("../data/formatted.tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
l <- read.csv("../results/parsed.csv")
l <- l[!is.na(l$chromnum.1n) & !duplicated(l$species), ]
terms <- gsub("rep.prop.", "", names(l)[grep("^rep.prop", names(l))])
combs <- gsub("rep.age.", "", names(l)[grep("^rep.age", names(l))])
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg)
confint(avg)
confint(avg)
summary(model)
summary(avg)
confint(acg)
confint(avg)
confint(avg)
profile(avg)
avg
summary(avg)
avg
profile(avg)
# Assuming 'avg' is your model.avg object
coefficients_avg <- coef(avg)
# Create a data frame to hold coefficient estimates and their confidence intervals
coef_df <- data.frame(
Parameter = rownames(coefficients_avg),
Estimate = coefficients_avg[, 1],
Lower = coefficients_avg[, 1] - 1.96 * coefficients_avg[, 2],
Upper = coefficients_avg[, 1] + 1.96 * coefficients_avg[, 2]
)
confint(avg)
confint(avg, full = TRUE)
confint(avg, full = FALSE)
# Load required library
library(ggplot2)
# Get confidence intervals for model-averaged estimates
ci_df <- as.data.frame(confint(avg))  # avg is your model.avg object
# Extract model-averaged coefficients
coef_df <- as.data.frame(coef(avg))
# Combine coefficients and confidence intervals
plot_df <- data.frame(
Parameter = rownames(coef_df),
Estimate = coef_df[, 1],
Lower = ci_df[, 1],  # Lower bound of confidence interval
Upper = ci_df[, 2]   # Upper bound of confidence interval
)
# Make a forest plot
ggplot(plot_df, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "blue") +  # Plot coefficient estimates
geom_errorbar(aes(ymin = Lower, ymax = Upper), width = 0.2) +  # Confidence intervals
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Reference line at 0
theme_minimal() +
coord_flip() +  # Flip the axes for better readability
labs(title = "Model-Averaged Coefficients with 95% Confidence Intervals",
x = "Parameter", y = "Estimate")
View(l)
View(ci_df)
View(ci_df)
# Extract model-averaged coefficients
coef_df <- as.data.frame(coef(avg))
# Combine coefficients and confidence intervals
plot_df <- data.frame(
Parameter = rownames(coef_df),
Estimate = coef_df[, 1],
Lower = ci_df[, 1],  # Lower bound of confidence interval
Upper = ci_df[, 2]   # Upper bound of confidence interval
)
# Combine coefficients and confidence intervals
plot_df <- data.frame(
Parameter = rownames(coef_df),
Estimate = coef_df[, 1],
Lower = ci_df[, 1],  # Lower bound of confidence interval
Upper = ci_df[, 2]   # Upper bound of confidence interval
)
# Make a forest plot
ggplot(plot_df, aes(x = Parameter, y = Estimate)) +
geom_point(size = 3, color = "blue") +  # Plot coefficient estimates
geom_errorbar(aes(ymin = Lower, ymax = Upper), width = 0.2) +  # Confidence intervals
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Reference line at 0
theme_minimal() +
coord_flip() +  # Flip the axes for better readability
labs(title = "Model-Averaged Coefficients with 95% Confidence Intervals",
x = "Parameter", y = "Estimate")
# Extract confidence intervals and model-averaged coefficients
ci_df <- confint(avg)  # Confidence intervals
coef_values <- coef(avg)  # Model-averaged coefficients
# Get parameter names, estimates, and confidence limits
parameters <- rownames(ci_df)
estimates <- coef_values[, 1]
View(ci_df)
View(coef_df)
df <- as.data.frame(confint(avg), coef(avg))
View(df)
coef(avg)
df <- as.data.frame(confint(avg))
df <- cbind(df, as.data.frame(coef(avg)))
View(df)
# Load necessary libraries
library(MuMIn)
# Number of bootstrap iterations
n_boot <- 1000
# Create a matrix to store bootstrapped coefficients
boot_coefs <- matrix(NA, nrow = n_boot, ncol = length(coef(avg)))
colnames(boot_coefs) <- names(coef(avg))
# Bootstrap loop
for (i in 1:n_boot) {
# Resample data (with replacement)
boot_data <- dat[sample(1:nrow(dat), replace = TRUE), ]
# Fit models on resampled data
boot_models <- dredge(lm(y ~ age.norm + prop.norm + age.norm:prop.norm, data = boot_data))
# Perform model averaging
boot_avg <- model.avg(boot_models)
# Store bootstrapped coefficients
boot_coefs[i, ] <- coef(boot_avg)
}
# Load necessary libraries
library(MuMIn)
# Number of bootstrap iterations
n_boot <- 1000
# Create a matrix to store bootstrapped coefficients
boot_coefs <- matrix(NA, nrow = n_boot, ncol = length(coef(avg)))
colnames(boot_coefs) <- names(coef(avg))
# Bootstrap loop
for (i in 1:n_boot) {
# Resample data (with replacement)
boot_data <- dat[sample(1:nrow(dat), replace = TRUE), ]
# Fit models on resampled data
boot_models <- dredge(lm(rsq ~ age.norm + prop.norm + age.norm:prop.norm, data = boot_data))
# Perform model averaging
boot_avg <- model.avg(boot_models)
# Store bootstrapped coefficients
boot_coefs[i, ] <- coef(boot_avg)
}
library(MuMIn)
# load results and filter for terms of interest
dat <- readRDS("../results/all.8.rds")
terms <- read.csv("../results/parsed.csv")
terms <- gsub("rep.prop.", "", names(terms)[grep("^rep.prop", names(terms))])
dat <- dat[c(which(rowSums(dat[, terms]) == length(terms)),
which(rowSums(dat[, c("others", "unknown")]) == 0)), ]
# filter for models that meet assumptions
# dat <- dat[which(dat$lambda.p < 0.05)]
# dat <- dat[which(dat$bp.p < 0.05)]
# dat <- dat[which(dat$sw.p < 0.05)]
# recalculate
dat <- rbind(dat, dat[1,])
dat <- dat[-1,]
# average
avg <- model.avg(dat)
summary(avg)
confint(avg, full = TRUE)
