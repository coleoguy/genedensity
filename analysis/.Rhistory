q()
# transform results
dat <- read.csv("../results/vertebrates/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
# transform results
dat <- read.csv("../results/vertebrates/parsed.csv")
setwd("~/GitHub/genedensity/analysis")
# Zhaobo Hu
# zhaobohu2002@gmail.com
# Description: Parses results and calculates additional statistics
# to summarize contigs for each species
# contig sum/assembly size ratio threshold
thrs <- 0.8
dat <- read.csv("../data/data.csv")
# combine raw contig results
library(data.table)
dir <- "../results/individual_species_results"
files <- paste0(dir, "/",  list.files(dir))
contigs <- lapply(files, fread)
contigs <- as.data.frame(rbindlist((contigs), fill = TRUE))
# parse by contig size
contigs <- contigs[contigs$size.Mbp >= 10, ]
# remove species with less than 2 contigs
rm <- names(table(contigs$species)[table(contigs$species) < 2])
contigs <- contigs[!(contigs$species %in% rm), ]
# test new method
parsed <- data.frame()
for (z in unique(contigs$species)) {
sub <- contigs[contigs$species == z, ]
cont <- sum(sub$size.Mbp)
total <- contigs[contigs$species == z, ]$asmblysize[1]
if (cont/total >= thrs) {
parsed <- rbind(parsed, sub)
}
}
# calculate stats based on parsed results
sp <- unique(parsed$species)
final <- data.frame()
for (species in sp) {
i <- species
sub <- parsed[which(parsed$species == i), ]
if (nrow(sub) > 0){
fit <- summary(glm(sub$genecount ~ sub$size.Mbp))
beta <- fit$coefficients[2, 1]
pval.beta <- fit$coefficients[2, 4]
rsq <- summary(lm(sub$genecount ~ sub$size.Mbp))$r.squared
weightmean <- sum(sub$genedens * sub$size.Mbp) / sum(sub$size.Mbp)
weightsd <- sqrt(sum(sub$size.Mbp * (sub$genedens - weightmean)^2) / sum(sub$size.Mbp))
weightcv <- weightsd / weightmean
contig.stats <- data.frame(species, beta, pval.beta, rsq, weightmean, weightsd, weightcv)
} else {
beta <- pval.beta <- rsq <- weightmean <- weightsd <- weightcv <- NA
contig.stats <- data.frame(species, beta, pval.beta, rsq, weightmean, weightsd, weightcv)
}
final <- rbind(final, merge(merge(dat[dat$species == species, ], contig.stats, by = "species"), sub, by = "species", all = TRUE))
}
#assign clades
final$clade <- final$class
final[final$clade %in% "Aves", ]$clade <- "Sauria"
final[final$clade %in% "Reptilia", ]$clade <- "Sauria"
final[!(final$clade %in% c("Actinopterygii", "Mammalia", "Sauria")), ]$clade <- "Others"
final$cont.asmb.rat.cutoff <- thrs
# reorder columns
final <- final[, c(1, 23, 2:8, 12:17, 22, 24, 9:11, 18:21)]
# write csv
write.csv(final, "../results/parsed.csv", row.names = FALSE)
# Zhaobo Hu
# zhaobohu2002@gmail.com
# Description: Calculates statistics to summarize repeat landscape
# characteristics for each species. saves one file with parsed
# contigs and another file for parsed contigs
# calculate stats
files <- list.files("../results/divsums")
sp <- gsub("_", " ", gsub(".divsum$", "", files))
dat <- read.csv("../results/parsed.csv")
asmbsz <- dat[!duplicated(dat$species), ]
asmbsz <- asmbsz[asmbsz$species %in% sp, ]
asmbsz <- setNames(asmbsz$asmblysize.Mbp*1000000, asmbsz$species)
repstats <- data.frame()
for (i in 1:length(sp)) {
species <- sp[i]
# read text file into lines
lines <- readLines(paste0("../results/divsums/", files[i]))
# look for the start of relevant information
phrase <- "Coverage for each repeat class and divergence (Kimura)"
start.index <- match(phrase, lines) + 1
# condense relevant lines into a table
lines <- lines[start.index:length(lines)]
table <- read.table(textConnection(lines),
sep = " ",
header = TRUE)
# drop NA columns
table <- table[-c(which(sapply(table, function(col) all(is.na(col)))))]
# condense table
classes <- c("LINE", "SINE", "LTR", "DNA", "RC", "Div", "Unknown")
for (j in classes) {
pat <- paste0("^", j, "(\\.|$)")
headers <- grep(pat, names(table), value = TRUE)
sub <- table[, headers]
sums <- rowSums(as.matrix(sub))
table <- table[, !names(table) %in% headers]
assign(j, sums)
}
Others <- rowSums(as.matrix(table))
table <- data.frame(Div, LINE, SINE, LTR, DNA, RC, Others, Unknown)
# all repeat total and median
rep.bp <- rowSums(table[, !names(table) == "Div"])
total.rep.pct <- sum((rep.bp / asmbsz[i]) * 100)
total.rep.median <- which(cumsum(rep.bp) > sum(rep.bp)/2)[1]
for (k in classes) {
assign(paste0(tolower(k), ".rep.pct"), sum(table[k] / asmbsz[i] * 100))
assign(paste0(tolower(k), ".rep.median"), which(cumsum(table[k]) > sum(table[k])/2)[1])
}
# build dataframe
df <- data.frame(species,
total.rep.pct,
total.rep.median,
line.rep.pct,
line.rep.median,
sine.rep.pct,
sine.rep.median,
ltr.rep.pct,
ltr.rep.median,
dna.rep.pct,
dna.rep.median,
rc.rep.pct,
rc.rep.median
)
repstats <- rbind(repstats, df)
}
df <- merge(dat, repstats, by = "species", all.x = TRUE)
# reorganize and save results
df <- df[, c(1:20, 25:36, 21:24)]
write.csv(df,
"../results/parsed.csv",
row.names = FALSE)
qwert <- list()
classes <- c("total", "line", "sine", "ltr", "dna", "rc")
for (qwe in classes) {
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat[[paste0(qwe, ".rep.median")]]/70)
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- glm(rsq ~ median.trans, data = dat1)
res <- setNames(resid(model), dat1$species)
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[4]
if (signal < 0.05) {
library(nlme)
qwert[[paste0(qwe, ".slope")]] <- summary(gls(rsq ~ median.trans, data = dat1))$tTable[2, 1]
qwert[[paste0(qwe, ".p")]] <- summary(gls(rsq ~ median.trans, data = dat1))$tTable[2, 4]
library(piecewiseSEM)
qwert[[paste0(qwe, ".r2")]] <- rsquared(gls(rsq ~ median.trans, data = dat1))[[5]]
} else {
qwert[[paste0(qwe, ".slope")]] <- summary(glm(rsq ~ median.trans, data = dat))$coefficients[2, 1]
qwert[[paste0(qwe, ".p")]] <- summary(glm(rsq ~ median.trans, data = dat))$coefficients[2, 4]
library(piecewiseSEM)
qwert[[paste0(qwe, ".r2")]] <- rsquared(glm(rsq ~ median.trans, data = dat))[[5]]
}
}
qwert <- as.data.frame(qwert)
View(qwert)
qwert <- list()
classes <- c("total", "line", "sine", "ltr", "dna", "rc")
qwe <- classes[3]
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat[[paste0(qwe, ".rep.median")]]/70)
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- glm(rsq ~ median.trans, data = dat1)
res <- setNames(resid(model), dat1$species)
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[4]
plot(dat$median.trans, dat$rsq)
qwert[[paste0(qwe, ".slope")]] <- summary(glm(rsq ~ median.trans, data = dat))$coefficients[2, 1]
qwert[[paste0(qwe, ".p")]] <- summary(glm(rsq ~ median.trans, data = dat))$coefficients[2, 4]
qwert[[paste0(qwe, ".r2")]] <- rsquared(glm(rsq ~ median.trans, data = dat))[[5]]
library(piecewiseSEM)
qwert[[paste0(qwe, ".r2")]] <- rsquared(glm(rsq ~ median.trans, data = dat))[[5]]
qwert <- as.data.frame(qwert)
View(qwert)
View(dat)
summary(glm(rsq ~ median.trans, data = dat))$coefficients
abline(glm(rsq ~ median.trans, data = dat))
# new model
library(viridis)
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# new model
library(viridis)
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
# new model
library(viridis)
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
# new model
library(viridis)
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
dat <- na.omit(dat[, c("species", "rsq", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
# subset data
dat <- na.omit(dat[, c("species", "rsq", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# transform results
dat <- read.csv("../results/parsed.csv")
# subset data
dat <- na.omit(dat[, c("species", "rsq", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# transform results
dat <- read.csv("../results/parsed.csv")
# subset data
dat <- na.omit(dat[, c("species", "rsq", "est.gnsz.Mbp", "asmblysize.Mbp")])
# transform results
dat <- read.csv("../results/parsed.csv")
# subset data
dat <- na.omit(dat[, c("species", "clade", "rsq", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# transform results
dat <- read.csv("../results/parsed.csv")
# subset data
dat <- na.omit(dat[, c("species", "clade", "rsq", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
# subset data
dat <- na.omit(dat[, c("species", "clade", "rsq", "est.gnsz.Mbp", "asmblysize.Mbp")])
dat <- dat[dat$clade == "Mammalia", ]
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
glm(dat$rsq ~ dat$w)
summary(glm(dat$rsq ~ dat$w))
plot(dat$w, dat$rsq)
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- glm(rsq ~ w, data = dat)
model <- glm(rsq ~ w, data = dat1)
res <- setNames(resid(model), dat1$species)
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[4]
signal
library(nlme)
summary(gls(rsq ~ w, data = dat1))
# new model
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$total.rep.median/70)
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
classes <- c("total", "line", "sine", "ltr", "dna", "rc")
dat <- read.csv("../results/parsed.csv")
qwe <- "sine"
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat[[paste0(qwe, ".rep.median")]]/70)
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
qwe <- "sine"
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat[[paste0(qwe, ".rep.median")]]/70)
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat[[paste0(qwe, ".rep.median")]]/70)
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat[[paste0(qwe, ".rep.median")]]/70)
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "chromnum.1n", "total.rep.pct")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
summary(step(glm(rsq ~ median.trans * chromnum.1n * total.rep.pct, data = dat1)))
step(glm(rsq ~ median.trans, data = dat1))
model <- step(glm(rsq ~ median.trans * chromnum.1n * total.rep.pct, data = dat1))
res <- setNames(resid(model), dat1$species)
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[4]
signal
qwert[[paste0(qwe, ".slope")]] <- summary(glm(rsq ~ median.trans, data = dat))$coefficients[2, 1]
qwert <- list()
qwert[[paste0(qwe, ".slope")]] <- summary(glm(rsq ~ median.trans, data = dat))$coefficients[2, 1]
qwert[[paste0(qwe, ".p")]] <- summary(glm(rsq ~ median.trans, data = dat))$coefficients[2, 4]
library(piecewiseSEM)
qwert[[paste0(qwe, ".r2")]] <- rsquared(glm(rsq ~ median.trans, data = dat))[[5]]
qwert <- as.data.frame(qwert)
View(qwert)
# Load necessary library
library(plotly)
View(dat)
View(dat)
View(dat)
# Example data: x, y, and z (base effects), and prediction (color)
x1 <- dat$median.trans
x2 <- dat$chromnum.1n
x3 <- dat$total.rep.pct
y <- dat$rsq
summary(model)
qwe <- "sine"
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat[[paste0(qwe, ".rep.median")]]/70)
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "chromnum.1n", "total.rep.pct")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- step(glm(rsq ~ median.trans * chromnum.1n * total.rep.pct, data = dat))
dat <- read.csv("../results/parsed.csv")
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat[[paste0(qwe, ".rep.median")]]/70)
dat <- na.omit(dat[, c("species", "rsq", "clade", "median.trans", "chromnum.1n", "total.rep.pct")])
dat <- dat[dat$clade == "Mammalia", ]
dat <- dat[dat$species != "Callithrix jacchus", ]
library(phytools)
tree <- read.tree("../data/formatted_tree.nwk")
tree$tip.label <- gsub("_", " ", tree$tip.label)
int <- intersect(tree$tip.label, dat$species)
pruned.tree <- keep.tip(tree, int)
dat1 <- dat[dat$species %in% int, ]
dat1 <- dat1[match(pruned.tree$tip.label, dat1$species), ]
model <- step(glm(rsq ~ median.trans * chromnum.1n * total.rep.pct, data = dat1))
res <- setNames(resid(model), dat1$species)
signal <- phylosig(pruned.tree, res, method="lambda", test=TRUE)[4]
signal
summary(glm(rsq ~ median.trans, data = dat))
step(glm(rsq ~ median.trans * chromnum.1n * total.rep.pct, data = dat))
# generate model predictions and format results
x <- seq(min(dat$median.trans), max(dat$median.trans), length.out = 100)
y <- seq(min(dat$chromnum.1n), max(dat$chromnum.1n), length.out = 100)
grid <- expand.grid(median.trans = x, chromnum.1n = y)
grid$rsq <- predict(model, newdata = grid, type = "response")
z <- matrix(grid$rsq, nrow = length(x), ncol = length(y))
# plot
par(mar = c(4, 4, 3, 8))
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
# plot
library(viridis)
par(mar = c(4, 4, 3, 8))
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
mtext("Expansion Recency", side=1, line=2.5)
mtext("Chromosome Number", side=2, line=2.5)
contour(x,
y,
z,
add = TRUE,
col = "black",
lwd = 1,
drawlabels = FALSE)
par(new = TRUE)
par(mar = c(4, 25, 3, 6))
z_range <- seq(min(z), max(z), length.out = 100)
# model
model <- glm(formula = rsq ~ median.trans + chromnum.1n + median.trans:chromnum.1n, data = dat)
# convert to plotting format
x <- seq(min(dat$median.trans), max(dat$median.trans), length.out = 100)
y <- seq(min(dat$chromnum.1n), max(dat$chromnum.1n), length.out = 100)
grid <- expand.grid(median.trans = x, chromnum.1n = y)
grid$rsq <- predict(model, newdata = grid, type = "response")
z <- matrix(grid$rsq, nrow = length(x), ncol = length(y))
# plot
par(mar = c(4, 4, 3, 8) + 0.1)
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
mtext("expansion recency", side=1, line=2.5)
mtext("chromosome number", side=2, line=2.5)
contour(x,
y,
z,
add = TRUE,
col = "black",
lwd = 1,
drawlabels = FALSE)
# plot
par(mar = c(4, 4, 3, 8) + 0.1)
image(x = x,
y = y,
z = z,
col = viridis(100),
xlab = "",
ylab = "",
main = "Title")
mtext("expansion recency", side=1, line=2.5)
mtext("chromosome number", side=2, line=2.5)
contour(x,
y,
z,
add = TRUE,
col = "black",
lwd = 1,
drawlabels = FALSE)
par(new = TRUE)
par(mar = c(4, 25, 3, 6))
z_range <- seq(min(z), max(z), length.out = 100)
image(1,
z_range,
t(matrix(z_range)),
col = viridis(100),
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
image(1,
z_range,
t(matrix(z_range)),
col = viridis(100),
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
#axis(4,
#     at = c(round(min(z), 2), 0.4, 0.6, 0.8, round(max(z), 2)),
#     labels = c(round(min(z), 2), 0.4, 0.6, 0.8, round(max(z), 2)))
axis(4, at = pretty(z_range), labels = round(pretty(z_range), 2))
mtext("Predicted consistency", side=4, line=2.5)
par(mar = c(5, 4, 4, 2))
summary(glm(formula = rsq ~ median.trans + chromnum.1n + median.trans:chromnum.1n, data = dat))
