ticks <- c(0:(n-1)) * max(log10(comb$abs))/(n-1)
ticks
10^ticks
ticks
# tick marks
n <- 5
ticks <- c(0:(n-1)) * max(log10(comb$abs))/(n-1)
comb$abs
max(comb$abs)
c(0:(n-1)) * max(comb$abs) / (n-1)
c(0:(n-1)) * max(log10(comb$abs)) / (n-1)
10^c(0:(n-1)) * max(log10(comb$abs)) / (n-1)
10^(c(0:(n-1)) * max(log10(comb$abs)) / (n-1))
# transform
trans <- log10(comb$abs)
trans
c(0:(n-1)) * max(log10(comb$abs)) / (n-1)
c(0:(n-1)) * max(comb$abs) / (n-1)
log10((c(0:(n-1)) * max(comb$abs) / (n-1)) + 1)
(c(0:(n-1)) * max(comb$abs) / (n-1))
max(comb$abs)
max(comb$abs)+1
log10(max(comb$abs)+1)
log10(0)
log10(1)
max <- log10(max(comb$abs)+1)
(c(0:(n-1)) * max) / (n-1)
10^(c(0:(n-1)) * max) / (n-1)
10^((c(0:(n-1)) * max) / (n-1))
10^((c(0:(n-1)) * max) / (n-1)) - 1
10^((c(0:(n-1)) * max) / (n-1)) - 1
# number of ticks
n <- 5
# max
max <- log10(max(comb$abs)+1)
# ticks
(c(0:(n-1)) * max) / (n-1)
# labels
10^((c(0:(n-1)) * max) / (n-1)) - 1
ticks
labels
# number of ticks
n <- 5
# max
max <- log10(max(comb$abs)+1)
# ticks
ticks <- (c(0:(n-1)) * max) / (n-1)
# labels
labels <- 10^((c(0:(n-1)) * max) / (n-1)) - 1
max
ticks
labels
comb$abs
log10(comb$abs)
dat.trans <- log10(comb$abs)
dat.trans
max
max
log10(max)
max
dat.trans <- log10(comb$abs + 1)
dat.trans
max
(comb$abs - min(comb$abs)) / diff(range(comb$abs))
(log(comb$abs, 10) - min(log(comb$abs, 10))) / diff(range(log(comb$abs, 10)))
terms <- c(
"intercept",
"median.trans",
"rep.prop",
"median.trans:rep.prop"
)
dat <- read.csv("../results/models.csv")
names(dat) <- c("clade", "thrs", "repeat", "phylosig", "n", "stat", terms, "f2")
# models where every term is either significant or NA
df <- dat[apply(dat[, terms[-1]], 1, function(x) all(is.na(x) | x < 0.05)), ]
# remove models with all NA terms
df <- df[rowSums(is.na(df[, terms[-1]])) < length(terms[-1]), ]
# filter for significant clade-threshold-repeat combinations
df <- df[df$stat == "p", ]
hit <- c("clade", "thrs", "repeat")
df <- df[, hit]
# get beta coefficients for significant combinations
df <- merge(dat, df, by = intersect(names(dat), names(df)))
df <- df[df$stat == "beta", ]
df <- df[!df$`repeat` %in% "rc", ]
df <- df[order(df$thrs), ]
df <- df[order(df$`repeat`), ]
df <- df[order(df$clade), ]
rownames(df) <- c(1:nrow(df))
df <- df[df$thrs >= 0.8 & df$thrs <= 0.95, ]
#combinations of clades and repeats
comb <- unique(df[, c("clade", "repeat"), ])
beta <- c()
for (i in 1:nrow(comb)) {
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- df[df$`repeat` == rep, ]
sub <- sub[, c(8, 9)]
beta <- c(beta, mean(as.matrix(sub)[which(!is.na(sub))]))
}
comb$beta <- beta
comb$abs <- abs(beta)
vec <- comb$abs
library(viridis)
# resolution
res <- 1000
palette <- viridis(res)
# number of ticks
n <- 5
# max
max <- log10(max(comb$abs)+1)
# ticks
ticks <- (c(0:(n-1)) * max) / (n-1)
# labels
labels <- 10^((c(0:(n-1)) * max) / (n-1)) - 1
ticks
labels
dat.trans <- log10(comb$abs + 1)
dat.trans
dat.trans
dat.trans
max
norm <- (dat.trans - min(dat.trans)) / diff(range(dat.trans))
norm
dat.trans
diff(range(dat.trans))
norm <- dat.trans / max
norm
library(viridis)
# resolution
res <- 1000
palette <- viridis(res)
norm * 1000
palette[norm * 1000]
# Number of ticks
n <- 5
# Compute log-transformed max (avoid recomputing)
log_max <- log10(max(comb$abs) + 1)
# Generate equally spaced tick positions in log-space
ticks <- seq(0, log_max, length.out = n)
# Generate corresponding labels in original scale
labels <- 10^ticks - 1
# Log-transform the data
dat.trans <- log10(comb$abs + 1)
# Normalize values to [0,1] for color mapping
norm <- dat.trans / log_max
# Define resolution for smooth color mapping
res <- 1000
palette <- viridis(res)
# Assign colors based on normalized values
cols <- palette[round(norm * (res - 1)) + 1]
ticks
labels
cols
library(viridis)
# Number of ticks
n <- 5
# Compute log-transformed max (avoid recomputing)
log_max <- log10(max(comb$abs) + 1)
terms <- c(
"intercept",
"median.trans",
"rep.prop",
"median.trans:rep.prop"
)
dat <- read.csv("../results/models.csv")
names(dat) <- c("clade", "thrs", "repeat", "phylosig", "n", "stat", terms, "f2")
# models where every term is either significant or NA
df <- dat[apply(dat[, terms[-1]], 1, function(x) all(is.na(x) | x < 0.05)), ]
# remove models with all NA terms
df <- df[rowSums(is.na(df[, terms[-1]])) < length(terms[-1]), ]
# filter for significant clade-threshold-repeat combinations
df <- df[df$stat == "p", ]
hit <- c("clade", "thrs", "repeat")
df <- df[, hit]
# get beta coefficients for significant combinations
df <- merge(dat, df, by = intersect(names(dat), names(df)))
df <- df[df$stat == "beta", ]
df <- df[!df$`repeat` %in% "rc", ]
df <- df[order(df$thrs), ]
df <- df[order(df$`repeat`), ]
df <- df[order(df$clade), ]
rownames(df) <- c(1:nrow(df))
df <- df[df$thrs >= 0.8 & df$thrs <= 0.95, ]
#combinations of clades and repeats
comb <- unique(df[, c("clade", "repeat"), ])
beta <- c()
for (i in 1:nrow(comb)) {
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- df[df$`repeat` == rep, ]
sub <- sub[, c(8, 9)]
beta <- c(beta, mean(as.matrix(sub)[which(!is.na(sub))]))
}
comb$beta <- beta
comb$abs <- abs(beta)
library(viridis)
# Number of ticks
n <- 5
# Compute log-transformed max (avoid recomputing)
log_max <- log10(max(comb$abs) + 1)
# Generate equally spaced tick positions in log-space
ticks <- seq(0, log_max, length.out = n)
# Generate corresponding labels in original scale
labels <- 10^ticks - 1
# Log-transform the data
dat.trans <- log10(comb$abs + 1)
tocks
ticks
og_max
log_max
seq(0, log_max, length.out = n)
# Generate corresponding labels in original scale
labels <- 10^ticks - 1
labels
# number of ticks
n <- 5
# max
max <- log10(max(comb$abs)+1)
# ticks
ticks <- (c(0:(n-1)) * max) / (n-1)
# labels
labels <- 10^((c(0:(n-1)) * max) / (n-1)) - 1
labels
# Log-transform the data
dat.trans <- log10(comb$abs + 1)
dat.trans
# Normalize values to [0,1] for color mapping
norm <- dat.trans / log_max
norm
# Define resolution for smooth color mapping
res <- 1000
palette <- viridis(res)
# Assign colors based on normalized values
cols <- palette[round(norm * (res - 1)) + 1]
terms <- c(
"intercept",
"median.trans",
"rep.prop",
"median.trans:rep.prop"
)
dat <- read.csv("../results/models.csv")
names(dat) <- c("clade", "thrs", "repeat", "phylosig", "n", "stat", terms, "f2")
# models where every term is either significant or NA
df <- dat[apply(dat[, terms[-1]], 1, function(x) all(is.na(x) | x < 0.05)), ]
# remove models with all NA terms
df <- df[rowSums(is.na(df[, terms[-1]])) < length(terms[-1]), ]
# filter for significant clade-threshold-repeat combinations
df <- df[df$stat == "p", ]
hit <- c("clade", "thrs", "repeat")
df <- df[, hit]
# get beta coefficients for significant combinations
df <- merge(dat, df, by = intersect(names(dat), names(df)))
df <- df[df$stat == "beta", ]
df <- df[!df$`repeat` %in% "rc", ]
df <- df[order(df$thrs), ]
df <- df[order(df$`repeat`), ]
df <- df[order(df$clade), ]
rownames(df) <- c(1:nrow(df))
df <- df[df$thrs >= 0.8 & df$thrs <= 0.95, ]
#combinations of clades and repeats
comb <- unique(df[, c("clade", "repeat"), ])
beta <- c()
for (i in 1:nrow(comb)) {
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- df[df$`repeat` == rep, ]
sub <- sub[, c(8, 9)]
beta <- c(beta, mean(as.matrix(sub)[which(!is.na(sub))]))
}
comb$beta <- beta
comb$abs <- abs(beta)
# define tick marks
n <- 5
log.max <- log10(max(comb$abs) + 1)
ticks <- seq(0, log.max, length.out = n)
labels <- 10^ticks - 1
ticks
labels
# color mapping
library(viridis)
dat.trans <- log10(comb$abs + 1)
norm <- dat.trans / log.max
res <- 1000
palette <- viridis(res)
cols <- palette[round(norm * (res - 1)) + 1]
cols
View(df)
View(sub)
View(comb)
cols <- palette[norm * 1000]
cols
cols <- palette[round(norm * (res - 1)) + 1]
cols
terms <- c(
"intercept",
"median.trans",
"rep.prop",
"median.trans:rep.prop"
)
dat <- read.csv("../results/models.csv")
names(dat) <- c("clade", "thrs", "repeat", "phylosig", "n", "stat", terms, "f2")
# models where every term is either significant or NA
df <- dat[apply(dat[, terms[-1]], 1, function(x) all(is.na(x) | x < 0.05)), ]
# remove models with all NA terms
df <- df[rowSums(is.na(df[, terms[-1]])) < length(terms[-1]), ]
# filter for significant clade-threshold-repeat combinations
df <- df[df$stat == "p", ]
hit <- c("clade", "thrs", "repeat")
df <- df[, hit]
# get beta coefficients for significant combinations
df <- merge(dat, df, by = intersect(names(dat), names(df)))
df <- df[df$stat == "beta", ]
df <- df[!df$`repeat` %in% "rc", ]
df <- df[order(df$thrs), ]
df <- df[order(df$`repeat`), ]
df <- df[order(df$clade), ]
rownames(df) <- c(1:nrow(df))
df <- df[df$thrs >= 0.8 & df$thrs <= 0.95, ]
#combinations of clades and repeats
comb <- unique(df[, c("clade", "repeat"), ])
beta <- c()
beta
1:nrow(comb)
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
i <- 1
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- df[df$`repeat` == rep, ]
View(sub)
sub <- sub[, c(8, 9)]
View(sub)
c(beta, mean(as.matrix(sub)[which(!is.na(sub))]))
meab(sub$rep.prop)
mean(sub$rep.prop)
for (i in 1:nrow(comb)) {
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- df[df$`repeat` == rep, ]
sub <- sub[, c(8, 9)]
beta <- c(beta, mean(as.matrix(sub)[which(!is.na(sub))]))
}
comb$beta <- beta
comb$abs <- abs(beta)
View(comb)
i <- 5
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- df[df$`repeat` == rep, ]
View(sub)
View(sub)
beta <- c()
for (i in 1:nrow(comb)) {
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- sub[df$`repeat` == rep, ]
sub <- sub[, c(8, 9)]
beta <- c(beta, mean(as.matrix(sub)[which(!is.na(sub))]))
}
comb$beta <- beta
comb$abs <- abs(beta)
View(comb)
View(comb)
i <- 5
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- sub[df$`repeat` == rep, ]
View(sub)
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
View(sub)
rep
sub <- sub[df$`repeat` == rep, ]
View(sub)
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
View(sub[sub$`repeat` == rep, ])
beta <- c()
for (i in 1:nrow(comb)) {
cl <- comb[i, ][[1]]
rep <- comb[i, ][[2]]
sub <- df[df$clade == cl, ]
sub <- sub[sub$`repeat` == rep, ]
sub <- sub[, c(8, 9)]
beta <- c(beta, mean(as.matrix(sub)[which(!is.na(sub))]))
}
comb$beta <- beta
comb$abs <- abs(beta)
View(comb)
# define tick marks
n <- 5
log.max <- log10(max(comb$abs) + 1)
ticks <- seq(0, log.max, length.out = n)
labels <- 10^ticks - 1
# color mapping
library(viridis)
dat.trans <- log10(comb$abs + 1)
norm <- dat.trans / log.max
res <- 1000
palette <- viridis(res)
cols <- palette[round(norm * (res - 1)) + 1]
cols <- palette[norm * 1000]
cols <- palette[round(norm * (res - 1)) + 1]
ticks
labels
labels
cols
View(dat)
View(df)
View(sub)
View(comb)
# source function
source("functions.R")
View(dataFromFasta)
ls <- list.files("../results/indiv.contigs")
i <- ls[1]
dat <- read.csv(paste0("../results/indiv.contigs/", i))
View(dat)
View(dat)
names(dat)
?write.csv
paste0(base, i)
base <- "../results/indiv.contigs"
paste0(base, i)
base <- "../results/indiv.contigs/"
paste0(base, i)
base <- "../results/indiv.contigs/"
ls <- list.files(base)
for (i in ls) {
dat <- read.csv(paste0(base, i))
names(dat) <- c("species", "name", "size.Mb", "genecount", "genedens", "asmblysize.Mb")
write.csv(dat, file = paste0(base, i), row.names = FALSE)
}
dat <- read.csv("../results/parsed.csv")
View(dat)
names(Dat)
names(dat)
names(dat) <- c("species", "thrs", "clade", "class", "order", "family", "chromnum.1n",
"chromnum.est", "chromnum.source", "chromnum.database", "est.gnsz.Mbp",
"est.gnsz.source", "est.gnsz.db", "asmblysize.Mbp", "rsq", "total.rep.pct",
"total.rep.median", "line.rep.pct", "line.rep.median", "sine.rep.pct",
"sine.rep.median", "ltr.rep.pct", "ltr.rep.median", "dna.rep.pct",
"dna.rep.median", "rc.rep.pct", "rc.rep.median", "name", "size.Mbp",
"genecount", "genedens")
length(c("species", "thrs", "clade", "class", "order", "family", "chromnum.1n",
"chromnum.est", "chromnum.source", "chromnum.database", "est.gnsz.Mbp",
"est.gnsz.source", "est.gnsz.db", "asmblysize.Mbp", "rsq", "total.rep.pct",
"total.rep.median", "line.rep.pct", "line.rep.median", "sine.rep.pct",
"sine.rep.median", "ltr.rep.pct", "ltr.rep.median", "dna.rep.pct",
"dna.rep.median", "rc.rep.pct", "rc.rep.median", "name", "size.Mbp",
"genecount", "genedens"))
View(dat)
names(dat) <- c("species", "thrs", "clade", "class", "order", "family", "chromnum.1n",
"chromnum.est", "chromnum.source", "chromnum.database", "est.gnsz.Mbp",
"est.gnsz.source", "est.gnsz.database", "asmblysize.Mbp", "rsq", "total.rep.pct",
"total.rep.median", "line.rep.pct", "line.rep.median", "sine.rep.pct",
"sine.rep.median", "ltr.rep.pct", "ltr.rep.median", "dna.rep.pct",
"dna.rep.median", "rc.rep.pct", "rc.rep.median", "name", "size.Mbp",
"genecount", "genedens")
write.csv(dat, file = "../results/parsed.csv", row.names = FALSE)
# load stuff in
library(ape)
source("../analysis/functions.R")
dat <- read.csv("../data/data.csv")
tree <- read.tree("../data/chordates_species.nwk")
dat <- read.csv("../data/data.csv")
tree <- read.tree("../data/chordates_species.nwk")
# format and prune tree
sp <- unique(dat$species)
spf <- sub("^([^_]*_[^_]*)_.*", "\\1", gsub(" ", "_", sp))
spf <- sub("^([^_]*_[^_]*)_.*", "\\1", gsub(" ", "_", sp))
sp.intersect <- intersect(tree$tip.label, spf)
pruned.tree <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% sp.intersect)])
spn <- sp[match(spf[match(pruned.tree$tip.label, spf)], spf)]
spf
sp.intersect <- intersect(tree$tip.label, spf)
pruned.tree <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% sp.intersect)])
spn <- sp[match(spf[match(pruned.tree$tip.label, spf)], spf)]
spn
# load stuff in
library(ape)
dat <- read.csv("../data/data.csv")
tree <- read.tree("../data/chordates_species.nwk")
# format and prune tree
sp <- unique(dat$species)
sp.underscore <- sub("^([^_]*_[^_]*)_.*", "\\1", gsub(" ", "_", sp))
sp.intersect <- intersect(tree$tip.label, sp.underscore)
pruned.tree <- drop.tip(tree, tree$tip.label[!(tree$tip.label %in% sp.intersect)])
sp.match.subsp <- sp[match(sp.underscore[match(pruned.tree$tip.label, sp.underscore)],
sp.underscore)]
pruned.tree$tip.label <- sp.match.subsp
write.tree(pruned.tree, file = paste0("../data/formatted.tree.nwk"))
dat <- read.csv("../results/parsed.csv")
names(dat) <- c("species", "thrs", "clade", "class", "order", "family", "chromnum.1n",
"chromnum.est", "chromnum.source", "chromnum.database", "est.gnsz.Mb",
"est.gnsz.source", "est.gnsz.database", "asmblysize.Mb", "rsq", "total.rep.pct",
"total.rep.median", "line.rep.pct", "line.rep.median", "sine.rep.pct",
"sine.rep.median", "ltr.rep.pct", "ltr.rep.median", "dna.rep.pct",
"dna.rep.median", "rc.rep.pct", "rc.rep.median", "name", "size.Mb",
"genecount", "genedens")
write.csv(dat, file = "../results/parsed.csv", row.names = FALSE)
