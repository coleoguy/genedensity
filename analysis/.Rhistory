z_range <- seq(min(z), max(z), length.out = 100)
image(1,
z_range,
t(matrix(z_range)),
col = viridis(100),
xaxt = "n",
yaxt = "n",
xlab = "",
ylab = "")
axis(4, at = pretty(z_range), labels = round(pretty(z_range), 2))
mtext("Predicted Consistency", side=4, line=2.5)
par(mar = c(5.1, 4.1, 4.1, 2.1))
model
summary(model)
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# marsupials?
mars <- c()
for (g in 1:nrow(dat)) {
if (dat[g, ]$order %in% c("Didelphimorphia",
"Paucituberculata",
"Microbiotheria",
"Dasyuromorphia",
"Notoryctemorphia",
"Peramelemorphia",
"Diprotodontia")){
mars <- c(mars, TRUE)
} else {
mars <- c(mars, FALSE)
}
}
dat$mars <- mars
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# marsupials
mars <- dat[, c("species", "mars", "rsq", "order")]
mars <- mars[mars$order != "Monotrema", ]
obs.diff <- mean(mars[mars$mars == TRUE, ]$rsq) - mean(mars[mars$mars == FALSE, ]$rsq)
null.diff <- c()
for (f in 1:100000) {
null <- sample(mars)
null.diff <- c(null.diff, mean(null[null$mars == TRUE, ]$rsq) - mean(null[null$mars == FALSE, ]$rsq))
}
p <- mean(abs(null.diff) >= abs(obs.diff))
print(paste0("p = ", p))
# nope
# median
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# totsl repeat
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# product of total repeat and median
plot(dat$median.trans * dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$totalrep.prop
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$totalrep.prop), max(dat$median.trans * dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^7
sum(dat$w)
hist(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
summary(model)
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# marsupials?
mars <- c()
for (g in 1:nrow(dat)) {
if (dat[g, ]$order %in% c("Didelphimorphia",
"Paucituberculata",
"Microbiotheria",
"Dasyuromorphia",
"Notoryctemorphia",
"Peramelemorphia",
"Diprotodontia")){
mars <- c(mars, TRUE)
} else {
mars <- c(mars, FALSE)
}
}
dat$mars <- mars
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# marsupials
mars <- dat[, c("species", "mars", "rsq", "order")]
mars <- mars[mars$order != "Monotrema", ]
obs.diff <- mean(mars[mars$mars == TRUE, ]$rsq) - mean(mars[mars$mars == FALSE, ]$rsq)
null.diff <- c()
for (f in 1:10000) {
null <- sample(mars)
null.diff <- c(null.diff, mean(null[null$mars == TRUE, ]$rsq) - mean(null[null$mars == FALSE, ]$rsq))
}
p <- mean(abs(null.diff) >= abs(obs.diff))
print(paste0("p = ", p))
# nope
# median
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# totsl repeat
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# product of total repeat and median
plot(dat$median.trans * dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$totalrep.prop
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$totalrep.prop), max(dat$median.trans * dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^8
sum(dat$w)
hist(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
summary(mmodel)
summary(model)
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# marsupials?
mars <- c()
for (g in 1:nrow(dat)) {
if (dat[g, ]$order %in% c("Didelphimorphia",
"Paucituberculata",
"Microbiotheria",
"Dasyuromorphia",
"Notoryctemorphia",
"Peramelemorphia",
"Diprotodontia")){
mars <- c(mars, TRUE)
} else {
mars <- c(mars, FALSE)
}
}
dat$mars <- mars
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# marsupials
mars <- dat[, c("species", "mars", "rsq", "order")]
mars <- mars[mars$order != "Monotrema", ]
obs.diff <- mean(mars[mars$mars == TRUE, ]$rsq) - mean(mars[mars$mars == FALSE, ]$rsq)
null.diff <- c()
for (f in 1:10000) {
null <- sample(mars)
null.diff <- c(null.diff, mean(null[null$mars == TRUE, ]$rsq) - mean(null[null$mars == FALSE, ]$rsq))
}
p <- mean(abs(null.diff) >= abs(obs.diff))
print(paste0("p = ", p))
# nope
# median
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# totsl repeat
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# product of total repeat and median
plot(dat$median.trans * dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$totalrep.prop
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$totalrep.prop), max(dat$median.trans * dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^10
sum(dat$w)
hist(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
summary(model)
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# marsupials?
mars <- c()
for (g in 1:nrow(dat)) {
if (dat[g, ]$order %in% c("Didelphimorphia",
"Paucituberculata",
"Microbiotheria",
"Dasyuromorphia",
"Notoryctemorphia",
"Peramelemorphia",
"Diprotodontia")){
mars <- c(mars, TRUE)
} else {
mars <- c(mars, FALSE)
}
}
dat$mars <- mars
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# marsupials
mars <- dat[, c("species", "mars", "rsq", "order")]
mars <- mars[mars$order != "Monotrema", ]
obs.diff <- mean(mars[mars$mars == TRUE, ]$rsq) - mean(mars[mars$mars == FALSE, ]$rsq)
null.diff <- c()
for (f in 1:10000) {
null <- sample(mars)
null.diff <- c(null.diff, mean(null[null$mars == TRUE, ]$rsq) - mean(null[null$mars == FALSE, ]$rsq))
}
p <- mean(abs(null.diff) >= abs(obs.diff))
print(paste0("p = ", p))
# nope
# median
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# totsl repeat
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# product of total repeat and median
plot(dat$median.trans * dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$totalrep.prop
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$totalrep.prop), max(dat$median.trans * dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^5
sum(dat$w)
hist(dat$w)
# model
model <- glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)
summary(model)
summary(step(glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)))
# Model for mammals
library(viridis)
# transform results
dat <- read.csv("../results/parsed.csv")
d <- dat
dat <- dat[!duplicated(dat$species), ]
dat <- dat[!is.na(dat$chromnum.1n), ]
dat$median.trans <- 1 - (dat$median/70)
dat$totalrep.prop <- dat$totalrep.pct * 0.01
contigs <- c()
for (h in dat$species) {
sub <- d[d$species == h, ]
contigs <- c(contigs, nrow(sub))
}
dat$contigs <- contigs
# subset data
dat <- na.omit(dat[, c("species", "rsq", "class", "order", "family", "clade", "median.trans", "totalrep.prop", "chromnum.1n", "est.gnsz.Mbp", "asmblysize.Mbp", "contigs")])
dat <- dat[dat$clade == "Mammalia", ]
# marsupials?
mars <- c()
for (g in 1:nrow(dat)) {
if (dat[g, ]$order %in% c("Didelphimorphia",
"Paucituberculata",
"Microbiotheria",
"Dasyuromorphia",
"Notoryctemorphia",
"Peramelemorphia",
"Diprotodontia")){
mars <- c(mars, TRUE)
} else {
mars <- c(mars, FALSE)
}
}
dat$mars <- mars
# remove assembly with bloated assembly size
dat <- dat[dat$species != "Callithrix jacchus", ]
# assign weights; weights approach 1 as assembly sizes approach genome sizes. weights tend toward 0 as assembly sizes deviate from genome sizes
dat$w <- 1 - (abs(dat$asmblysize.Mbp - dat$est.gnsz.Mbp) / dat$est.gnsz.Mbp)
# marsupials
mars <- dat[, c("species", "mars", "rsq", "order")]
mars <- mars[mars$order != "Monotrema", ]
obs.diff <- mean(mars[mars$mars == TRUE, ]$rsq) - mean(mars[mars$mars == FALSE, ]$rsq)
null.diff <- c()
for (f in 1:10000) {
null <- sample(mars)
null.diff <- c(null.diff, mean(null[null$mars == TRUE, ]$rsq) - mean(null[null$mars == FALSE, ]$rsq))
}
p <- mean(abs(null.diff) >= abs(obs.diff))
print(paste0("p = ", p))
# nope
# median
cols <- viridis(length(unique(dat$w)), alpha = 0.45)[as.factor(dat$w)]
plot(dat$median.trans,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$median.trans, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$median.trans))
legend("bottomright",
legend = round(seq(min(dat$median.trans), max(dat$median.trans), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# totsl repeat
plot(dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
abline(glm(dat$rsq ~ dat$totalrep.prop, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ dat$totalrep.prop))
legend("bottomright",
legend = round(seq(min(dat$totalrep.prop), max(dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# product of total repeat and median
plot(dat$median.trans * dat$totalrep.prop,
dat$rsq,
col = cols,
pch = 16)
term <- dat$median.trans * dat$totalrep.prop
abline(glm(dat$rsq ~ term, weights = dat$w), col = "blue")
abline(glm(dat$rsq ~ term))
legend("bottomright",
legend = round(seq(min(dat$median.trans * dat$totalrep.prop), max(dat$median.trans * dat$totalrep.prop), length.out = 5), 2),
fill = viridis(5),
title = "Legend")
# average number of complete genomes
sum(dat$w)
# add an exponent to emphasize high quality genomes
dat$w <- dat$w^8
summary(step(glm(rsq ~ chromnum.1n + median.trans + median.trans:chromnum.1n, weights = dat$w, data = dat)))
library(ape)
results <- read.csv("../results/parsed.csv")
tree <- read.tree("../data/formatted_tree.nwk")
# drop species not in tree
results <- unique(results[1:34, ])
sp <- intersect(results$species, gsub("_", " ", tree$tip.label))
results <- results[results$species %in% sp, ]
library(ape)
results <- read.csv("../results/parsed.csv")
tree <- read.tree("../data/formatted_tree.nwk")
# drop species not in tree
results <- results[!duplicated(results$species), ]
sp <- intersect(results$species, gsub("_", " ", tree$tip.label))
results <- results[results$species %in% sp, ]
# drop species without chromosome number
results <- results[!is.na(results$chromnum.1n), ]
# format species
results <- results[, c("species", "family")]
results$species <- na.omit(gsub(" ", "_", results$species))
# drop analyzed species
sp.analyzed <- list.files("../results/divsums")
sp.analyzed <- gsub(".divsum$", "", sp.analyzed)
results <- results[!(results$species %in% sp.analyzed), ]
write.table(results,
paste0("../data/landsc_ref.csv"),
sep = ",",
col.names = FALSE,
row.names = FALSE,
quote = FALSE)
View(results)
